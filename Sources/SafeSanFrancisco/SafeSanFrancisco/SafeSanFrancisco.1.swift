#if os(macOS)
import AppKit
#endif
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#endif
#if canImport(SwiftUI)
import SwiftUI
#endif
@available(iOS 13.1, tvOS 13.0, watchOS 6.1, macOS 10.15, *)
extension SF {
    public struct aspectratio {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “aspectratio.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "aspectratio.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “aspectratio.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "aspectratio.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “aspectratio.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "aspectratio.fill", configuration: configuration)
            }
            
            ///Creates the “aspectratio.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "aspectratio.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “aspectratio.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "aspectratio.fill")
            }
            
            ///Creates the “aspectratio.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "aspectratio.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct flashlight {
        public struct off {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “flashlight.off.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flashlight.off.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “flashlight.off.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flashlight.off.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “flashlight.off.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flashlight.off.fill", configuration: configuration)
                }
                
                ///Creates the “flashlight.off.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flashlight.off.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “flashlight.off.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flashlight.off.fill")
                }
                
                ///Creates the “flashlight.off.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flashlight.off.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct on {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “flashlight.on.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flashlight.on.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “flashlight.on.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flashlight.on.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “flashlight.on.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flashlight.on.fill", configuration: configuration)
                }
                
                ///Creates the “flashlight.on.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flashlight.on.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “flashlight.on.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flashlight.on.fill")
                }
                
                ///Creates the “flashlight.on.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flashlight.on.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct flip {
        public struct horizontal {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “flip.horizontal.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flip.horizontal.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “flip.horizontal.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flip.horizontal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “flip.horizontal.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flip.horizontal.fill", configuration: configuration)
                }
                
                ///Creates the “flip.horizontal.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flip.horizontal.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “flip.horizontal.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flip.horizontal.fill")
                }
                
                ///Creates the “flip.horizontal.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flip.horizontal.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct studentdesk {
        private init() {}
    }
    
}

@available(iOS 13.1, tvOS 13.0, watchOS 6.1, macOS 10.15, *)
extension SF.arrow.uturn.left.circle {
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 13.1, tvOS 13.0, watchOS 6.1, macOS 10.15, *)
extension SF.circle.grid {
    public struct x2x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.grid.2x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.2x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.grid.2x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.grid.2x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.2x2.fill", configuration: configuration)
            }
            
            ///Creates the “circle.grid.2x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.2x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.grid.2x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.2x2.fill")
            }
            
            ///Creates the “circle.grid.2x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.2x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _2x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.grid.2x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.2x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.grid.2x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.grid.2x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.2x2.fill", configuration: configuration)
            }
            
            ///Creates the “circle.grid.2x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.2x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.grid.2x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.2x2.fill")
            }
            
            ///Creates the “circle.grid.2x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.2x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 13.1, tvOS 13.0, watchOS 6.1, macOS 10.15, *)
extension SF.mappin {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “mappin.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mappin.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “mappin.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mappin.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “mappin.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mappin.circle.fill", configuration: configuration)
            }
            
            ///Creates the “mappin.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mappin.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “mappin.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mappin.circle.fill")
            }
            
            ///Creates the “mappin.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mappin.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 13.1, tvOS 13.0, watchOS 6.1, macOS 10.15, *)
extension SF.paperclip {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “paperclip.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "paperclip.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “paperclip.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "paperclip.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “paperclip.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "paperclip.circle.fill", configuration: configuration)
            }
            
            ///Creates the “paperclip.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "paperclip.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “paperclip.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "paperclip.circle.fill")
            }
            
            ///Creates the “paperclip.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "paperclip.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 13.1, tvOS 13.0, watchOS 6.1, macOS 10.15, *)
extension SF.pin {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pin.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pin.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pin.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pin.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pin.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pin.circle.fill", configuration: configuration)
            }
            
            ///Creates the “pin.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pin.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pin.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pin.circle.fill")
            }
            
            ///Creates the “pin.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pin.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 13.1, tvOS 13.0, watchOS 6.1, macOS 10.15, *)
extension SF.scissors {
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF {
    public struct x4k {
        public struct tv {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “4k.tv.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "4k.tv.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “4k.tv.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "4k.tv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “4k.tv.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "4k.tv.fill", configuration: configuration)
                }
                
                ///Creates the “4k.tv.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "4k.tv.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “4k.tv.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "4k.tv.fill")
                }
                
                ///Creates the “4k.tv.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "4k.tv.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _4k {
        public struct tv {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “4k.tv.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "4k.tv.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “4k.tv.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "4k.tv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “4k.tv.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "4k.tv.fill", configuration: configuration)
                }
                
                ///Creates the “4k.tv.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "4k.tv.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “4k.tv.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "4k.tv.fill")
                }
                
                ///Creates the “4k.tv.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "4k.tv.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct abc {
        private init() {}
    }
    
    public struct airpod {
        public struct left {
            private init() {}
        }
        
        public struct right {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct airpodpro {
        public struct left {
            private init() {}
        }
        
        public struct right {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct airpods {
        private init() {}
    }
    
    public struct airpodspro {
        private init() {}
    }
    
    public struct airport {
        public struct express {
            private init() {}
        }
        
        public struct extreme {
            public struct tower {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct amplifier {
        private init() {}
    }
    
    public struct appclip {
        private init() {}
    }
    
    public struct applelogo {
        private init() {}
    }
    
    public struct applescript {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “applescript.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "applescript.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “applescript.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "applescript.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “applescript.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "applescript.fill", configuration: configuration)
            }
            
            ///Creates the “applescript.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "applescript.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “applescript.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "applescript.fill")
            }
            
            ///Creates the “applescript.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "applescript.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct appletv {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “appletv.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "appletv.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “appletv.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "appletv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “appletv.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "appletv.fill", configuration: configuration)
            }
            
            ///Creates the “appletv.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "appletv.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “appletv.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "appletv.fill")
            }
            
            ///Creates the “appletv.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "appletv.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct applewatch {
        public struct radiowaves {
            public struct left {
                public struct and {
                    public struct right {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct slash {
            private init() {}
        }
        
        public struct watchface {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct apps {
        public struct ipad {
            public struct landscape {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct iphone {
            public struct badge {
                public struct plus {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct landscape {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct atom {
        private init() {}
    }
    
    public struct banknote {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “banknote.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "banknote.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “banknote.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "banknote.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “banknote.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "banknote.fill", configuration: configuration)
            }
            
            ///Creates the “banknote.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "banknote.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “banknote.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "banknote.fill")
            }
            
            ///Creates the “banknote.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "banknote.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct barometer {
        private init() {}
    }
    
    public struct bicycle {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “bicycle.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "bicycle.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “bicycle.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "bicycle.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “bicycle.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "bicycle.circle.fill", configuration: configuration)
                }
                
                ///Creates the “bicycle.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "bicycle.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “bicycle.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "bicycle.circle.fill")
                }
                
                ///Creates the “bicycle.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "bicycle.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct binoculars {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “binoculars.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "binoculars.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “binoculars.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "binoculars.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “binoculars.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "binoculars.fill", configuration: configuration)
            }
            
            ///Creates the “binoculars.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "binoculars.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “binoculars.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "binoculars.fill")
            }
            
            ///Creates the “binoculars.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "binoculars.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct bonjour {
        private init() {}
    }
    
    public struct books {
        public struct vertical {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “books.vertical.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "books.vertical.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “books.vertical.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "books.vertical.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “books.vertical.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "books.vertical.fill", configuration: configuration)
                }
                
                ///Creates the “books.vertical.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "books.vertical.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “books.vertical.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "books.vertical.fill")
                }
                
                ///Creates the “books.vertical.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "books.vertical.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct building {
        public struct x2 {
            public struct crop {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "building.2.crop.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "building.2.crop.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "building.2.crop.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "building.2.crop.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “building.2.crop.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "building.2.crop.circle.fill")
                        }
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "building.2.crop.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “building.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "building.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “building.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "building.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “building.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "building.2.fill", configuration: configuration)
                }
                
                ///Creates the “building.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "building.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “building.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "building.2.fill")
                }
                
                ///Creates the “building.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "building.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct crop {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "building.2.crop.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "building.2.crop.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "building.2.crop.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "building.2.crop.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “building.2.crop.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "building.2.crop.circle.fill")
                        }
                        
                        ///Creates the “building.2.crop.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "building.2.crop.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “building.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "building.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “building.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "building.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “building.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "building.2.fill", configuration: configuration)
                }
                
                ///Creates the “building.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "building.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “building.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "building.2.fill")
                }
                
                ///Creates the “building.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "building.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct columns {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “building.columns.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "building.columns.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “building.columns.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "building.columns.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “building.columns.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "building.columns.fill", configuration: configuration)
                }
                
                ///Creates the “building.columns.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "building.columns.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “building.columns.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "building.columns.fill")
                }
                
                ///Creates the “building.columns.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "building.columns.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “building.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "building.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “building.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "building.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “building.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "building.fill", configuration: configuration)
            }
            
            ///Creates the “building.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "building.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “building.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "building.fill")
            }
            
            ///Creates the “building.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "building.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct bus {
        public struct doubledecker {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “bus.doubledecker.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "bus.doubledecker.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “bus.doubledecker.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "bus.doubledecker.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “bus.doubledecker.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "bus.doubledecker.fill", configuration: configuration)
                }
                
                ///Creates the “bus.doubledecker.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "bus.doubledecker.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “bus.doubledecker.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "bus.doubledecker.fill")
                }
                
                ///Creates the “bus.doubledecker.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "bus.doubledecker.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bus.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bus.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bus.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bus.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bus.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bus.fill", configuration: configuration)
            }
            
            ///Creates the “bus.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bus.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bus.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bus.fill")
            }
            
            ///Creates the “bus.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bus.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct candybarphone {
        private init() {}
    }
    
    public struct `case` {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “case.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "case.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “case.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "case.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “case.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "case.fill", configuration: configuration)
            }
            
            ///Creates the “case.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "case.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “case.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "case.fill")
            }
            
            ///Creates the “case.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "case.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct checkerboard {
        public struct rectangle {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circlebadge {
        public struct x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circlebadge.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circlebadge.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circlebadge.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circlebadge.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circlebadge.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circlebadge.2.fill", configuration: configuration)
                }
                
                ///Creates the “circlebadge.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circlebadge.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circlebadge.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circlebadge.2.fill")
                }
                
                ///Creates the “circlebadge.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circlebadge.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circlebadge.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circlebadge.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circlebadge.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circlebadge.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circlebadge.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circlebadge.2.fill", configuration: configuration)
                }
                
                ///Creates the “circlebadge.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circlebadge.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circlebadge.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circlebadge.2.fill")
                }
                
                ///Creates the “circlebadge.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circlebadge.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circlebadge.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circlebadge.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circlebadge.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circlebadge.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circlebadge.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circlebadge.fill", configuration: configuration)
            }
            
            ///Creates the “circlebadge.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circlebadge.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circlebadge.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circlebadge.fill")
            }
            
            ///Creates the “circlebadge.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circlebadge.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct circles {
        public struct hexagongrid {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circles.hexagongrid.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circles.hexagongrid.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circles.hexagongrid.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circles.hexagongrid.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circles.hexagongrid.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circles.hexagongrid.fill", configuration: configuration)
                }
                
                ///Creates the “circles.hexagongrid.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circles.hexagongrid.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circles.hexagongrid.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circles.hexagongrid.fill")
                }
                
                ///Creates the “circles.hexagongrid.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circles.hexagongrid.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct hexagonpath {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circles.hexagonpath.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circles.hexagonpath.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circles.hexagonpath.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circles.hexagonpath.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circles.hexagonpath.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circles.hexagonpath.fill", configuration: configuration)
                }
                
                ///Creates the “circles.hexagonpath.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circles.hexagonpath.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circles.hexagonpath.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circles.hexagonpath.fill")
                }
                
                ///Creates the “circles.hexagonpath.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circles.hexagonpath.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct comb {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “comb.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "comb.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “comb.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "comb.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “comb.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "comb.fill", configuration: configuration)
            }
            
            ///Creates the “comb.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "comb.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “comb.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "comb.fill")
            }
            
            ///Creates the “comb.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "comb.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct cone {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cone.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cone.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cone.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cone.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cone.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cone.fill", configuration: configuration)
            }
            
            ///Creates the “cone.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cone.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cone.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cone.fill")
            }
            
            ///Creates the “cone.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cone.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct contextualmenu {
        public struct and {
            public struct cursorarrow {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cpu {
        private init() {}
    }
    
    public struct cross {
        public struct `case` {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “cross.case.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "cross.case.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “cross.case.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "cross.case.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “cross.case.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "cross.case.fill", configuration: configuration)
                }
                
                ///Creates the “cross.case.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "cross.case.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “cross.case.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "cross.case.fill")
                }
                
                ///Creates the “cross.case.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "cross.case.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “cross.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "cross.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “cross.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "cross.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “cross.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "cross.circle.fill", configuration: configuration)
                }
                
                ///Creates the “cross.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "cross.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “cross.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "cross.circle.fill")
                }
                
                ///Creates the “cross.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "cross.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cross.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cross.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cross.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cross.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cross.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cross.fill", configuration: configuration)
            }
            
            ///Creates the “cross.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cross.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cross.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cross.fill")
            }
            
            ///Creates the “cross.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cross.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct crown {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “crown.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "crown.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “crown.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "crown.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “crown.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "crown.fill", configuration: configuration)
            }
            
            ///Creates the “crown.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "crown.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “crown.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "crown.fill")
            }
            
            ///Creates the “crown.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "crown.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct curlybraces {
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “curlybraces.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "curlybraces.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “curlybraces.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "curlybraces.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “curlybraces.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "curlybraces.square.fill", configuration: configuration)
                }
                
                ///Creates the “curlybraces.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "curlybraces.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “curlybraces.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "curlybraces.square.fill")
                }
                
                ///Creates the “curlybraces.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "curlybraces.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cursorarrow {
        public struct and {
            public struct square {
                public struct on {
                    public struct square {
                        public struct dashed {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct click {
            public struct x2 {
                private init() {}
            }
            
            public struct _2 {
                private init() {}
            }
            
            public struct badge {
                public struct clock {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct motionlines {
            public struct click {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct rays {
            private init() {}
        }
        
        public struct square {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cylinder {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cylinder.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cylinder.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cylinder.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cylinder.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cylinder.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cylinder.fill", configuration: configuration)
            }
            
            ///Creates the “cylinder.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cylinder.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cylinder.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cylinder.fill")
            }
            
            ///Creates the “cylinder.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cylinder.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct split {
            public struct x1x2 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cylinder.split.1x2.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cylinder.split.1x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cylinder.split.1x2.fill", configuration: configuration)
                    }
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cylinder.split.1x2.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “cylinder.split.1x2.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cylinder.split.1x2.fill")
                    }
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cylinder.split.1x2.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct _1x2 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cylinder.split.1x2.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cylinder.split.1x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cylinder.split.1x2.fill", configuration: configuration)
                    }
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cylinder.split.1x2.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “cylinder.split.1x2.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cylinder.split.1x2.fill")
                    }
                    
                    ///Creates the “cylinder.split.1x2.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cylinder.split.1x2.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct deskclock {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “deskclock.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "deskclock.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “deskclock.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "deskclock.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “deskclock.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "deskclock.fill", configuration: configuration)
            }
            
            ///Creates the “deskclock.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "deskclock.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “deskclock.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "deskclock.fill")
            }
            
            ///Creates the “deskclock.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "deskclock.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct diamond {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “diamond.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "diamond.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “diamond.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "diamond.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “diamond.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "diamond.fill", configuration: configuration)
            }
            
            ///Creates the “diamond.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "diamond.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “diamond.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "diamond.fill")
            }
            
            ///Creates the “diamond.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "diamond.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct die {
        public struct face {
            public struct x1 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.1.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.1.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.1.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.1.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.1.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.1.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.1.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.1.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.1.fill")
                    }
                    
                    ///Creates the “die.face.1.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.1.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct _1 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.1.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.1.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.1.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.1.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.1.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.1.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.1.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.1.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.1.fill")
                    }
                    
                    ///Creates the “die.face.1.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.1.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct x2 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.2.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.2.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.2.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.2.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.2.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.2.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.2.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.2.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.2.fill")
                    }
                    
                    ///Creates the “die.face.2.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.2.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct _2 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.2.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.2.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.2.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.2.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.2.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.2.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.2.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.2.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.2.fill")
                    }
                    
                    ///Creates the “die.face.2.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.2.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct x3 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.3.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.3.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.3.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.3.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.3.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.3.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.3.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.3.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.3.fill")
                    }
                    
                    ///Creates the “die.face.3.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.3.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct _3 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.3.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.3.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.3.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.3.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.3.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.3.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.3.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.3.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.3.fill")
                    }
                    
                    ///Creates the “die.face.3.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.3.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct x4 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.4.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.4.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.4.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.4.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.4.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.4.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.4.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.4.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.4.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.4.fill")
                    }
                    
                    ///Creates the “die.face.4.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.4.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct _4 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.4.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.4.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.4.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.4.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.4.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.4.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.4.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.4.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.4.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.4.fill")
                    }
                    
                    ///Creates the “die.face.4.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.4.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct x5 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.5.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.5.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.5.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.5.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.5.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.5.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.5.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.5.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.5.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.5.fill")
                    }
                    
                    ///Creates the “die.face.5.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.5.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct _5 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.5.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.5.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.5.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.5.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.5.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.5.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.5.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.5.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.5.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.5.fill")
                    }
                    
                    ///Creates the “die.face.5.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.5.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct x6 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.6.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.6.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.6.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.6.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.6.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.6.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.6.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.6.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.6.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.6.fill")
                    }
                    
                    ///Creates the “die.face.6.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.6.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct _6 {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “die.face.6.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.6.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “die.face.6.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "die.face.6.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “die.face.6.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.6.fill", configuration: configuration)
                    }
                    
                    ///Creates the “die.face.6.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "die.face.6.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “die.face.6.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.6.fill")
                    }
                    
                    ///Creates the “die.face.6.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "die.face.6.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct display {
        public struct x2 {
            private init() {}
        }
        
        public struct _2 {
            private init() {}
        }
        
        public struct trianglebadge {
            public struct exclamationmark {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dock {
        public struct arrow {
            public struct down {
                public struct rectangle {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct up {
                public struct rectangle {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct rectangle {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dpad {
        public struct down {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “dpad.down.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "dpad.down.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “dpad.down.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "dpad.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “dpad.down.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "dpad.down.fill", configuration: configuration)
                }
                
                ///Creates the “dpad.down.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "dpad.down.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “dpad.down.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "dpad.down.fill")
                }
                
                ///Creates the “dpad.down.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "dpad.down.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dpad.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dpad.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dpad.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dpad.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dpad.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dpad.fill", configuration: configuration)
            }
            
            ///Creates the “dpad.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dpad.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dpad.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dpad.fill")
            }
            
            ///Creates the “dpad.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dpad.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “dpad.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "dpad.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “dpad.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "dpad.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “dpad.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "dpad.left.fill", configuration: configuration)
                }
                
                ///Creates the “dpad.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "dpad.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “dpad.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "dpad.left.fill")
                }
                
                ///Creates the “dpad.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "dpad.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct right {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “dpad.right.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "dpad.right.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “dpad.right.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "dpad.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “dpad.right.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "dpad.right.fill", configuration: configuration)
                }
                
                ///Creates the “dpad.right.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "dpad.right.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “dpad.right.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "dpad.right.fill")
                }
                
                ///Creates the “dpad.right.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "dpad.right.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct up {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “dpad.up.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "dpad.up.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “dpad.up.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "dpad.up.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “dpad.up.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "dpad.up.fill", configuration: configuration)
                }
                
                ///Creates the “dpad.up.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "dpad.up.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “dpad.up.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "dpad.up.fill")
                }
                
                ///Creates the “dpad.up.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "dpad.up.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct earpods {
        private init() {}
    }
    
    public struct esim {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “esim.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "esim.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “esim.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "esim.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “esim.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "esim.fill", configuration: configuration)
            }
            
            ///Creates the “esim.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "esim.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “esim.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "esim.fill")
            }
            
            ///Creates the “esim.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "esim.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct externaldrive {
        public struct badge {
            public struct checkmark {
                private init() {}
            }
            
            public struct icloud {
                private init() {}
            }
            
            public struct minus {
                private init() {}
            }
            
            public struct person {
                public struct crop {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct plus {
                private init() {}
            }
            
            public struct timemachine {
                private init() {}
            }
            
            public struct wifi {
                private init() {}
            }
            
            public struct xmark {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct connected {
            public struct to {
                public struct line {
                    public struct below {
                        public struct fill {
                            private init() {}
                            #if os(macOS)
                            
                            ///Creates the “externaldrive.connected.to.line.below.fill” system symbol image with the accessibility description you specify.
                            ///
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "externaldrive.connected.to.line.below.fill", accessibilityDescription: accessibilityDescription)
                            }
                            
                            ///Creates the “externaldrive.connected.to.line.below.fill” system symbol image with the variable value you specify.
                            ///
                            ///The value parameter is valid for symbols that support variable rendering.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(macOS 13.0, *)
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "externaldrive.connected.to.line.below.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                            }
                            
                            #endif
                            
                            #if os(iOS) || os(tvOS) || os(watchOS)
                            
                            ///Creates the “externaldrive.connected.to.line.below.fill” system symbol image object with the specified configuration.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(macOS, unavailable)
                            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "externaldrive.connected.to.line.below.fill", configuration: configuration)
                            }
                            
                            ///Creates the “externaldrive.connected.to.line.below.fill” system symbol image object with the configuration and variable value you specify.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            @available(macOS, unavailable)
                            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "externaldrive.connected.to.line.below.fill", variableValue: variableValue, configuration: configuration)
                            }
                            
                            #endif
                            
                            #if canImport(SwiftUI)
                            ///Creates the “externaldrive.connected.to.line.below.fill” system symbol image.
                            ///
                            ///This initializer creates an image using a system-provided symbol.
                            public static func swiftUIImage() -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "externaldrive.connected.to.line.below.fill")
                            }
                            
                            ///Creates the “externaldrive.connected.to.line.below.fill” system symbol image with a variable value.
                            ///
                            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                            ///
                            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "externaldrive.connected.to.line.below.fill", variableValue: variableValue)
                            }
                            
                            #endif
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct badge {
                public struct checkmark {
                    private init() {}
                }
                
                public struct icloud {
                    private init() {}
                }
                
                public struct minus {
                    private init() {}
                }
                
                public struct person {
                    public struct crop {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                public struct plus {
                    private init() {}
                }
                
                public struct timemachine {
                    private init() {}
                }
                
                public struct wifi {
                    private init() {}
                }
                
                public struct xmark {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “externaldrive.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "externaldrive.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “externaldrive.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "externaldrive.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “externaldrive.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "externaldrive.fill", configuration: configuration)
            }
            
            ///Creates the “externaldrive.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "externaldrive.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “externaldrive.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "externaldrive.fill")
            }
            
            ///Creates the “externaldrive.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "externaldrive.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct eyebrow {
        private init() {}
    }
    
    public struct eyes {
        public struct inverse {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct face {
        public struct dashed {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “face.dashed.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "face.dashed.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “face.dashed.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "face.dashed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “face.dashed.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "face.dashed.fill", configuration: configuration)
                }
                
                ///Creates the “face.dashed.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "face.dashed.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “face.dashed.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "face.dashed.fill")
                }
                
                ///Creates the “face.dashed.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "face.dashed.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct smiling {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “face.smiling.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "face.smiling.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “face.smiling.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "face.smiling.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “face.smiling.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "face.smiling.fill", configuration: configuration)
                }
                
                ///Creates the “face.smiling.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "face.smiling.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “face.smiling.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "face.smiling.fill")
                }
                
                ///Creates the “face.smiling.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "face.smiling.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct faxmachine {
        private init() {}
    }
    
    public struct fiberchannel {
        private init() {}
    }
    
    public struct figure {
        public struct stand {
            public struct line {
                public struct dotted {
                    public struct figure {
                        public struct stand {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct walk {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “figure.walk.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "figure.walk.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “figure.walk.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "figure.walk.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “figure.walk.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "figure.walk.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “figure.walk.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "figure.walk.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “figure.walk.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "figure.walk.circle.fill")
                    }
                    
                    ///Creates the “figure.walk.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "figure.walk.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct diamond {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “figure.walk.diamond.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "figure.walk.diamond.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “figure.walk.diamond.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "figure.walk.diamond.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “figure.walk.diamond.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "figure.walk.diamond.fill", configuration: configuration)
                    }
                    
                    ///Creates the “figure.walk.diamond.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "figure.walk.diamond.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “figure.walk.diamond.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "figure.walk.diamond.fill")
                    }
                    
                    ///Creates the “figure.walk.diamond.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "figure.walk.diamond.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct wave {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “figure.wave.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "figure.wave.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “figure.wave.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "figure.wave.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “figure.wave.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "figure.wave.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “figure.wave.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "figure.wave.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “figure.wave.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "figure.wave.circle.fill")
                    }
                    
                    ///Creates the “figure.wave.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "figure.wave.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct filemenu {
        public struct and {
            public struct cursorarrow {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct selection {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct flipphone {
        private init() {}
    }
    
    public struct fn {
        private init() {}
    }
    
    public struct gearshape {
        public struct x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “gearshape.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "gearshape.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “gearshape.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "gearshape.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “gearshape.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "gearshape.2.fill", configuration: configuration)
                }
                
                ///Creates the “gearshape.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "gearshape.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “gearshape.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "gearshape.2.fill")
                }
                
                ///Creates the “gearshape.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "gearshape.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “gearshape.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "gearshape.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “gearshape.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "gearshape.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “gearshape.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "gearshape.2.fill", configuration: configuration)
                }
                
                ///Creates the “gearshape.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "gearshape.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “gearshape.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "gearshape.2.fill")
                }
                
                ///Creates the “gearshape.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "gearshape.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “gearshape.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "gearshape.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “gearshape.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "gearshape.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “gearshape.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "gearshape.fill", configuration: configuration)
            }
            
            ///Creates the “gearshape.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "gearshape.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “gearshape.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "gearshape.fill")
            }
            
            ///Creates the “gearshape.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "gearshape.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct giftcard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “giftcard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "giftcard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “giftcard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "giftcard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “giftcard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "giftcard.fill", configuration: configuration)
            }
            
            ///Creates the “giftcard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "giftcard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “giftcard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "giftcard.fill")
            }
            
            ///Creates the “giftcard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "giftcard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct graduationcap {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “graduationcap.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "graduationcap.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “graduationcap.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "graduationcap.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “graduationcap.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "graduationcap.fill", configuration: configuration)
            }
            
            ///Creates the “graduationcap.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "graduationcap.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “graduationcap.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "graduationcap.fill")
            }
            
            ///Creates the “graduationcap.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "graduationcap.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct greetingcard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “greetingcard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "greetingcard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “greetingcard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "greetingcard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “greetingcard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "greetingcard.fill", configuration: configuration)
            }
            
            ///Creates the “greetingcard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "greetingcard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “greetingcard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "greetingcard.fill")
            }
            
            ///Creates the “greetingcard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "greetingcard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct gyroscope {
        private init() {}
    }
    
    public struct hands {
        public struct clap {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “hands.clap.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hands.clap.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “hands.clap.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hands.clap.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “hands.clap.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hands.clap.fill", configuration: configuration)
                }
                
                ///Creates the “hands.clap.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hands.clap.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “hands.clap.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hands.clap.fill")
                }
                
                ///Creates the “hands.clap.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hands.clap.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct sparkles {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “hands.sparkles.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hands.sparkles.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “hands.sparkles.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hands.sparkles.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “hands.sparkles.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hands.sparkles.fill", configuration: configuration)
                }
                
                ///Creates the “hands.sparkles.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hands.sparkles.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “hands.sparkles.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hands.sparkles.fill")
                }
                
                ///Creates the “hands.sparkles.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hands.sparkles.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct hearingaid {
        public struct ear {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct highlighter {
        private init() {}
    }
    
    public struct homekit {
        private init() {}
    }
    
    public struct homepod {
        public struct x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepod.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepod.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepod.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepod.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepod.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepod.2.fill", configuration: configuration)
                }
                
                ///Creates the “homepod.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepod.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepod.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepod.2.fill")
                }
                
                ///Creates the “homepod.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepod.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepod.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepod.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepod.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepod.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepod.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepod.2.fill", configuration: configuration)
                }
                
                ///Creates the “homepod.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepod.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepod.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepod.2.fill")
                }
                
                ///Creates the “homepod.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepod.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “homepod.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "homepod.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “homepod.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "homepod.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “homepod.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "homepod.fill", configuration: configuration)
            }
            
            ///Creates the “homepod.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "homepod.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “homepod.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "homepod.fill")
            }
            
            ///Creates the “homepod.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "homepod.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct infinity {
        private init() {}
    }
    
    public struct internaldrive {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “internaldrive.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "internaldrive.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “internaldrive.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "internaldrive.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “internaldrive.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "internaldrive.fill", configuration: configuration)
            }
            
            ///Creates the “internaldrive.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "internaldrive.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “internaldrive.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "internaldrive.fill")
            }
            
            ///Creates the “internaldrive.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "internaldrive.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct ipad {
        public struct homebutton {
            public struct landscape {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct landscape {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct iphone {
        public struct homebutton {
            public struct radiowaves {
                public struct left {
                    public struct and {
                        public struct right {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct slash {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct radiowaves {
            public struct left {
                public struct and {
                    public struct right {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct slash {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct ipod {
        private init() {}
    }
    
    public struct ipodshuffle {
        public struct gen1 {
            private init() {}
        }
        
        public struct gen2 {
            private init() {}
        }
        
        public struct gen3 {
            private init() {}
        }
        
        public struct gen4 {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct ipodtouch {
        private init() {}
    }
    
    public struct key {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “key.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "key.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “key.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "key.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “key.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "key.fill", configuration: configuration)
            }
            
            ///Creates the “key.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "key.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “key.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "key.fill")
            }
            
            ///Creates the “key.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "key.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct icloud {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “key.icloud.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "key.icloud.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “key.icloud.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "key.icloud.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “key.icloud.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "key.icloud.fill", configuration: configuration)
                }
                
                ///Creates the “key.icloud.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "key.icloud.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “key.icloud.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "key.icloud.fill")
                }
                
                ///Creates the “key.icloud.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "key.icloud.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct l1 {
        public struct rectangle {
            public struct roundedbottom {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “l1.rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "l1.rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “l1.rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "l1.rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “l1.rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "l1.rectangle.roundedbottom.fill", configuration: configuration)
                    }
                    
                    ///Creates the “l1.rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "l1.rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “l1.rectangle.roundedbottom.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "l1.rectangle.roundedbottom.fill")
                    }
                    
                    ///Creates the “l1.rectangle.roundedbottom.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "l1.rectangle.roundedbottom.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct l2 {
        public struct rectangle {
            public struct roundedtop {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “l2.rectangle.roundedtop.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "l2.rectangle.roundedtop.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “l2.rectangle.roundedtop.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "l2.rectangle.roundedtop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “l2.rectangle.roundedtop.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "l2.rectangle.roundedtop.fill", configuration: configuration)
                    }
                    
                    ///Creates the “l2.rectangle.roundedtop.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "l2.rectangle.roundedtop.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “l2.rectangle.roundedtop.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "l2.rectangle.roundedtop.fill")
                    }
                    
                    ///Creates the “l2.rectangle.roundedtop.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "l2.rectangle.roundedtop.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct ladybug {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “ladybug.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ladybug.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “ladybug.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ladybug.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “ladybug.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ladybug.fill", configuration: configuration)
            }
            
            ///Creates the “ladybug.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ladybug.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “ladybug.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ladybug.fill")
            }
            
            ///Creates the “ladybug.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ladybug.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct laptopcomputer {
        public struct and {
            public struct iphone {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct latch {
        public struct x2 {
            public struct `case` {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “latch.2.case.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "latch.2.case.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “latch.2.case.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "latch.2.case.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “latch.2.case.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "latch.2.case.fill", configuration: configuration)
                    }
                    
                    ///Creates the “latch.2.case.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "latch.2.case.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “latch.2.case.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "latch.2.case.fill")
                    }
                    
                    ///Creates the “latch.2.case.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "latch.2.case.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct `case` {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “latch.2.case.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "latch.2.case.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “latch.2.case.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "latch.2.case.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “latch.2.case.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "latch.2.case.fill", configuration: configuration)
                    }
                    
                    ///Creates the “latch.2.case.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "latch.2.case.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “latch.2.case.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "latch.2.case.fill")
                    }
                    
                    ///Creates the “latch.2.case.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "latch.2.case.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lb {
        public struct rectangle {
            public struct roundedbottom {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “lb.rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lb.rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “lb.rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lb.rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “lb.rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lb.rectangle.roundedbottom.fill", configuration: configuration)
                    }
                    
                    ///Creates the “lb.rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lb.rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “lb.rectangle.roundedbottom.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lb.rectangle.roundedbottom.fill")
                    }
                    
                    ///Creates the “lb.rectangle.roundedbottom.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lb.rectangle.roundedbottom.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct level {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “level.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "level.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “level.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "level.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “level.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "level.fill", configuration: configuration)
            }
            
            ///Creates the “level.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "level.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “level.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "level.fill")
            }
            
            ///Creates the “level.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "level.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct lifepreserver {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lifepreserver.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lifepreserver.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lifepreserver.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lifepreserver.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lifepreserver.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lifepreserver.fill", configuration: configuration)
            }
            
            ///Creates the “lifepreserver.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lifepreserver.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lifepreserver.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lifepreserver.fill")
            }
            
            ///Creates the “lifepreserver.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lifepreserver.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct lineweight {
        private init() {}
    }
    
    public struct loupe {
        private init() {}
    }
    
    public struct lt {
        public struct rectangle {
            public struct roundedtop {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “lt.rectangle.roundedtop.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lt.rectangle.roundedtop.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “lt.rectangle.roundedtop.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lt.rectangle.roundedtop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “lt.rectangle.roundedtop.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lt.rectangle.roundedtop.fill", configuration: configuration)
                    }
                    
                    ///Creates the “lt.rectangle.roundedtop.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lt.rectangle.roundedtop.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “lt.rectangle.roundedtop.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lt.rectangle.roundedtop.fill")
                    }
                    
                    ///Creates the “lt.rectangle.roundedtop.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lt.rectangle.roundedtop.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lungs {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lungs.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lungs.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lungs.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lungs.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lungs.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lungs.fill", configuration: configuration)
            }
            
            ///Creates the “lungs.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lungs.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lungs.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lungs.fill")
            }
            
            ///Creates the “lungs.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lungs.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct macmini {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “macmini.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "macmini.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “macmini.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "macmini.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “macmini.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "macmini.fill", configuration: configuration)
            }
            
            ///Creates the “macmini.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "macmini.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “macmini.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "macmini.fill")
            }
            
            ///Creates the “macmini.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "macmini.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct macpro {
        public struct gen1 {
            private init() {}
        }
        
        public struct gen2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “macpro.gen2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "macpro.gen2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “macpro.gen2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "macpro.gen2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “macpro.gen2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "macpro.gen2.fill", configuration: configuration)
                }
                
                ///Creates the “macpro.gen2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "macpro.gen2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “macpro.gen2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "macpro.gen2.fill")
                }
                
                ///Creates the “macpro.gen2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "macpro.gen2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct gen3 {
            public struct server {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct mail {
        public struct and {
            public struct text {
                public struct magnifyingglass {
                    public struct rtl {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “mail.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mail.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “mail.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mail.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “mail.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mail.fill", configuration: configuration)
            }
            
            ///Creates the “mail.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mail.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “mail.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mail.fill")
            }
            
            ///Creates the “mail.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mail.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct stack {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “mail.stack.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "mail.stack.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “mail.stack.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "mail.stack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “mail.stack.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "mail.stack.fill", configuration: configuration)
                }
                
                ///Creates the “mail.stack.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "mail.stack.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “mail.stack.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "mail.stack.fill")
                }
                
                ///Creates the “mail.stack.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "mail.stack.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct megaphone {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “megaphone.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "megaphone.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “megaphone.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "megaphone.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “megaphone.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "megaphone.fill", configuration: configuration)
            }
            
            ///Creates the “megaphone.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "megaphone.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “megaphone.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "megaphone.fill")
            }
            
            ///Creates the “megaphone.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "megaphone.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct memorychip {
        private init() {}
    }
    
    public struct menubar {
        public struct arrow {
            public struct down {
                public struct rectangle {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct up {
                public struct rectangle {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct dock {
            public struct rectangle {
                public struct badge {
                    public struct record {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct rectangle {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct mosaic {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “mosaic.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mosaic.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “mosaic.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mosaic.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “mosaic.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mosaic.fill", configuration: configuration)
            }
            
            ///Creates the “mosaic.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mosaic.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “mosaic.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mosaic.fill")
            }
            
            ///Creates the “mosaic.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mosaic.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct mount {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “mount.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mount.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “mount.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mount.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “mount.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mount.fill", configuration: configuration)
            }
            
            ///Creates the “mount.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mount.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “mount.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mount.fill")
            }
            
            ///Creates the “mount.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mount.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct mouth {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “mouth.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mouth.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “mouth.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mouth.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “mouth.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mouth.fill", configuration: configuration)
            }
            
            ///Creates the “mouth.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mouth.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “mouth.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mouth.fill")
            }
            
            ///Creates the “mouth.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mouth.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct move {
        public struct x3d {
            private init() {}
        }
        
        public struct _3d {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct mustache {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “mustache.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mustache.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “mustache.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "mustache.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “mustache.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mustache.fill", configuration: configuration)
            }
            
            ///Creates the “mustache.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "mustache.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “mustache.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mustache.fill")
            }
            
            ///Creates the “mustache.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "mustache.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct network {
        private init() {}
    }
    
    public struct newspaper {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “newspaper.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "newspaper.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “newspaper.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "newspaper.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “newspaper.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "newspaper.fill", configuration: configuration)
            }
            
            ///Creates the “newspaper.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "newspaper.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “newspaper.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "newspaper.fill")
            }
            
            ///Creates the “newspaper.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "newspaper.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct nose {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “nose.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "nose.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “nose.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "nose.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “nose.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "nose.fill", configuration: configuration)
            }
            
            ///Creates the “nose.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "nose.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “nose.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "nose.fill")
            }
            
            ///Creates the “nose.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "nose.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct note {
        public struct text {
            public struct badge {
                public struct plus {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct octagon {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “octagon.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "octagon.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “octagon.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "octagon.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “octagon.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "octagon.fill", configuration: configuration)
            }
            
            ///Creates the “octagon.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "octagon.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “octagon.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "octagon.fill")
            }
            
            ///Creates the “octagon.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "octagon.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct opticaldisc {
        private init() {}
    }
    
    public struct opticaldiscdrive {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “opticaldiscdrive.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "opticaldiscdrive.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “opticaldiscdrive.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "opticaldiscdrive.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “opticaldiscdrive.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "opticaldiscdrive.fill", configuration: configuration)
            }
            
            ///Creates the “opticaldiscdrive.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "opticaldiscdrive.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “opticaldiscdrive.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "opticaldiscdrive.fill")
            }
            
            ///Creates the “opticaldiscdrive.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "opticaldiscdrive.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct oval {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “oval.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "oval.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “oval.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "oval.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “oval.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "oval.fill", configuration: configuration)
            }
            
            ///Creates the “oval.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "oval.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “oval.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "oval.fill")
            }
            
            ///Creates the “oval.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "oval.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct portrait {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “oval.portrait.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "oval.portrait.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “oval.portrait.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "oval.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “oval.portrait.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "oval.portrait.fill", configuration: configuration)
                }
                
                ///Creates the “oval.portrait.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "oval.portrait.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “oval.portrait.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "oval.portrait.fill")
                }
                
                ///Creates the “oval.portrait.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "oval.portrait.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct paintpalette {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “paintpalette.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "paintpalette.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “paintpalette.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "paintpalette.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “paintpalette.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "paintpalette.fill", configuration: configuration)
            }
            
            ///Creates the “paintpalette.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "paintpalette.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “paintpalette.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "paintpalette.fill")
            }
            
            ///Creates the “paintpalette.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "paintpalette.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct paragraphsign {
        private init() {}
    }
    
    public struct pc {
        private init() {}
    }
    
    public struct pianokeys {
        public struct inverse {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct pills {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pills.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pills.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pills.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pills.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pills.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pills.fill", configuration: configuration)
            }
            
            ///Creates the “pills.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pills.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pills.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pills.fill")
            }
            
            ///Creates the “pills.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pills.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct pip {
        public struct enter {
            private init() {}
        }
        
        public struct exit {
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pip.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pip.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pip.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pip.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pip.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pip.fill", configuration: configuration)
            }
            
            ///Creates the “pip.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pip.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pip.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pip.fill")
            }
            
            ///Creates the “pip.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pip.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct remove {
            private init() {}
        }
        
        public struct swap {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct placeholdertext {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “placeholdertext.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "placeholdertext.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “placeholdertext.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "placeholdertext.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “placeholdertext.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "placeholdertext.fill", configuration: configuration)
            }
            
            ///Creates the “placeholdertext.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "placeholdertext.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “placeholdertext.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "placeholdertext.fill")
            }
            
            ///Creates the “placeholdertext.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "placeholdertext.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct point {
        public struct fill {
            public struct topleft {
                public struct down {
                    public struct curvedto {
                        public struct point {
                            public struct fill {
                                public struct bottomright {
                                    public struct up {
                                        private init() {}
                                    }
                                    
                                    private init() {}
                                }
                                
                                private init() {}
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct topleft {
            public struct down {
                public struct curvedto {
                    public struct point {
                        public struct bottomright {
                            public struct up {
                                private init() {}
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct poweroff {
        private init() {}
    }
    
    public struct poweron {
        private init() {}
    }
    
    public struct powersleep {
        private init() {}
    }
    
    public struct puzzlepiece {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “puzzlepiece.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "puzzlepiece.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “puzzlepiece.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "puzzlepiece.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “puzzlepiece.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "puzzlepiece.fill", configuration: configuration)
            }
            
            ///Creates the “puzzlepiece.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "puzzlepiece.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “puzzlepiece.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "puzzlepiece.fill")
            }
            
            ///Creates the “puzzlepiece.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "puzzlepiece.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct pyramid {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pyramid.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pyramid.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pyramid.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pyramid.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pyramid.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pyramid.fill", configuration: configuration)
            }
            
            ///Creates the “pyramid.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pyramid.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pyramid.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pyramid.fill")
            }
            
            ///Creates the “pyramid.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pyramid.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct r1 {
        public struct rectangle {
            public struct roundedbottom {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “r1.rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "r1.rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “r1.rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "r1.rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “r1.rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "r1.rectangle.roundedbottom.fill", configuration: configuration)
                    }
                    
                    ///Creates the “r1.rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "r1.rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “r1.rectangle.roundedbottom.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "r1.rectangle.roundedbottom.fill")
                    }
                    
                    ///Creates the “r1.rectangle.roundedbottom.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "r1.rectangle.roundedbottom.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct r2 {
        public struct rectangle {
            public struct roundedtop {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “r2.rectangle.roundedtop.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "r2.rectangle.roundedtop.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “r2.rectangle.roundedtop.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "r2.rectangle.roundedtop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “r2.rectangle.roundedtop.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "r2.rectangle.roundedtop.fill", configuration: configuration)
                    }
                    
                    ///Creates the “r2.rectangle.roundedtop.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "r2.rectangle.roundedtop.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “r2.rectangle.roundedtop.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "r2.rectangle.roundedtop.fill")
                    }
                    
                    ///Creates the “r2.rectangle.roundedtop.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "r2.rectangle.roundedtop.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct radio {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “radio.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "radio.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “radio.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "radio.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “radio.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "radio.fill", configuration: configuration)
            }
            
            ///Creates the “radio.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "radio.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “radio.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "radio.fill")
            }
            
            ///Creates the “radio.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "radio.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct rb {
        public struct rectangle {
            public struct roundedbottom {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “rb.rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "rb.rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “rb.rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "rb.rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “rb.rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "rb.rectangle.roundedbottom.fill", configuration: configuration)
                    }
                    
                    ///Creates the “rb.rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "rb.rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “rb.rectangle.roundedbottom.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "rb.rectangle.roundedbottom.fill")
                    }
                    
                    ///Creates the “rb.rectangle.roundedbottom.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "rb.rectangle.roundedbottom.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct record {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “record.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "record.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “record.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "record.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “record.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "record.circle.fill", configuration: configuration)
                }
                
                ///Creates the “record.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "record.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “record.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "record.circle.fill")
                }
                
                ///Creates the “record.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "record.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct restart {
        public struct circle {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct rt {
        public struct rectangle {
            public struct roundedtop {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “rt.rectangle.roundedtop.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "rt.rectangle.roundedtop.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “rt.rectangle.roundedtop.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "rt.rectangle.roundedtop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “rt.rectangle.roundedtop.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "rt.rectangle.roundedtop.fill", configuration: configuration)
                    }
                    
                    ///Creates the “rt.rectangle.roundedtop.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "rt.rectangle.roundedtop.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “rt.rectangle.roundedtop.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "rt.rectangle.roundedtop.fill")
                    }
                    
                    ///Creates the “rt.rectangle.roundedtop.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "rt.rectangle.roundedtop.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct ruler {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “ruler.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ruler.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “ruler.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ruler.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “ruler.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ruler.fill", configuration: configuration)
            }
            
            ///Creates the “ruler.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ruler.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “ruler.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ruler.fill")
            }
            
            ///Creates the “ruler.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ruler.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct scale {
        public struct x3d {
            private init() {}
        }
        
        public struct _3d {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct scalemass {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “scalemass.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "scalemass.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “scalemass.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "scalemass.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “scalemass.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "scalemass.fill", configuration: configuration)
            }
            
            ///Creates the “scalemass.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "scalemass.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “scalemass.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "scalemass.fill")
            }
            
            ///Creates the “scalemass.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "scalemass.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct scanner {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “scanner.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "scanner.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “scanner.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "scanner.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “scanner.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "scanner.fill", configuration: configuration)
            }
            
            ///Creates the “scanner.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "scanner.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “scanner.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "scanner.fill")
            }
            
            ///Creates the “scanner.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "scanner.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct scroll {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “scroll.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "scroll.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “scroll.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "scroll.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “scroll.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "scroll.fill", configuration: configuration)
            }
            
            ///Creates the “scroll.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "scroll.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “scroll.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "scroll.fill")
            }
            
            ///Creates the “scroll.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "scroll.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct sdcard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sdcard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sdcard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sdcard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sdcard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sdcard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sdcard.fill", configuration: configuration)
            }
            
            ///Creates the “sdcard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sdcard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sdcard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sdcard.fill")
            }
            
            ///Creates the “sdcard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sdcard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct seal {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “seal.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "seal.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “seal.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "seal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “seal.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "seal.fill", configuration: configuration)
            }
            
            ///Creates the “seal.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "seal.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “seal.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "seal.fill")
            }
            
            ///Creates the “seal.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "seal.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct server {
        public struct rack {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct shadow {
        private init() {}
    }
    
    public struct shekelsign {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “shekelsign.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shekelsign.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “shekelsign.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shekelsign.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “shekelsign.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shekelsign.circle.fill", configuration: configuration)
                }
                
                ///Creates the “shekelsign.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shekelsign.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “shekelsign.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shekelsign.circle.fill")
                }
                
                ///Creates the “shekelsign.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shekelsign.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “shekelsign.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shekelsign.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “shekelsign.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shekelsign.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “shekelsign.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shekelsign.square.fill", configuration: configuration)
                }
                
                ///Creates the “shekelsign.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shekelsign.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “shekelsign.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shekelsign.square.fill")
                }
                
                ///Creates the “shekelsign.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shekelsign.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct shippingbox {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “shippingbox.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shippingbox.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “shippingbox.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shippingbox.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “shippingbox.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shippingbox.fill", configuration: configuration)
            }
            
            ///Creates the “shippingbox.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shippingbox.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “shippingbox.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shippingbox.fill")
            }
            
            ///Creates the “shippingbox.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shippingbox.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct signpost {
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “signpost.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "signpost.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “signpost.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "signpost.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “signpost.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "signpost.left.fill", configuration: configuration)
                }
                
                ///Creates the “signpost.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "signpost.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “signpost.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "signpost.left.fill")
                }
                
                ///Creates the “signpost.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "signpost.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct right {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “signpost.right.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "signpost.right.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “signpost.right.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "signpost.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “signpost.right.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "signpost.right.fill", configuration: configuration)
                }
                
                ///Creates the “signpost.right.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "signpost.right.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “signpost.right.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "signpost.right.fill")
                }
                
                ///Creates the “signpost.right.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "signpost.right.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct simcard {
        public struct x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “simcard.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "simcard.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “simcard.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "simcard.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “simcard.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "simcard.2.fill", configuration: configuration)
                }
                
                ///Creates the “simcard.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "simcard.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “simcard.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "simcard.2.fill")
                }
                
                ///Creates the “simcard.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "simcard.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “simcard.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "simcard.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “simcard.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "simcard.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “simcard.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "simcard.2.fill", configuration: configuration)
                }
                
                ///Creates the “simcard.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "simcard.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “simcard.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "simcard.2.fill")
                }
                
                ///Creates the “simcard.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "simcard.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “simcard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "simcard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “simcard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "simcard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “simcard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "simcard.fill", configuration: configuration)
            }
            
            ///Creates the “simcard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "simcard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “simcard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "simcard.fill")
            }
            
            ///Creates the “simcard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "simcard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct sleep {
        private init() {}
    }
    
    public struct sparkle {
        private init() {}
    }
    
    public struct squareshape {
        public struct controlhandles {
            public struct on {
                public struct squareshape {
                    public struct controlhandles {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct dashed {
            public struct squareshape {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “squareshape.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "squareshape.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “squareshape.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "squareshape.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “squareshape.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "squareshape.fill", configuration: configuration)
            }
            
            ///Creates the “squareshape.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "squareshape.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “squareshape.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "squareshape.fill")
            }
            
            ///Creates the “squareshape.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "squareshape.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct split {
            public struct x2x2 {
                public struct dotted {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _2x2 {
                public struct dotted {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct x3x3 {
                private init() {}
            }
            
            public struct _3x3 {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct squareshape {
            public struct dashed {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct stethoscope {
        private init() {}
    }
    
    public struct swift {
        private init() {}
    }
    
    public struct `switch` {
        public struct x2 {
            private init() {}
        }
        
        public struct _2 {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tablecells {
        public struct badge {
            public struct ellipsis {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “tablecells.badge.ellipsis.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "tablecells.badge.ellipsis.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “tablecells.badge.ellipsis.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "tablecells.badge.ellipsis.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “tablecells.badge.ellipsis.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "tablecells.badge.ellipsis.fill", configuration: configuration)
                    }
                    
                    ///Creates the “tablecells.badge.ellipsis.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "tablecells.badge.ellipsis.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “tablecells.badge.ellipsis.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "tablecells.badge.ellipsis.fill")
                    }
                    
                    ///Creates the “tablecells.badge.ellipsis.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "tablecells.badge.ellipsis.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tablecells.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tablecells.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tablecells.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tablecells.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tablecells.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tablecells.fill", configuration: configuration)
            }
            
            ///Creates the “tablecells.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tablecells.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tablecells.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tablecells.fill")
            }
            
            ///Creates the “tablecells.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tablecells.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct target {
        private init() {}
    }
    
    public struct terminal {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “terminal.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "terminal.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “terminal.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "terminal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “terminal.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "terminal.fill", configuration: configuration)
            }
            
            ///Creates the “terminal.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "terminal.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “terminal.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "terminal.fill")
            }
            
            ///Creates the “terminal.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "terminal.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct ticket {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “ticket.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ticket.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “ticket.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ticket.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “ticket.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ticket.fill", configuration: configuration)
            }
            
            ///Creates the “ticket.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ticket.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “ticket.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ticket.fill")
            }
            
            ///Creates the “ticket.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ticket.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct timeline {
        public struct selection {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct togglepower {
        private init() {}
    }
    
    public struct touchid {
        private init() {}
    }
    
    public struct wake {
        private init() {}
    }
    
    public struct wallet {
        public struct pass {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “wallet.pass.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "wallet.pass.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “wallet.pass.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "wallet.pass.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “wallet.pass.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "wallet.pass.fill", configuration: configuration)
                }
                
                ///Creates the “wallet.pass.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "wallet.pass.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “wallet.pass.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "wallet.pass.fill")
                }
                
                ///Creates the “wallet.pass.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "wallet.pass.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct wave {
        public struct x3 {
            public struct backward {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.backward.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “wave.3.backward.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.backward.circle.fill")
                        }
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.backward.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct forward {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.forward.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “wave.3.forward.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.forward.circle.fill")
                        }
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.forward.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct left {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.left.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.left.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.left.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.left.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “wave.3.left.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.left.circle.fill")
                        }
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.left.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct right {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.right.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.right.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.right.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “wave.3.right.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.right.circle.fill")
                        }
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.right.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct _3 {
            public struct backward {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.backward.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “wave.3.backward.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.backward.circle.fill")
                        }
                        
                        ///Creates the “wave.3.backward.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.backward.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct forward {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.forward.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “wave.3.forward.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.forward.circle.fill")
                        }
                        
                        ///Creates the “wave.3.forward.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.forward.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct left {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.left.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.left.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.left.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.left.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “wave.3.left.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.left.circle.fill")
                        }
                        
                        ///Creates the “wave.3.left.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.left.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct right {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.right.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "wave.3.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.right.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "wave.3.right.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “wave.3.right.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.right.circle.fill")
                        }
                        
                        ///Creates the “wave.3.right.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "wave.3.right.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct xserve {
        private init() {}
    }
    
    public struct zl {
        public struct rectangle {
            public struct roundedtop {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “zl.rectangle.roundedtop.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "zl.rectangle.roundedtop.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “zl.rectangle.roundedtop.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "zl.rectangle.roundedtop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “zl.rectangle.roundedtop.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "zl.rectangle.roundedtop.fill", configuration: configuration)
                    }
                    
                    ///Creates the “zl.rectangle.roundedtop.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "zl.rectangle.roundedtop.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “zl.rectangle.roundedtop.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "zl.rectangle.roundedtop.fill")
                    }
                    
                    ///Creates the “zl.rectangle.roundedtop.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "zl.rectangle.roundedtop.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct zr {
        public struct rectangle {
            public struct roundedtop {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “zr.rectangle.roundedtop.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "zr.rectangle.roundedtop.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “zr.rectangle.roundedtop.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "zr.rectangle.roundedtop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “zr.rectangle.roundedtop.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "zr.rectangle.roundedtop.fill", configuration: configuration)
                    }
                    
                    ///Creates the “zr.rectangle.roundedtop.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "zr.rectangle.roundedtop.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “zr.rectangle.roundedtop.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "zr.rectangle.roundedtop.fill")
                    }
                    
                    ///Creates the “zr.rectangle.roundedtop.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "zr.rectangle.roundedtop.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.x1.magnifyingglass {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF._1.magnifyingglass {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.a {
    public struct book {
        public struct closed {
            public struct ar {
                private init() {}
            }
            
            public struct fill {
                public struct ar {
                    private init() {}
                }
                
                public struct he {
                    private init() {}
                }
                
                public struct hi {
                    private init() {}
                }
                
                public struct ja {
                    private init() {}
                }
                
                public struct ko {
                    private init() {}
                }
                
                public struct th {
                    private init() {}
                }
                
                public struct zh {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “a.book.closed.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "a.book.closed.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “a.book.closed.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "a.book.closed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “a.book.closed.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "a.book.closed.fill", configuration: configuration)
                }
                
                ///Creates the “a.book.closed.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "a.book.closed.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “a.book.closed.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "a.book.closed.fill")
                }
                
                ///Creates the “a.book.closed.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "a.book.closed.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct he {
                private init() {}
            }
            
            public struct hi {
                private init() {}
            }
            
            public struct ja {
                private init() {}
            }
            
            public struct ko {
                private init() {}
            }
            
            public struct th {
                private init() {}
            }
            
            public struct zh {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct magnify {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.airplane {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airplane.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplane.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airplane.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplane.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airplane.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplane.circle.fill", configuration: configuration)
            }
            
            ///Creates the “airplane.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplane.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airplane.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplane.circle.fill")
            }
            
            ///Creates the “airplane.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplane.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.archivebox {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “archivebox.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "archivebox.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “archivebox.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "archivebox.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “archivebox.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "archivebox.circle.fill", configuration: configuration)
            }
            
            ///Creates the “archivebox.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "archivebox.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “archivebox.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "archivebox.circle.fill")
            }
            
            ///Creates the “archivebox.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "archivebox.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow {
    public struct backward {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.backward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.backward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.backward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.backward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.backward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.backward.circle.fill")
                }
                
                ///Creates the “arrow.backward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.backward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.backward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.backward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.backward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.backward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.backward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.backward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.backward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.backward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.backward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.backward.square.fill")
                }
                
                ///Creates the “arrow.backward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.backward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.forward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.forward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.forward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.forward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.forward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.forward.circle.fill")
                }
                
                ///Creates the “arrow.forward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.forward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.forward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.forward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.forward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.forward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.forward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.forward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.forward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.forward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.forward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.forward.square.fill")
                }
                
                ///Creates the “arrow.forward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.forward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct rectanglepath {
        private init() {}
    }
    
    public struct triangle {
        public struct x2 {
            public struct circlepath {
                public struct camera {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.camera.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.camera.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.camera.fill", configuration: configuration)
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.camera.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.triangle.2.circlepath.camera.fill")
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.triangle.2.circlepath.camera.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.triangle.2.circlepath.circle.fill")
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.triangle.2.circlepath.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct doc {
                    public struct on {
                        public struct clipboard {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct circlepath {
                public struct camera {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.camera.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.camera.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.camera.fill", configuration: configuration)
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.camera.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.triangle.2.circlepath.camera.fill")
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.camera.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.triangle.2.circlepath.camera.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.triangle.2.circlepath.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.triangle.2.circlepath.circle.fill")
                        }
                        
                        ///Creates the “arrow.triangle.2.circlepath.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.triangle.2.circlepath.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct doc {
                    public struct on {
                        public struct clipboard {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct branch {
            private init() {}
        }
        
        public struct capsulepath {
            private init() {}
        }
        
        public struct merge {
            private init() {}
        }
        
        public struct pull {
            private init() {}
        }
        
        public struct swap {
            private init() {}
        }
        
        public struct turn {
            public struct up {
                public struct right {
                    public struct circle {
                        public struct fill {
                            private init() {}
                            #if os(macOS)
                            
                            ///Creates the “arrow.triangle.turn.up.right.circle.fill” system symbol image with the accessibility description you specify.
                            ///
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "arrow.triangle.turn.up.right.circle.fill", accessibilityDescription: accessibilityDescription)
                            }
                            
                            ///Creates the “arrow.triangle.turn.up.right.circle.fill” system symbol image with the variable value you specify.
                            ///
                            ///The value parameter is valid for symbols that support variable rendering.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(macOS 13.0, *)
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "arrow.triangle.turn.up.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                            }
                            
                            #endif
                            
                            #if os(iOS) || os(tvOS) || os(watchOS)
                            
                            ///Creates the “arrow.triangle.turn.up.right.circle.fill” system symbol image object with the specified configuration.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(macOS, unavailable)
                            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "arrow.triangle.turn.up.right.circle.fill", configuration: configuration)
                            }
                            
                            ///Creates the “arrow.triangle.turn.up.right.circle.fill” system symbol image object with the configuration and variable value you specify.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            @available(macOS, unavailable)
                            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "arrow.triangle.turn.up.right.circle.fill", variableValue: variableValue, configuration: configuration)
                            }
                            
                            #endif
                            
                            #if canImport(SwiftUI)
                            ///Creates the “arrow.triangle.turn.up.right.circle.fill” system symbol image.
                            ///
                            ///This initializer creates an image using a system-provided symbol.
                            public static func swiftUIImage() -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "arrow.triangle.turn.up.right.circle.fill")
                            }
                            
                            ///Creates the “arrow.triangle.turn.up.right.circle.fill” system symbol image with a variable value.
                            ///
                            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                            ///
                            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "arrow.triangle.turn.up.right.circle.fill", variableValue: variableValue)
                            }
                            
                            #endif
                        }
                        
                        private init() {}
                    }
                    
                    public struct diamond {
                        public struct fill {
                            private init() {}
                            #if os(macOS)
                            
                            ///Creates the “arrow.triangle.turn.up.right.diamond.fill” system symbol image with the accessibility description you specify.
                            ///
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "arrow.triangle.turn.up.right.diamond.fill", accessibilityDescription: accessibilityDescription)
                            }
                            
                            ///Creates the “arrow.triangle.turn.up.right.diamond.fill” system symbol image with the variable value you specify.
                            ///
                            ///The value parameter is valid for symbols that support variable rendering.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(macOS 13.0, *)
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "arrow.triangle.turn.up.right.diamond.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                            }
                            
                            #endif
                            
                            #if os(iOS) || os(tvOS) || os(watchOS)
                            
                            ///Creates the “arrow.triangle.turn.up.right.diamond.fill” system symbol image object with the specified configuration.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(macOS, unavailable)
                            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "arrow.triangle.turn.up.right.diamond.fill", configuration: configuration)
                            }
                            
                            ///Creates the “arrow.triangle.turn.up.right.diamond.fill” system symbol image object with the configuration and variable value you specify.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            @available(macOS, unavailable)
                            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "arrow.triangle.turn.up.right.diamond.fill", variableValue: variableValue, configuration: configuration)
                            }
                            
                            #endif
                            
                            #if canImport(SwiftUI)
                            ///Creates the “arrow.triangle.turn.up.right.diamond.fill” system symbol image.
                            ///
                            ///This initializer creates an image using a system-provided symbol.
                            public static func swiftUIImage() -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "arrow.triangle.turn.up.right.diamond.fill")
                            }
                            
                            ///Creates the “arrow.triangle.turn.up.right.diamond.fill” system symbol image with a variable value.
                            ///
                            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                            ///
                            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "arrow.triangle.turn.up.right.diamond.fill", variableValue: variableValue)
                            }
                            
                            #endif
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.clockwise {
    public struct heart {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.clockwise.heart.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.clockwise.heart.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.clockwise.heart.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.clockwise.heart.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.clockwise.heart.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.clockwise.heart.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.clockwise.heart.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.clockwise.heart.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.clockwise.heart.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.clockwise.heart.fill")
            }
            
            ///Creates the “arrow.clockwise.heart.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.clockwise.heart.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.down {
    public struct app {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.down.app.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.app.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.down.app.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.app.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.down.app.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.app.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.down.app.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.app.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.down.app.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.app.fill")
            }
            
            ///Creates the “arrow.down.app.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.app.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct backward {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.down.backward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.down.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.down.backward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.down.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.down.backward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.down.backward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.down.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.down.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.down.backward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.down.backward.circle.fill")
                }
                
                ///Creates the “arrow.down.backward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.down.backward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.down.backward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.down.backward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.down.backward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.down.backward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.down.backward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.down.backward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.down.backward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.down.backward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.down.backward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.down.backward.square.fill")
                }
                
                ///Creates the “arrow.down.backward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.down.backward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct and {
            public struct arrow {
                public struct up {
                    public struct backward {
                        public struct circle {
                            public struct fill {
                                private init() {}
                                #if os(macOS)
                                
                                ///Creates the “arrow.down.forward.and.arrow.up.backward.circle.fill” system symbol image with the accessibility description you specify.
                                ///
                                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                                @available(iOS, unavailable)
                                @available(tvOS, unavailable)
                                @available(watchOS, unavailable)
                                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                    SFSymbolReference.image(name: "arrow.down.forward.and.arrow.up.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                                }
                                
                                ///Creates the “arrow.down.forward.and.arrow.up.backward.circle.fill” system symbol image with the variable value you specify.
                                ///
                                ///The value parameter is valid for symbols that support variable rendering.
                                ///
                                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                                @available(macOS 13.0, *)
                                @available(iOS, unavailable)
                                @available(tvOS, unavailable)
                                @available(watchOS, unavailable)
                                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                    SFSymbolReference.image(name: "arrow.down.forward.and.arrow.up.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                                }
                                
                                #endif
                                
                                #if os(iOS) || os(tvOS) || os(watchOS)
                                
                                ///Creates the “arrow.down.forward.and.arrow.up.backward.circle.fill” system symbol image object with the specified configuration.
                                ///
                                ///Use this method to retrieve system-defined symbol images.
                                ///
                                ///- Parameter configuration: The image configuration the system applies to the image.
                                ///
                                ///- Returns: The object containing the image variant that matches the specified configuration data.
                                @available(macOS, unavailable)
                                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                    SFSymbolReference.image(name: "arrow.down.forward.and.arrow.up.backward.circle.fill", configuration: configuration)
                                }
                                
                                ///Creates the “arrow.down.forward.and.arrow.up.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                                ///
                                ///Use this method to retrieve system-defined symbol images.
                                ///
                                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                                ///- Parameter configuration: The image configuration the system applies to the image.
                                ///
                                ///- Returns: The object containing the image variant that matches the specified configuration data.
                                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                                @available(macOS, unavailable)
                                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                    SFSymbolReference.image(name: "arrow.down.forward.and.arrow.up.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                                }
                                
                                #endif
                                
                                #if canImport(SwiftUI)
                                ///Creates the “arrow.down.forward.and.arrow.up.backward.circle.fill” system symbol image.
                                ///
                                ///This initializer creates an image using a system-provided symbol.
                                public static func swiftUIImage() -> SwiftUI.Image {
                                    SFSymbolReference.swiftUIImage(name: "arrow.down.forward.and.arrow.up.backward.circle.fill")
                                }
                                
                                ///Creates the “arrow.down.forward.and.arrow.up.backward.circle.fill” system symbol image with a variable value.
                                ///
                                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                                ///
                                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                    SFSymbolReference.swiftUIImage(name: "arrow.down.forward.and.arrow.up.backward.circle.fill", variableValue: variableValue)
                                }
                                
                                #endif
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.down.forward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.down.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.down.forward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.down.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.down.forward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.down.forward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.down.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.down.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.down.forward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.down.forward.circle.fill")
                }
                
                ///Creates the “arrow.down.forward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.down.forward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.down.forward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.down.forward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.down.forward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.down.forward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.down.forward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.down.forward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.down.forward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.down.forward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.down.forward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.down.forward.square.fill")
                }
                
                ///Creates the “arrow.down.forward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.down.forward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct heart {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.down.heart.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.heart.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.down.heart.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.heart.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.down.heart.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.heart.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.down.heart.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.heart.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.down.heart.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.heart.fill")
            }
            
            ///Creates the “arrow.down.heart.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.heart.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.down.right.and.arrow.up.left {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.down.right.and.arrow.up.left.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.right.and.arrow.up.left.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.down.right.and.arrow.up.left.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.right.and.arrow.up.left.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.down.right.and.arrow.up.left.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.right.and.arrow.up.left.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.down.right.and.arrow.up.left.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.right.and.arrow.up.left.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.down.right.and.arrow.up.left.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.right.and.arrow.up.left.circle.fill")
            }
            
            ///Creates the “arrow.down.right.and.arrow.up.left.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.right.and.arrow.up.left.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.left {
    public struct arrow {
        public struct right {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “arrow.left.arrow.right.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.left.arrow.right.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “arrow.left.arrow.right.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.left.arrow.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “arrow.left.arrow.right.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.left.arrow.right.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “arrow.left.arrow.right.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.left.arrow.right.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “arrow.left.arrow.right.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.left.arrow.right.circle.fill")
                    }
                    
                    ///Creates the “arrow.left.arrow.right.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.left.arrow.right.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct square {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “arrow.left.arrow.right.square.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.left.arrow.right.square.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “arrow.left.arrow.right.square.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.left.arrow.right.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “arrow.left.arrow.right.square.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.left.arrow.right.square.fill", configuration: configuration)
                    }
                    
                    ///Creates the “arrow.left.arrow.right.square.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.left.arrow.right.square.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “arrow.left.arrow.right.square.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.left.arrow.right.square.fill")
                    }
                    
                    ///Creates the “arrow.left.arrow.right.square.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.left.arrow.right.square.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.left.and.right {
    public struct righttriangle {
        public struct left {
            public struct righttriangle {
                public struct right {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “arrow.left.and.right.righttriangle.left.righttriangle.right.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.left.and.right.righttriangle.left.righttriangle.right.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “arrow.left.and.right.righttriangle.left.righttriangle.right.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "arrow.left.and.right.righttriangle.left.righttriangle.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “arrow.left.and.right.righttriangle.left.righttriangle.right.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.left.and.right.righttriangle.left.righttriangle.right.fill", configuration: configuration)
                        }
                        
                        ///Creates the “arrow.left.and.right.righttriangle.left.righttriangle.right.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "arrow.left.and.right.righttriangle.left.righttriangle.right.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “arrow.left.and.right.righttriangle.left.righttriangle.right.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.left.and.right.righttriangle.left.righttriangle.right.fill")
                        }
                        
                        ///Creates the “arrow.left.and.right.righttriangle.left.righttriangle.right.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "arrow.left.and.right.righttriangle.left.righttriangle.right.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.right {
    public struct doc {
        public struct on {
            public struct clipboard {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.turn.up {
    public struct forward {
        public struct iphone {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.turn.up.forward.iphone.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.turn.up.forward.iphone.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.turn.up.forward.iphone.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.turn.up.forward.iphone.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.turn.up.forward.iphone.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.turn.up.forward.iphone.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.turn.up.forward.iphone.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.turn.up.forward.iphone.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.turn.up.forward.iphone.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.turn.up.forward.iphone.fill")
                }
                
                ///Creates the “arrow.turn.up.forward.iphone.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.turn.up.forward.iphone.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.up {
    public struct backward {
        public struct and {
            public struct arrow {
                public struct down {
                    public struct forward {
                        public struct circle {
                            public struct fill {
                                private init() {}
                                #if os(macOS)
                                
                                ///Creates the “arrow.up.backward.and.arrow.down.forward.circle.fill” system symbol image with the accessibility description you specify.
                                ///
                                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                                @available(iOS, unavailable)
                                @available(tvOS, unavailable)
                                @available(watchOS, unavailable)
                                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                    SFSymbolReference.image(name: "arrow.up.backward.and.arrow.down.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                                }
                                
                                ///Creates the “arrow.up.backward.and.arrow.down.forward.circle.fill” system symbol image with the variable value you specify.
                                ///
                                ///The value parameter is valid for symbols that support variable rendering.
                                ///
                                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                                @available(macOS 13.0, *)
                                @available(iOS, unavailable)
                                @available(tvOS, unavailable)
                                @available(watchOS, unavailable)
                                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                    SFSymbolReference.image(name: "arrow.up.backward.and.arrow.down.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                                }
                                
                                #endif
                                
                                #if os(iOS) || os(tvOS) || os(watchOS)
                                
                                ///Creates the “arrow.up.backward.and.arrow.down.forward.circle.fill” system symbol image object with the specified configuration.
                                ///
                                ///Use this method to retrieve system-defined symbol images.
                                ///
                                ///- Parameter configuration: The image configuration the system applies to the image.
                                ///
                                ///- Returns: The object containing the image variant that matches the specified configuration data.
                                @available(macOS, unavailable)
                                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                    SFSymbolReference.image(name: "arrow.up.backward.and.arrow.down.forward.circle.fill", configuration: configuration)
                                }
                                
                                ///Creates the “arrow.up.backward.and.arrow.down.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                                ///
                                ///Use this method to retrieve system-defined symbol images.
                                ///
                                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                                ///- Parameter configuration: The image configuration the system applies to the image.
                                ///
                                ///- Returns: The object containing the image variant that matches the specified configuration data.
                                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                                @available(macOS, unavailable)
                                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                    SFSymbolReference.image(name: "arrow.up.backward.and.arrow.down.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                                }
                                
                                #endif
                                
                                #if canImport(SwiftUI)
                                ///Creates the “arrow.up.backward.and.arrow.down.forward.circle.fill” system symbol image.
                                ///
                                ///This initializer creates an image using a system-provided symbol.
                                public static func swiftUIImage() -> SwiftUI.Image {
                                    SFSymbolReference.swiftUIImage(name: "arrow.up.backward.and.arrow.down.forward.circle.fill")
                                }
                                
                                ///Creates the “arrow.up.backward.and.arrow.down.forward.circle.fill” system symbol image with a variable value.
                                ///
                                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                                ///
                                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                    SFSymbolReference.swiftUIImage(name: "arrow.up.backward.and.arrow.down.forward.circle.fill", variableValue: variableValue)
                                }
                                
                                #endif
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.up.backward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.up.backward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.up.backward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.backward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.up.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.up.backward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.backward.circle.fill")
                }
                
                ///Creates the “arrow.up.backward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.backward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.up.backward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.backward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.up.backward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.backward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.up.backward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.backward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.up.backward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.backward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.up.backward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.backward.square.fill")
                }
                
                ///Creates the “arrow.up.backward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.backward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct app {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.up.forward.app.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.forward.app.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.up.forward.app.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.forward.app.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.up.forward.app.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.forward.app.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.up.forward.app.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.forward.app.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.up.forward.app.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.forward.app.fill")
                }
                
                ///Creates the “arrow.up.forward.app.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.forward.app.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.up.forward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.up.forward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.up.forward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.forward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.up.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.up.forward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.forward.circle.fill")
                }
                
                ///Creates the “arrow.up.forward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.forward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.up.forward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.forward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.up.forward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.up.forward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.up.forward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.forward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.up.forward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.up.forward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.up.forward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.forward.square.fill")
                }
                
                ///Creates the “arrow.up.forward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.up.forward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct heart {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.up.heart.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.heart.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.up.heart.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.heart.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.up.heart.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.heart.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.up.heart.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.heart.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.up.heart.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.heart.fill")
            }
            
            ///Creates the “arrow.up.heart.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.heart.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct message {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.up.message.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.message.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.up.message.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.message.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.up.message.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.message.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.up.message.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.message.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.up.message.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.message.fill")
            }
            
            ///Creates the “arrow.up.message.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.message.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.up.and {
    public struct person {
        public struct rectangle {
            public struct portrait {
                private init() {}
            }
            
            public struct turn {
                public struct left {
                    private init() {}
                }
                
                public struct right {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.up.and.down {
    public struct and {
        public struct arrow {
            public struct left {
                public struct and {
                    public struct right {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct righttriangle {
        public struct up {
            public struct fill {
                public struct righttriangle {
                    public struct down {
                        public struct fill {
                            private init() {}
                            #if os(macOS)
                            
                            ///Creates the “arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill” system symbol image with the accessibility description you specify.
                            ///
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill", accessibilityDescription: accessibilityDescription)
                            }
                            
                            ///Creates the “arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill” system symbol image with the variable value you specify.
                            ///
                            ///The value parameter is valid for symbols that support variable rendering.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(macOS 13.0, *)
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                            }
                            
                            #endif
                            
                            #if os(iOS) || os(tvOS) || os(watchOS)
                            
                            ///Creates the “arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill” system symbol image object with the specified configuration.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(macOS, unavailable)
                            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill", configuration: configuration)
                            }
                            
                            ///Creates the “arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill” system symbol image object with the configuration and variable value you specify.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            @available(macOS, unavailable)
                            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill", variableValue: variableValue, configuration: configuration)
                            }
                            
                            #endif
                            
                            #if canImport(SwiftUI)
                            ///Creates the “arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill” system symbol image.
                            ///
                            ///This initializer creates an image using a system-provided symbol.
                            public static func swiftUIImage() -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill")
                            }
                            
                            ///Creates the “arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill” system symbol image with a variable value.
                            ///
                            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                            ///
                            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "arrow.up.and.down.righttriangle.up.fill.righttriangle.down.fill", variableValue: variableValue)
                            }
                            
                            #endif
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct righttriangle {
                public struct down {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.up.doc {
    public struct on {
        public struct clipboard {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.up.left.and {
    public struct down {
        public struct right {
            public struct and {
                public struct arrow {
                    public struct up {
                        public struct right {
                            public struct and {
                                public struct down {
                                    public struct left {
                                        private init() {}
                                    }
                                    
                                    private init() {}
                                }
                                
                                private init() {}
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct magnifyingglass {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.up.left.and.arrow.down.right {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.up.left.and.arrow.down.right.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.left.and.arrow.down.right.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.up.left.and.arrow.down.right.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.left.and.arrow.down.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.up.left.and.arrow.down.right.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.left.and.arrow.down.right.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.up.left.and.arrow.down.right.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.left.and.arrow.down.right.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.up.left.and.arrow.down.right.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.left.and.arrow.down.right.circle.fill")
            }
            
            ///Creates the “arrow.up.left.and.arrow.down.right.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.left.and.arrow.down.right.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.up.right {
    public struct and {
        public struct arrow {
            public struct down {
                public struct left {
                    public struct rectangle {
                        public struct fill {
                            private init() {}
                            #if os(macOS)
                            
                            ///Creates the “arrow.up.right.and.arrow.down.left.rectangle.fill” system symbol image with the accessibility description you specify.
                            ///
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "arrow.up.right.and.arrow.down.left.rectangle.fill", accessibilityDescription: accessibilityDescription)
                            }
                            
                            ///Creates the “arrow.up.right.and.arrow.down.left.rectangle.fill” system symbol image with the variable value you specify.
                            ///
                            ///The value parameter is valid for symbols that support variable rendering.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(macOS 13.0, *)
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "arrow.up.right.and.arrow.down.left.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                            }
                            
                            #endif
                            
                            #if os(iOS) || os(tvOS) || os(watchOS)
                            
                            ///Creates the “arrow.up.right.and.arrow.down.left.rectangle.fill” system symbol image object with the specified configuration.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(macOS, unavailable)
                            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "arrow.up.right.and.arrow.down.left.rectangle.fill", configuration: configuration)
                            }
                            
                            ///Creates the “arrow.up.right.and.arrow.down.left.rectangle.fill” system symbol image object with the configuration and variable value you specify.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            @available(macOS, unavailable)
                            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "arrow.up.right.and.arrow.down.left.rectangle.fill", variableValue: variableValue, configuration: configuration)
                            }
                            
                            #endif
                            
                            #if canImport(SwiftUI)
                            ///Creates the “arrow.up.right.and.arrow.down.left.rectangle.fill” system symbol image.
                            ///
                            ///This initializer creates an image using a system-provided symbol.
                            public static func swiftUIImage() -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "arrow.up.right.and.arrow.down.left.rectangle.fill")
                            }
                            
                            ///Creates the “arrow.up.right.and.arrow.down.left.rectangle.fill” system symbol image with a variable value.
                            ///
                            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                            ///
                            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "arrow.up.right.and.arrow.down.left.rectangle.fill", variableValue: variableValue)
                            }
                            
                            #endif
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrow.uturn {
    public struct backward {
        public struct circle {
            public struct badge {
                public struct ellipsis {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.uturn.backward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.uturn.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.uturn.backward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.uturn.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.uturn.backward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.uturn.backward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.uturn.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.uturn.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.uturn.backward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.uturn.backward.circle.fill")
                }
                
                ///Creates the “arrow.uturn.backward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.uturn.backward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.uturn.backward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.uturn.backward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.uturn.backward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.uturn.backward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.uturn.backward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.uturn.backward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.uturn.backward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.uturn.backward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.uturn.backward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.uturn.backward.square.fill")
                }
                
                ///Creates the “arrow.uturn.backward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.uturn.backward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.uturn.forward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.uturn.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.uturn.forward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.uturn.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.uturn.forward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.uturn.forward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.uturn.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.uturn.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.uturn.forward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.uturn.forward.circle.fill")
                }
                
                ///Creates the “arrow.uturn.forward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.uturn.forward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrow.uturn.forward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.uturn.forward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrow.uturn.forward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrow.uturn.forward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrow.uturn.forward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.uturn.forward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrow.uturn.forward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrow.uturn.forward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrow.uturn.forward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.uturn.forward.square.fill")
                }
                
                ///Creates the “arrow.uturn.forward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrow.uturn.forward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowshape {
    public struct bounce {
        public struct forward {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.bounce.forward.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.bounce.forward.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.bounce.forward.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.bounce.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.bounce.forward.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.bounce.forward.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.bounce.forward.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.bounce.forward.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.bounce.forward.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.bounce.forward.fill")
                }
                
                ///Creates the “arrowshape.bounce.forward.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.bounce.forward.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct right {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.bounce.right.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.bounce.right.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.bounce.right.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.bounce.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.bounce.right.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.bounce.right.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.bounce.right.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.bounce.right.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.bounce.right.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.bounce.right.fill")
                }
                
                ///Creates the “arrowshape.bounce.right.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.bounce.right.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct zigzag {
        public struct forward {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.zigzag.forward.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.zigzag.forward.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.zigzag.forward.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.zigzag.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.zigzag.forward.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.zigzag.forward.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.zigzag.forward.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.zigzag.forward.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.zigzag.forward.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.zigzag.forward.fill")
                }
                
                ///Creates the “arrowshape.zigzag.forward.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.zigzag.forward.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct right {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.zigzag.right.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.zigzag.right.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.zigzag.right.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.zigzag.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.zigzag.right.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.zigzag.right.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.zigzag.right.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.zigzag.right.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.zigzag.right.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.zigzag.right.fill")
                }
                
                ///Creates the “arrowshape.zigzag.right.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.zigzag.right.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowshape.turn.up {
    public struct backward {
        public struct x2 {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.2.circle.fill")
                    }
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.2.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.2.fill")
                }
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.2.circle.fill")
                    }
                    
                    ///Creates the “arrowshape.turn.up.backward.2.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.2.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.2.fill")
                }
                
                ///Creates the “arrowshape.turn.up.backward.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.turn.up.backward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.turn.up.backward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.turn.up.backward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.turn.up.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.turn.up.backward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.circle.fill")
                }
                
                ///Creates the “arrowshape.turn.up.backward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowshape.turn.up.backward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.backward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowshape.turn.up.backward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.backward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowshape.turn.up.backward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.backward.fill", configuration: configuration)
            }
            
            ///Creates the “arrowshape.turn.up.backward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.backward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowshape.turn.up.backward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.fill")
            }
            
            ///Creates the “arrowshape.turn.up.backward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.turn.up.forward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.turn.up.forward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.turn.up.forward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.forward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.turn.up.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.turn.up.forward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.forward.circle.fill")
                }
                
                ///Creates the “arrowshape.turn.up.forward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.forward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowshape.turn.up.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowshape.turn.up.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowshape.turn.up.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.forward.fill", configuration: configuration)
            }
            
            ///Creates the “arrowshape.turn.up.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowshape.turn.up.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.forward.fill")
            }
            
            ///Creates the “arrowshape.turn.up.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowshape.turn.up.left.x2 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.left.2.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.left.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.left.2.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.left.2.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.left.2.circle.fill")
            }
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.left.2.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowshape.turn.up.left._2 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.left.2.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.left.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.left.2.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.turn.up.left.2.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.left.2.circle.fill")
            }
            
            ///Creates the “arrowshape.turn.up.left.2.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.left.2.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowtriangle {
    public struct backward {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowtriangle.backward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowtriangle.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowtriangle.backward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowtriangle.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowtriangle.backward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowtriangle.backward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrowtriangle.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowtriangle.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowtriangle.backward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.backward.circle.fill")
                }
                
                ///Creates the “arrowtriangle.backward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.backward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowtriangle.backward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowtriangle.backward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowtriangle.backward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowtriangle.backward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowtriangle.backward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowtriangle.backward.fill", configuration: configuration)
            }
            
            ///Creates the “arrowtriangle.backward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowtriangle.backward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowtriangle.backward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowtriangle.backward.fill")
            }
            
            ///Creates the “arrowtriangle.backward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowtriangle.backward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowtriangle.backward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowtriangle.backward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowtriangle.backward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowtriangle.backward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowtriangle.backward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowtriangle.backward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrowtriangle.backward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowtriangle.backward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowtriangle.backward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.backward.square.fill")
                }
                
                ///Creates the “arrowtriangle.backward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.backward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowtriangle.forward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowtriangle.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowtriangle.forward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowtriangle.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowtriangle.forward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowtriangle.forward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “arrowtriangle.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowtriangle.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowtriangle.forward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.forward.circle.fill")
                }
                
                ///Creates the “arrowtriangle.forward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.forward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowtriangle.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowtriangle.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowtriangle.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowtriangle.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowtriangle.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowtriangle.forward.fill", configuration: configuration)
            }
            
            ///Creates the “arrowtriangle.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowtriangle.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowtriangle.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowtriangle.forward.fill")
            }
            
            ///Creates the “arrowtriangle.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowtriangle.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowtriangle.forward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowtriangle.forward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowtriangle.forward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowtriangle.forward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowtriangle.forward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowtriangle.forward.square.fill", configuration: configuration)
                }
                
                ///Creates the “arrowtriangle.forward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowtriangle.forward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowtriangle.forward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.forward.square.fill")
                }
                
                ///Creates the “arrowtriangle.forward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.forward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowtriangle.left {
    public struct and {
        public struct line {
            public struct vertical {
                public struct and {
                    public struct arrowtriangle {
                        public struct right {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowtriangle.left.fill {
    public struct and {
        public struct line {
            public struct vertical {
                public struct and {
                    public struct arrowtriangle {
                        public struct right {
                            public struct fill {
                                private init() {}
                                #if os(macOS)
                                
                                ///Creates the “arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill” system symbol image with the accessibility description you specify.
                                ///
                                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                                @available(iOS, unavailable)
                                @available(tvOS, unavailable)
                                @available(watchOS, unavailable)
                                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                    SFSymbolReference.image(name: "arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill", accessibilityDescription: accessibilityDescription)
                                }
                                
                                ///Creates the “arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill” system symbol image with the variable value you specify.
                                ///
                                ///The value parameter is valid for symbols that support variable rendering.
                                ///
                                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                                @available(macOS 13.0, *)
                                @available(iOS, unavailable)
                                @available(tvOS, unavailable)
                                @available(watchOS, unavailable)
                                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                    SFSymbolReference.image(name: "arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                                }
                                
                                #endif
                                
                                #if os(iOS) || os(tvOS) || os(watchOS)
                                
                                ///Creates the “arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill” system symbol image object with the specified configuration.
                                ///
                                ///Use this method to retrieve system-defined symbol images.
                                ///
                                ///- Parameter configuration: The image configuration the system applies to the image.
                                ///
                                ///- Returns: The object containing the image variant that matches the specified configuration data.
                                @available(macOS, unavailable)
                                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                    SFSymbolReference.image(name: "arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill", configuration: configuration)
                                }
                                
                                ///Creates the “arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill” system symbol image object with the configuration and variable value you specify.
                                ///
                                ///Use this method to retrieve system-defined symbol images.
                                ///
                                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                                ///- Parameter configuration: The image configuration the system applies to the image.
                                ///
                                ///- Returns: The object containing the image variant that matches the specified configuration data.
                                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                                @available(macOS, unavailable)
                                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                    SFSymbolReference.image(name: "arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill", variableValue: variableValue, configuration: configuration)
                                }
                                
                                #endif
                                
                                #if canImport(SwiftUI)
                                ///Creates the “arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill” system symbol image.
                                ///
                                ///This initializer creates an image using a system-provided symbol.
                                public static func swiftUIImage() -> SwiftUI.Image {
                                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill")
                                }
                                
                                ///Creates the “arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill” system symbol image with a variable value.
                                ///
                                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                                ///
                                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.left.fill.and.line.vertical.and.arrowtriangle.right.fill", variableValue: variableValue)
                                }
                                
                                #endif
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowtriangle.right {
    public struct and {
        public struct line {
            public struct vertical {
                public struct and {
                    public struct arrowtriangle {
                        public struct left {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.arrowtriangle.right.fill {
    public struct and {
        public struct line {
            public struct vertical {
                public struct and {
                    public struct arrowtriangle {
                        public struct left {
                            public struct fill {
                                private init() {}
                                #if os(macOS)
                                
                                ///Creates the “arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill” system symbol image with the accessibility description you specify.
                                ///
                                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                                @available(iOS, unavailable)
                                @available(tvOS, unavailable)
                                @available(watchOS, unavailable)
                                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                    SFSymbolReference.image(name: "arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill", accessibilityDescription: accessibilityDescription)
                                }
                                
                                ///Creates the “arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill” system symbol image with the variable value you specify.
                                ///
                                ///The value parameter is valid for symbols that support variable rendering.
                                ///
                                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                                @available(macOS 13.0, *)
                                @available(iOS, unavailable)
                                @available(tvOS, unavailable)
                                @available(watchOS, unavailable)
                                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                    SFSymbolReference.image(name: "arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                                }
                                
                                #endif
                                
                                #if os(iOS) || os(tvOS) || os(watchOS)
                                
                                ///Creates the “arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill” system symbol image object with the specified configuration.
                                ///
                                ///Use this method to retrieve system-defined symbol images.
                                ///
                                ///- Parameter configuration: The image configuration the system applies to the image.
                                ///
                                ///- Returns: The object containing the image variant that matches the specified configuration data.
                                @available(macOS, unavailable)
                                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                    SFSymbolReference.image(name: "arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill", configuration: configuration)
                                }
                                
                                ///Creates the “arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill” system symbol image object with the configuration and variable value you specify.
                                ///
                                ///Use this method to retrieve system-defined symbol images.
                                ///
                                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                                ///- Parameter configuration: The image configuration the system applies to the image.
                                ///
                                ///- Returns: The object containing the image variant that matches the specified configuration data.
                                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                                @available(macOS, unavailable)
                                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                    SFSymbolReference.image(name: "arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill", variableValue: variableValue, configuration: configuration)
                                }
                                
                                #endif
                                
                                #if canImport(SwiftUI)
                                ///Creates the “arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill” system symbol image.
                                ///
                                ///This initializer creates an image using a system-provided symbol.
                                public static func swiftUIImage() -> SwiftUI.Image {
                                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill")
                                }
                                
                                ///Creates the “arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill” system symbol image with a variable value.
                                ///
                                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                                ///
                                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                    SFSymbolReference.swiftUIImage(name: "arrowtriangle.right.fill.and.line.vertical.and.arrowtriangle.left.fill", variableValue: variableValue)
                                }
                                
                                #endif
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.at {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “at.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "at.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “at.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "at.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “at.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "at.circle.fill", configuration: configuration)
            }
            
            ///Creates the “at.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "at.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “at.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "at.circle.fill")
            }
            
            ///Creates the “at.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "at.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.backward {
    public struct frame {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “backward.frame.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "backward.frame.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “backward.frame.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "backward.frame.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “backward.frame.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "backward.frame.fill", configuration: configuration)
            }
            
            ///Creates the “backward.frame.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "backward.frame.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “backward.frame.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "backward.frame.fill")
            }
            
            ///Creates the “backward.frame.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "backward.frame.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.badge.plus.radiowaves {
    public struct forward {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.bag {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bag.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bag.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bag.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bag.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bag.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bag.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bag.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bag.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bag.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bag.circle.fill")
            }
            
            ///Creates the “bag.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bag.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.battery.x100 {
    public struct bolt {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.battery._100 {
    public struct bolt {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.bell {
    public struct badge {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bell.badge.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bell.badge.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bell.badge.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bell.badge.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bell.badge.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bell.badge.fill", configuration: configuration)
            }
            
            ///Creates the “bell.badge.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bell.badge.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bell.badge.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bell.badge.fill")
            }
            
            ///Creates the “bell.badge.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bell.badge.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.bell.slash {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bell.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bell.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bell.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bell.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bell.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bell.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bell.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bell.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bell.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bell.slash.circle.fill")
            }
            
            ///Creates the “bell.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bell.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.bolt {
    public struct car {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.car.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.car.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.car.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.car.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.car.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.car.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.car.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.car.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.car.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.car.fill")
            }
            
            ///Creates the “bolt.car.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.car.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct heart {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.heart.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.heart.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.heart.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.heart.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.heart.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.heart.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.heart.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.heart.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.heart.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.heart.fill")
            }
            
            ///Creates the “bolt.heart.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.heart.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.bolt.fill {
    public struct batteryblock {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.fill.batteryblock.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.fill.batteryblock.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.fill.batteryblock.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.fill.batteryblock.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.fill.batteryblock.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.fill.batteryblock.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.fill.batteryblock.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.fill.batteryblock.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.fill.batteryblock.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.fill.batteryblock.fill")
            }
            
            ///Creates the “bolt.fill.batteryblock.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.fill.batteryblock.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.bolt.slash {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.slash.circle.fill")
            }
            
            ///Creates the “bolt.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.book {
    public struct closed {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “book.closed.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "book.closed.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “book.closed.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "book.closed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “book.closed.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "book.closed.fill", configuration: configuration)
            }
            
            ///Creates the “book.closed.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "book.closed.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “book.closed.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "book.closed.fill")
            }
            
            ///Creates the “book.closed.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "book.closed.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.bookmark {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bookmark.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bookmark.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bookmark.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bookmark.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bookmark.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bookmark.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bookmark.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bookmark.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bookmark.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bookmark.circle.fill")
            }
            
            ///Creates the “bookmark.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bookmark.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bookmark.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bookmark.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bookmark.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bookmark.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bookmark.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bookmark.slash.fill", configuration: configuration)
            }
            
            ///Creates the “bookmark.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bookmark.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bookmark.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bookmark.slash.fill")
            }
            
            ///Creates the “bookmark.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bookmark.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.calendar.badge {
    public struct clock {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct exclamationmark {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.camera {
    public struct aperture {
        private init() {}
    }
    
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct filters {
        private init() {}
    }
    
    public struct metering {
        public struct center {
            public struct weighted {
                public struct average {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct matrix {
            private init() {}
        }
        
        public struct multispot {
            private init() {}
        }
        
        public struct none {
            private init() {}
        }
        
        public struct partial {
            private init() {}
        }
        
        public struct spot {
            private init() {}
        }
        
        public struct unknown {
            public struct ar {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.camera.fill {
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.capsule {
    public struct portrait {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “capsule.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "capsule.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “capsule.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "capsule.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “capsule.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "capsule.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “capsule.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "capsule.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “capsule.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "capsule.portrait.fill")
            }
            
            ///Creates the “capsule.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "capsule.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.car {
    public struct x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “car.2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "car.2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “car.2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "car.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “car.2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "car.2.fill", configuration: configuration)
            }
            
            ///Creates the “car.2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "car.2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “car.2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "car.2.fill")
            }
            
            ///Creates the “car.2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "car.2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “car.2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "car.2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “car.2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "car.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “car.2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "car.2.fill", configuration: configuration)
            }
            
            ///Creates the “car.2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "car.2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “car.2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "car.2.fill")
            }
            
            ///Creates the “car.2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "car.2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “car.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "car.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “car.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "car.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “car.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "car.circle.fill", configuration: configuration)
            }
            
            ///Creates the “car.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "car.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “car.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "car.circle.fill")
            }
            
            ///Creates the “car.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "car.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.chart.bar {
    public struct doc {
        public struct horizontal {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “chart.bar.doc.horizontal.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chart.bar.doc.horizontal.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “chart.bar.doc.horizontal.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chart.bar.doc.horizontal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “chart.bar.doc.horizontal.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chart.bar.doc.horizontal.fill", configuration: configuration)
                }
                
                ///Creates the “chart.bar.doc.horizontal.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chart.bar.doc.horizontal.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “chart.bar.doc.horizontal.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chart.bar.doc.horizontal.fill")
                }
                
                ///Creates the “chart.bar.doc.horizontal.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chart.bar.doc.horizontal.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct xaxis {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.checkmark {
    public struct icloud {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “checkmark.icloud.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.icloud.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “checkmark.icloud.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.icloud.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “checkmark.icloud.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.icloud.fill", configuration: configuration)
            }
            
            ///Creates the “checkmark.icloud.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.icloud.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “checkmark.icloud.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.icloud.fill")
            }
            
            ///Creates the “checkmark.icloud.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.icloud.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.checkmark.rectangle {
    public struct portrait {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “checkmark.rectangle.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.rectangle.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “checkmark.rectangle.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.rectangle.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “checkmark.rectangle.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.rectangle.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “checkmark.rectangle.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.rectangle.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “checkmark.rectangle.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.rectangle.portrait.fill")
            }
            
            ///Creates the “checkmark.rectangle.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.rectangle.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.chevron {
    public struct backward {
        public struct x2 {
            private init() {}
        }
        
        public struct _2 {
            private init() {}
        }
        
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “chevron.backward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chevron.backward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “chevron.backward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chevron.backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “chevron.backward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chevron.backward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “chevron.backward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chevron.backward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “chevron.backward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chevron.backward.circle.fill")
                }
                
                ///Creates the “chevron.backward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chevron.backward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “chevron.backward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chevron.backward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “chevron.backward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chevron.backward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “chevron.backward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chevron.backward.square.fill", configuration: configuration)
                }
                
                ///Creates the “chevron.backward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chevron.backward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “chevron.backward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chevron.backward.square.fill")
                }
                
                ///Creates the “chevron.backward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chevron.backward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct x2 {
            private init() {}
        }
        
        public struct _2 {
            private init() {}
        }
        
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “chevron.forward.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chevron.forward.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “chevron.forward.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chevron.forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “chevron.forward.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chevron.forward.circle.fill", configuration: configuration)
                }
                
                ///Creates the “chevron.forward.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chevron.forward.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “chevron.forward.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chevron.forward.circle.fill")
                }
                
                ///Creates the “chevron.forward.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chevron.forward.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “chevron.forward.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chevron.forward.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “chevron.forward.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chevron.forward.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “chevron.forward.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chevron.forward.square.fill", configuration: configuration)
                }
                
                ///Creates the “chevron.forward.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chevron.forward.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “chevron.forward.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chevron.forward.square.fill")
                }
                
                ///Creates the “chevron.forward.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chevron.forward.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.circle {
    public struct bottomhalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.bottomhalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.bottomhalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.bottomhalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.bottomhalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.bottomhalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.bottomhalf.fill", configuration: configuration)
            }
            
            ///Creates the “circle.bottomhalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.bottomhalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.bottomhalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.bottomhalf.fill")
            }
            
            ///Creates the “circle.bottomhalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.bottomhalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.circle.fill", configuration: configuration)
            }
            
            ///Creates the “circle.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.circle.fill")
            }
            
            ///Creates the “circle.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct dashed {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circle.dashed.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.dashed.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circle.dashed.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.dashed.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circle.dashed.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.dashed.inset.fill", configuration: configuration)
                }
                
                ///Creates the “circle.dashed.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.dashed.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circle.dashed.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.dashed.inset.fill")
                }
                
                ///Creates the “circle.dashed.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.dashed.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct square {
        private init() {}
    }
    
    public struct tophalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.tophalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.tophalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.tophalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.tophalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.tophalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.tophalf.fill", configuration: configuration)
            }
            
            ///Creates the “circle.tophalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.tophalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.tophalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.tophalf.fill")
            }
            
            ///Creates the “circle.tophalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.tophalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.circle.fill {
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.fill.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.fill.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.fill.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.fill.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.fill.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.fill.square.fill", configuration: configuration)
            }
            
            ///Creates the “circle.fill.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.fill.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.fill.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.fill.square.fill")
            }
            
            ///Creates the “circle.fill.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.fill.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.circle.grid {
    public struct cross {
        public struct down {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circle.grid.cross.down.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.grid.cross.down.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circle.grid.cross.down.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.grid.cross.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circle.grid.cross.down.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.grid.cross.down.fill", configuration: configuration)
                }
                
                ///Creates the “circle.grid.cross.down.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.grid.cross.down.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circle.grid.cross.down.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.grid.cross.down.fill")
                }
                
                ///Creates the “circle.grid.cross.down.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.grid.cross.down.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.grid.cross.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.cross.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.grid.cross.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.cross.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.grid.cross.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.cross.fill", configuration: configuration)
            }
            
            ///Creates the “circle.grid.cross.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.cross.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.grid.cross.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.cross.fill")
            }
            
            ///Creates the “circle.grid.cross.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.cross.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circle.grid.cross.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.grid.cross.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circle.grid.cross.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.grid.cross.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circle.grid.cross.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.grid.cross.left.fill", configuration: configuration)
                }
                
                ///Creates the “circle.grid.cross.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.grid.cross.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circle.grid.cross.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.grid.cross.left.fill")
                }
                
                ///Creates the “circle.grid.cross.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.grid.cross.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct right {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circle.grid.cross.right.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.grid.cross.right.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circle.grid.cross.right.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.grid.cross.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circle.grid.cross.right.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.grid.cross.right.fill", configuration: configuration)
                }
                
                ///Creates the “circle.grid.cross.right.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.grid.cross.right.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circle.grid.cross.right.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.grid.cross.right.fill")
                }
                
                ///Creates the “circle.grid.cross.right.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.grid.cross.right.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct up {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circle.grid.cross.up.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.grid.cross.up.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circle.grid.cross.up.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.grid.cross.up.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circle.grid.cross.up.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.grid.cross.up.fill", configuration: configuration)
                }
                
                ///Creates the “circle.grid.cross.up.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.grid.cross.up.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circle.grid.cross.up.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.grid.cross.up.fill")
                }
                
                ///Creates the “circle.grid.cross.up.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.grid.cross.up.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.clock {
    public struct arrow {
        public struct circlepath {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.command {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “command.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "command.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “command.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "command.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “command.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "command.circle.fill", configuration: configuration)
            }
            
            ///Creates the “command.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "command.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “command.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "command.circle.fill")
            }
            
            ///Creates the “command.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "command.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “command.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "command.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “command.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "command.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “command.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "command.square.fill", configuration: configuration)
            }
            
            ///Creates the “command.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "command.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “command.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "command.square.fill")
            }
            
            ///Creates the “command.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "command.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.creditcard {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “creditcard.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "creditcard.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “creditcard.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "creditcard.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “creditcard.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "creditcard.circle.fill", configuration: configuration)
            }
            
            ///Creates the “creditcard.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "creditcard.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “creditcard.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "creditcard.circle.fill")
            }
            
            ///Creates the “creditcard.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "creditcard.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.cube {
    public struct transparent {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cube.transparent.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cube.transparent.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cube.transparent.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cube.transparent.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cube.transparent.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cube.transparent.fill", configuration: configuration)
            }
            
            ///Creates the “cube.transparent.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cube.transparent.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cube.transparent.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cube.transparent.fill")
            }
            
            ///Creates the “cube.transparent.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cube.transparent.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.dial {
    public struct max {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dial.max.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.max.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dial.max.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.max.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dial.max.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.max.fill", configuration: configuration)
            }
            
            ///Creates the “dial.max.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.max.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dial.max.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.max.fill")
            }
            
            ///Creates the “dial.max.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.max.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct min {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dial.min.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.min.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dial.min.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.min.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dial.min.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.min.fill", configuration: configuration)
            }
            
            ///Creates the “dial.min.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.min.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dial.min.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.min.fill")
            }
            
            ///Creates the “dial.min.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.min.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.doc {
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        public struct gearshape {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “doc.badge.gearshape.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "doc.badge.gearshape.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “doc.badge.gearshape.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "doc.badge.gearshape.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “doc.badge.gearshape.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "doc.badge.gearshape.fill", configuration: configuration)
                }
                
                ///Creates the “doc.badge.gearshape.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "doc.badge.gearshape.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “doc.badge.gearshape.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "doc.badge.gearshape.fill")
                }
                
                ///Creates the “doc.badge.gearshape.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "doc.badge.gearshape.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct zipper {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.doc.append {
    public struct fill {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
        #if os(macOS)
        
        ///Creates the “doc.append.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "doc.append.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “doc.append.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "doc.append.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “doc.append.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "doc.append.fill", configuration: configuration)
        }
        
        ///Creates the “doc.append.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "doc.append.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “doc.append.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "doc.append.fill")
        }
        
        ///Creates the “doc.append.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "doc.append.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.doc.fill {
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.doc.plaintext {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “doc.plaintext.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "doc.plaintext.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “doc.plaintext.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "doc.plaintext.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “doc.plaintext.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "doc.plaintext.fill", configuration: configuration)
        }
        
        ///Creates the “doc.plaintext.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "doc.plaintext.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “doc.plaintext.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "doc.plaintext.fill")
        }
        
        ///Creates the “doc.plaintext.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "doc.plaintext.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.doc.richtext {
    public struct ar {
        private init() {}
    }
    
    public struct fill {
        public struct ar {
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        private init() {}
        #if os(macOS)
        
        ///Creates the “doc.richtext.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "doc.richtext.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “doc.richtext.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "doc.richtext.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “doc.richtext.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "doc.richtext.fill", configuration: configuration)
        }
        
        ///Creates the “doc.richtext.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "doc.richtext.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “doc.richtext.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "doc.richtext.fill")
        }
        
        ///Creates the “doc.richtext.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "doc.richtext.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
    public struct he {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.doc.text {
    public struct below {
        public struct ecg {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “doc.text.below.ecg.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "doc.text.below.ecg.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “doc.text.below.ecg.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "doc.text.below.ecg.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “doc.text.below.ecg.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "doc.text.below.ecg.fill", configuration: configuration)
                }
                
                ///Creates the “doc.text.below.ecg.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "doc.text.below.ecg.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “doc.text.below.ecg.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "doc.text.below.ecg.fill")
                }
                
                ///Creates the “doc.text.below.ecg.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "doc.text.below.ecg.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.doc.text.fill {
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.dot {
    public struct arrowtriangles {
        public struct up {
            public struct right {
                public struct down {
                    public struct left {
                        public struct circle {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct and {
            public struct cursorarrow {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct squareshape {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dot.squareshape.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dot.squareshape.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dot.squareshape.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dot.squareshape.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dot.squareshape.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dot.squareshape.fill", configuration: configuration)
            }
            
            ///Creates the “dot.squareshape.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dot.squareshape.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dot.squareshape.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dot.squareshape.fill")
            }
            
            ///Creates the “dot.squareshape.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dot.squareshape.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct split {
            public struct x2x2 {
                private init() {}
            }
            
            public struct _2x2 {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.dot.radiowaves {
    public struct forward {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.drop {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “drop.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "drop.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “drop.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "drop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “drop.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "drop.fill", configuration: configuration)
        }
        
        ///Creates the “drop.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "drop.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “drop.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "drop.fill")
        }
        
        ///Creates the “drop.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "drop.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.ear {
    public struct badge {
        public struct checkmark {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “ear.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "ear.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “ear.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "ear.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “ear.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "ear.fill", configuration: configuration)
        }
        
        ///Creates the “ear.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "ear.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “ear.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "ear.fill")
        }
        
        ///Creates the “ear.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "ear.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
    public struct trianglebadge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.eject {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “eject.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eject.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “eject.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eject.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “eject.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eject.circle.fill", configuration: configuration)
            }
            
            ///Creates the “eject.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eject.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “eject.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eject.circle.fill")
            }
            
            ///Creates the “eject.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eject.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.ellipsis {
    public struct bubble {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “ellipsis.bubble.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ellipsis.bubble.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “ellipsis.bubble.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ellipsis.bubble.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “ellipsis.bubble.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ellipsis.bubble.fill", configuration: configuration)
            }
            
            ///Creates the “ellipsis.bubble.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ellipsis.bubble.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “ellipsis.bubble.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ellipsis.bubble.fill")
            }
            
            ///Creates the “ellipsis.bubble.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ellipsis.bubble.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct rectangle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “ellipsis.rectangle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ellipsis.rectangle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “ellipsis.rectangle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ellipsis.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “ellipsis.rectangle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ellipsis.rectangle.fill", configuration: configuration)
            }
            
            ///Creates the “ellipsis.rectangle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ellipsis.rectangle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “ellipsis.rectangle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ellipsis.rectangle.fill")
            }
            
            ///Creates the “ellipsis.rectangle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ellipsis.rectangle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.envelope {
    public struct arrow {
        public struct triangle {
            public struct branch {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “envelope.arrow.triangle.branch.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "envelope.arrow.triangle.branch.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “envelope.arrow.triangle.branch.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "envelope.arrow.triangle.branch.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “envelope.arrow.triangle.branch.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "envelope.arrow.triangle.branch.fill", configuration: configuration)
                    }
                    
                    ///Creates the “envelope.arrow.triangle.branch.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "envelope.arrow.triangle.branch.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “envelope.arrow.triangle.branch.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "envelope.arrow.triangle.branch.fill")
                    }
                    
                    ///Creates the “envelope.arrow.triangle.branch.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "envelope.arrow.triangle.branch.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.envelope.badge {
    public struct shield {
        public struct leadinghalf {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “envelope.badge.shield.leadinghalf.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "envelope.badge.shield.leadinghalf.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “envelope.badge.shield.leadinghalf.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "envelope.badge.shield.leadinghalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “envelope.badge.shield.leadinghalf.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "envelope.badge.shield.leadinghalf.fill", configuration: configuration)
                }
                
                ///Creates the “envelope.badge.shield.leadinghalf.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "envelope.badge.shield.leadinghalf.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “envelope.badge.shield.leadinghalf.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "envelope.badge.shield.leadinghalf.fill")
                }
                
                ///Creates the “envelope.badge.shield.leadinghalf.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "envelope.badge.shield.leadinghalf.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.envelope.fill {
    public struct badge {
        public struct shield {
            public struct trailinghalf {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “envelope.fill.badge.shield.trailinghalf.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "envelope.fill.badge.shield.trailinghalf.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “envelope.fill.badge.shield.trailinghalf.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "envelope.fill.badge.shield.trailinghalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “envelope.fill.badge.shield.trailinghalf.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "envelope.fill.badge.shield.trailinghalf.fill", configuration: configuration)
                    }
                    
                    ///Creates the “envelope.fill.badge.shield.trailinghalf.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "envelope.fill.badge.shield.trailinghalf.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “envelope.fill.badge.shield.trailinghalf.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "envelope.fill.badge.shield.trailinghalf.fill")
                    }
                    
                    ///Creates the “envelope.fill.badge.shield.trailinghalf.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "envelope.fill.badge.shield.trailinghalf.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.exclamationmark {
    public struct x2 {
        private init() {}
    }
    
    public struct _2 {
        private init() {}
    }
    
    public struct x3 {
        private init() {}
    }
    
    public struct _3 {
        private init() {}
    }
    
    public struct arrow {
        public struct circlepath {
            private init() {}
        }
        
        public struct triangle {
            public struct x2 {
                public struct circlepath {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _2 {
                public struct circlepath {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.eye {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “eye.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eye.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “eye.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eye.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “eye.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eye.circle.fill", configuration: configuration)
            }
            
            ///Creates the “eye.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eye.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “eye.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eye.circle.fill")
            }
            
            ///Creates the “eye.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eye.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.flag {
    public struct badge {
        public struct ellipsis {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “flag.badge.ellipsis.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flag.badge.ellipsis.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “flag.badge.ellipsis.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flag.badge.ellipsis.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “flag.badge.ellipsis.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flag.badge.ellipsis.fill", configuration: configuration)
                }
                
                ///Creates the “flag.badge.ellipsis.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flag.badge.ellipsis.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “flag.badge.ellipsis.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flag.badge.ellipsis.fill")
                }
                
                ///Creates the “flag.badge.ellipsis.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flag.badge.ellipsis.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.flag.slash {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “flag.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "flag.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “flag.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "flag.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “flag.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "flag.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “flag.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "flag.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “flag.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "flag.slash.circle.fill")
            }
            
            ///Creates the “flag.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "flag.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.folder.badge {
    public struct gear {
        private init() {}
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.folder.fill.badge {
    public struct gear {
        private init() {}
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.forward {
    public struct frame {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “forward.frame.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "forward.frame.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “forward.frame.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "forward.frame.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “forward.frame.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "forward.frame.fill", configuration: configuration)
            }
            
            ///Creates the “forward.frame.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "forward.frame.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “forward.frame.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "forward.frame.fill")
            }
            
            ///Creates the “forward.frame.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "forward.frame.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.gift {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “gift.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "gift.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “gift.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "gift.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “gift.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "gift.circle.fill", configuration: configuration)
            }
            
            ///Creates the “gift.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "gift.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “gift.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "gift.circle.fill")
            }
            
            ///Creates the “gift.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "gift.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.guitars {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “guitars.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "guitars.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “guitars.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "guitars.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “guitars.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "guitars.fill", configuration: configuration)
        }
        
        ///Creates the “guitars.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "guitars.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “guitars.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "guitars.fill")
        }
        
        ///Creates the “guitars.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "guitars.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.h.square {
    public struct on {
        public struct square {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.h.square.fill {
    public struct on {
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “h.square.fill.on.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "h.square.fill.on.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “h.square.fill.on.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "h.square.fill.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “h.square.fill.on.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "h.square.fill.on.square.fill", configuration: configuration)
                }
                
                ///Creates the “h.square.fill.on.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "h.square.fill.on.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “h.square.fill.on.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "h.square.fill.on.square.fill")
                }
                
                ///Creates the “h.square.fill.on.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "h.square.fill.on.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.hand {
    public struct tap {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.tap.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.tap.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.tap.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.tap.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.tap.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.tap.fill", configuration: configuration)
            }
            
            ///Creates the “hand.tap.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.tap.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.tap.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.tap.fill")
            }
            
            ///Creates the “hand.tap.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.tap.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct wave {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.wave.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.wave.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.wave.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.wave.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.wave.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.wave.fill", configuration: configuration)
            }
            
            ///Creates the “hand.wave.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.wave.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.wave.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.wave.fill")
            }
            
            ///Creates the “hand.wave.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.wave.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.hand.point {
    public struct down {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.point.down.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.point.down.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.point.down.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.point.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.point.down.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.point.down.fill", configuration: configuration)
            }
            
            ///Creates the “hand.point.down.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.point.down.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.point.down.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.point.down.fill")
            }
            
            ///Creates the “hand.point.down.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.point.down.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct up {
        public struct braille {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “hand.point.up.braille.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hand.point.up.braille.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “hand.point.up.braille.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hand.point.up.braille.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “hand.point.up.braille.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hand.point.up.braille.fill", configuration: configuration)
                }
                
                ///Creates the “hand.point.up.braille.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hand.point.up.braille.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “hand.point.up.braille.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hand.point.up.braille.fill")
                }
                
                ///Creates the “hand.point.up.braille.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hand.point.up.braille.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.point.up.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.point.up.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.point.up.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.point.up.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.point.up.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.point.up.fill", configuration: configuration)
            }
            
            ///Creates the “hand.point.up.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.point.up.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.point.up.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.point.up.fill")
            }
            
            ///Creates the “hand.point.up.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.point.up.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “hand.point.up.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hand.point.up.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “hand.point.up.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hand.point.up.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “hand.point.up.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hand.point.up.left.fill", configuration: configuration)
                }
                
                ///Creates the “hand.point.up.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hand.point.up.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “hand.point.up.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hand.point.up.left.fill")
                }
                
                ///Creates the “hand.point.up.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hand.point.up.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.headphones {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “headphones.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "headphones.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “headphones.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "headphones.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “headphones.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "headphones.circle.fill", configuration: configuration)
            }
            
            ///Creates the “headphones.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "headphones.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “headphones.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "headphones.circle.fill")
            }
            
            ///Creates the “headphones.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "headphones.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.heart {
    public struct text {
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “heart.text.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "heart.text.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “heart.text.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "heart.text.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “heart.text.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "heart.text.square.fill", configuration: configuration)
                }
                
                ///Creates the “heart.text.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "heart.text.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “heart.text.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "heart.text.square.fill")
                }
                
                ///Creates the “heart.text.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "heart.text.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.hifispeaker {
    public struct x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hifispeaker.2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hifispeaker.2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hifispeaker.2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.2.fill", configuration: configuration)
            }
            
            ///Creates the “hifispeaker.2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hifispeaker.2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.2.fill")
            }
            
            ///Creates the “hifispeaker.2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hifispeaker.2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hifispeaker.2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hifispeaker.2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.2.fill", configuration: configuration)
            }
            
            ///Creates the “hifispeaker.2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hifispeaker.2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.2.fill")
            }
            
            ///Creates the “hifispeaker.2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct and {
        public struct homepod {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “hifispeaker.and.homepod.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hifispeaker.and.homepod.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “hifispeaker.and.homepod.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hifispeaker.and.homepod.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “hifispeaker.and.homepod.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hifispeaker.and.homepod.fill", configuration: configuration)
                }
                
                ///Creates the “hifispeaker.and.homepod.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hifispeaker.and.homepod.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “hifispeaker.and.homepod.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hifispeaker.and.homepod.fill")
                }
                
                ///Creates the “hifispeaker.and.homepod.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hifispeaker.and.homepod.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.hourglass {
    public struct badge {
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.house {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “house.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "house.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “house.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "house.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “house.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "house.circle.fill", configuration: configuration)
            }
            
            ///Creates the “house.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "house.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “house.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "house.circle.fill")
            }
            
            ///Creates the “house.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "house.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.j.square {
    public struct on {
        public struct square {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.j.square.fill {
    public struct on {
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “j.square.fill.on.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "j.square.fill.on.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “j.square.fill.on.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "j.square.fill.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “j.square.fill.on.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "j.square.fill.on.square.fill", configuration: configuration)
                }
                
                ///Creates the “j.square.fill.on.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "j.square.fill.on.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “j.square.fill.on.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "j.square.fill.on.square.fill")
                }
                
                ///Creates the “j.square.fill.on.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "j.square.fill.on.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.keyboard {
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct macwindow {
        private init() {}
    }
    
    public struct onehanded {
        public struct left {
            private init() {}
        }
        
        public struct right {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.keyboard.chevron.compact {
    public struct left {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.l {
    public struct joystick {
        public struct down {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “l.joystick.down.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.down.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “l.joystick.down.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “l.joystick.down.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.down.fill", configuration: configuration)
                }
                
                ///Creates the “l.joystick.down.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.down.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “l.joystick.down.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.down.fill")
                }
                
                ///Creates the “l.joystick.down.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.down.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “l.joystick.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "l.joystick.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “l.joystick.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "l.joystick.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “l.joystick.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "l.joystick.fill", configuration: configuration)
            }
            
            ///Creates the “l.joystick.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "l.joystick.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “l.joystick.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "l.joystick.fill")
            }
            
            ///Creates the “l.joystick.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "l.joystick.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct rectangle {
        public struct roundedbottom {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “l.rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “l.rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “l.rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.rectangle.roundedbottom.fill", configuration: configuration)
                }
                
                ///Creates the “l.rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “l.rectangle.roundedbottom.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.rectangle.roundedbottom.fill")
                }
                
                ///Creates the “l.rectangle.roundedbottom.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.rectangle.roundedbottom.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.lasso {
    public struct sparkles {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.leaf {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “leaf.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "leaf.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “leaf.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "leaf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “leaf.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "leaf.fill", configuration: configuration)
        }
        
        ///Creates the “leaf.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "leaf.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “leaf.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "leaf.fill")
        }
        
        ///Creates the “leaf.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "leaf.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.leaf.arrow {
    public struct triangle {
        public struct circlepath {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.line {
    public struct x3 {
        public struct crossed {
            public struct swirl {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "line.3.crossed.swirl.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "line.3.crossed.swirl.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "line.3.crossed.swirl.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "line.3.crossed.swirl.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "line.3.crossed.swirl.circle.fill")
                        }
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "line.3.crossed.swirl.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _3 {
        public struct crossed {
            public struct swirl {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "line.3.crossed.swirl.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "line.3.crossed.swirl.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "line.3.crossed.swirl.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "line.3.crossed.swirl.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "line.3.crossed.swirl.circle.fill")
                        }
                        
                        ///Creates the “line.3.crossed.swirl.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "line.3.crossed.swirl.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct diagonal {
        public struct arrow {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.line.horizontal {
    public struct x2 {
        public struct decrease {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "line.horizontal.2.decrease.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "line.horizontal.2.decrease.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "line.horizontal.2.decrease.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "line.horizontal.2.decrease.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "line.horizontal.2.decrease.circle.fill")
                    }
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "line.horizontal.2.decrease.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct decrease {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "line.horizontal.2.decrease.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "line.horizontal.2.decrease.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "line.horizontal.2.decrease.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "line.horizontal.2.decrease.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "line.horizontal.2.decrease.circle.fill")
                    }
                    
                    ///Creates the “line.horizontal.2.decrease.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "line.horizontal.2.decrease.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct star {
        public struct fill {
            public struct line {
                public struct horizontal {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.line.horizontal.x3 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "line.horizontal.3.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "line.horizontal.3.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "line.horizontal.3.circle.fill", configuration: configuration)
            }
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "line.horizontal.3.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “line.horizontal.3.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "line.horizontal.3.circle.fill")
            }
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "line.horizontal.3.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.line.horizontal._3 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "line.horizontal.3.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "line.horizontal.3.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "line.horizontal.3.circle.fill", configuration: configuration)
            }
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "line.horizontal.3.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “line.horizontal.3.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "line.horizontal.3.circle.fill")
            }
            
            ///Creates the “line.horizontal.3.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "line.horizontal.3.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.link {
    public struct badge {
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.list {
    public struct and {
        public struct film {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct star {
        private init() {}
    }
    
    public struct triangle {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.list.bullet {
    public struct rectangle {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.list.number {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.livephoto {
    public struct badge {
        public struct a {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.location {
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.location.fill {
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.lock {
    public struct doc {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lock.doc.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lock.doc.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lock.doc.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lock.doc.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lock.doc.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lock.doc.fill", configuration: configuration)
            }
            
            ///Creates the “lock.doc.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lock.doc.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lock.doc.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lock.doc.fill")
            }
            
            ///Creates the “lock.doc.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lock.doc.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct rectangle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lock.rectangle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lock.rectangle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lock.rectangle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lock.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lock.rectangle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lock.rectangle.fill", configuration: configuration)
            }
            
            ///Creates the “lock.rectangle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lock.rectangle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lock.rectangle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lock.rectangle.fill")
            }
            
            ///Creates the “lock.rectangle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lock.rectangle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct on {
            public struct rectangle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “lock.rectangle.on.rectangle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lock.rectangle.on.rectangle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “lock.rectangle.on.rectangle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lock.rectangle.on.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “lock.rectangle.on.rectangle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lock.rectangle.on.rectangle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “lock.rectangle.on.rectangle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lock.rectangle.on.rectangle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “lock.rectangle.on.rectangle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lock.rectangle.on.rectangle.fill")
                    }
                    
                    ///Creates the “lock.rectangle.on.rectangle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lock.rectangle.on.rectangle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct stack {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lock.rectangle.stack.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lock.rectangle.stack.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lock.rectangle.stack.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lock.rectangle.stack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lock.rectangle.stack.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lock.rectangle.stack.fill", configuration: configuration)
                }
                
                ///Creates the “lock.rectangle.stack.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lock.rectangle.stack.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lock.rectangle.stack.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lock.rectangle.stack.fill")
                }
                
                ///Creates the “lock.rectangle.stack.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lock.rectangle.stack.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lock.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lock.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lock.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lock.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lock.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lock.square.fill", configuration: configuration)
            }
            
            ///Creates the “lock.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lock.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lock.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lock.square.fill")
            }
            
            ///Creates the “lock.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lock.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct stack {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lock.square.stack.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lock.square.stack.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lock.square.stack.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lock.square.stack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lock.square.stack.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lock.square.stack.fill", configuration: configuration)
                }
                
                ///Creates the “lock.square.stack.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lock.square.stack.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lock.square.stack.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lock.square.stack.fill")
                }
                
                ///Creates the “lock.square.stack.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lock.square.stack.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.macwindow {
    public struct badge {
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct on {
        public struct rectangle {
            public struct rtl {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.metronome {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “metronome.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "metronome.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “metronome.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "metronome.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “metronome.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "metronome.fill", configuration: configuration)
        }
        
        ///Creates the “metronome.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "metronome.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “metronome.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "metronome.fill")
        }
        
        ///Creates the “metronome.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "metronome.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.minus {
    public struct diamond {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “minus.diamond.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "minus.diamond.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “minus.diamond.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "minus.diamond.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “minus.diamond.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "minus.diamond.fill", configuration: configuration)
            }
            
            ///Creates the “minus.diamond.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "minus.diamond.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “minus.diamond.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "minus.diamond.fill")
            }
            
            ///Creates the “minus.diamond.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "minus.diamond.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct plus {
        public struct batteryblock {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “minus.plus.batteryblock.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "minus.plus.batteryblock.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “minus.plus.batteryblock.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "minus.plus.batteryblock.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “minus.plus.batteryblock.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "minus.plus.batteryblock.fill", configuration: configuration)
                }
                
                ///Creates the “minus.plus.batteryblock.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "minus.plus.batteryblock.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “minus.plus.batteryblock.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "minus.plus.batteryblock.fill")
                }
                
                ///Creates the “minus.plus.batteryblock.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "minus.plus.batteryblock.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.minus.rectangle {
    public struct portrait {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “minus.rectangle.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "minus.rectangle.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “minus.rectangle.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "minus.rectangle.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “minus.rectangle.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "minus.rectangle.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “minus.rectangle.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "minus.rectangle.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “minus.rectangle.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "minus.rectangle.portrait.fill")
            }
            
            ///Creates the “minus.rectangle.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "minus.rectangle.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.music {
    public struct quarternote {
        public struct x3 {
            private init() {}
        }
        
        public struct _3 {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.music.note {
    public struct house {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “music.note.house.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "music.note.house.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “music.note.house.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "music.note.house.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “music.note.house.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "music.note.house.fill", configuration: configuration)
            }
            
            ///Creates the “music.note.house.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "music.note.house.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “music.note.house.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "music.note.house.fill")
            }
            
            ///Creates the “music.note.house.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "music.note.house.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.paintbrush {
    public struct pointed {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “paintbrush.pointed.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "paintbrush.pointed.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “paintbrush.pointed.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "paintbrush.pointed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “paintbrush.pointed.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "paintbrush.pointed.fill", configuration: configuration)
            }
            
            ///Creates the “paintbrush.pointed.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "paintbrush.pointed.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “paintbrush.pointed.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "paintbrush.pointed.fill")
            }
            
            ///Creates the “paintbrush.pointed.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "paintbrush.pointed.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.paperclip {
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.paperplane {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “paperplane.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "paperplane.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “paperplane.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "paperplane.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “paperplane.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "paperplane.circle.fill", configuration: configuration)
            }
            
            ///Creates the “paperplane.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "paperplane.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “paperplane.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "paperplane.circle.fill")
            }
            
            ///Creates the “paperplane.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "paperplane.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.pencil.tip.crop.circle.badge {
    public struct arrow {
        public struct forward {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.percent {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.person {
    public struct and {
        public struct arrow {
            public struct left {
                public struct and {
                    public struct arrow {
                        public struct right {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.person.x2 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “person.2.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.2.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “person.2.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “person.2.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.2.circle.fill", configuration: configuration)
            }
            
            ///Creates the “person.2.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.2.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “person.2.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.2.circle.fill")
            }
            
            ///Creates the “person.2.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.2.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.person._2 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “person.2.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.2.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “person.2.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “person.2.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.2.circle.fill", configuration: configuration)
            }
            
            ///Creates the “person.2.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.2.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “person.2.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.2.circle.fill")
            }
            
            ///Creates the “person.2.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.2.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.person.crop.circle.badge {
    public struct exclamationmark {
        private init() {}
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.person.crop.circle.fill.badge {
    public struct exclamationmark {
        private init() {}
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.person.crop.square.fill {
    public struct and {
        public struct at {
            public struct rectangle {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.person.fill {
    public struct and {
        public struct arrow {
            public struct left {
                public struct and {
                    public struct arrow {
                        public struct right {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct badge {
        public struct minus {
            private init() {}
        }
        
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct checkmark {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct turn {
        public struct down {
            private init() {}
        }
        
        public struct left {
            private init() {}
        }
        
        public struct right {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct viewfinder {
        private init() {}
    }
    
    public struct xmark {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.phone {
    public struct bubble {
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “phone.bubble.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "phone.bubble.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “phone.bubble.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "phone.bubble.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “phone.bubble.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "phone.bubble.left.fill", configuration: configuration)
                }
                
                ///Creates the “phone.bubble.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "phone.bubble.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “phone.bubble.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "phone.bubble.left.fill")
                }
                
                ///Creates the “phone.bubble.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "phone.bubble.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct connection {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.phone.fill {
    public struct connection {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.photo.on.rectangle {
    public struct angled {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.play {
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “play.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "play.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “play.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "play.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “play.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "play.slash.fill", configuration: configuration)
            }
            
            ///Creates the “play.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "play.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “play.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "play.slash.fill")
            }
            
            ///Creates the “play.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "play.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.plus {
    public struct diamond {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “plus.diamond.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "plus.diamond.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “plus.diamond.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "plus.diamond.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “plus.diamond.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "plus.diamond.fill", configuration: configuration)
            }
            
            ///Creates the “plus.diamond.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "plus.diamond.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “plus.diamond.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "plus.diamond.fill")
            }
            
            ///Creates the “plus.diamond.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "plus.diamond.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct message {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “plus.message.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "plus.message.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “plus.message.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "plus.message.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “plus.message.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "plus.message.fill", configuration: configuration)
            }
            
            ///Creates the “plus.message.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "plus.message.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “plus.message.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "plus.message.fill")
            }
            
            ///Creates the “plus.message.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "plus.message.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.plus.rectangle {
    public struct portrait {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “plus.rectangle.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "plus.rectangle.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “plus.rectangle.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "plus.rectangle.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “plus.rectangle.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "plus.rectangle.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “plus.rectangle.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "plus.rectangle.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “plus.rectangle.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "plus.rectangle.portrait.fill")
            }
            
            ///Creates the “plus.rectangle.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "plus.rectangle.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.plus.rectangle.fill.on {
    public struct folder {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “plus.rectangle.fill.on.folder.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "plus.rectangle.fill.on.folder.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “plus.rectangle.fill.on.folder.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "plus.rectangle.fill.on.folder.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “plus.rectangle.fill.on.folder.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "plus.rectangle.fill.on.folder.fill", configuration: configuration)
            }
            
            ///Creates the “plus.rectangle.fill.on.folder.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "plus.rectangle.fill.on.folder.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “plus.rectangle.fill.on.folder.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "plus.rectangle.fill.on.folder.fill")
            }
            
            ///Creates the “plus.rectangle.fill.on.folder.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "plus.rectangle.fill.on.folder.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.plus.rectangle.on {
    public struct folder {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.printer {
    public struct dotmatrix {
        public struct fill {
            public struct and {
                public struct paper {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “printer.dotmatrix.fill.and.paper.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "printer.dotmatrix.fill.and.paper.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “printer.dotmatrix.fill.and.paper.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "printer.dotmatrix.fill.and.paper.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “printer.dotmatrix.fill.and.paper.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "printer.dotmatrix.fill.and.paper.fill", configuration: configuration)
                        }
                        
                        ///Creates the “printer.dotmatrix.fill.and.paper.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "printer.dotmatrix.fill.and.paper.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “printer.dotmatrix.fill.and.paper.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "printer.dotmatrix.fill.and.paper.fill")
                        }
                        
                        ///Creates the “printer.dotmatrix.fill.and.paper.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "printer.dotmatrix.fill.and.paper.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “printer.dotmatrix.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "printer.dotmatrix.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “printer.dotmatrix.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "printer.dotmatrix.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “printer.dotmatrix.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "printer.dotmatrix.fill", configuration: configuration)
            }
            
            ///Creates the “printer.dotmatrix.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "printer.dotmatrix.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “printer.dotmatrix.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "printer.dotmatrix.fill")
            }
            
            ///Creates the “printer.dotmatrix.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "printer.dotmatrix.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.printer.fill {
    public struct and {
        public struct paper {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "printer.fill.and.paper.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "printer.fill.and.paper.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "printer.fill.and.paper.fill", configuration: configuration)
                }
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "printer.fill.and.paper.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “printer.fill.and.paper.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "printer.fill.and.paper.fill")
                }
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "printer.fill.and.paper.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark {
    public struct ar {
        private init() {}
    }
    
    public struct folder {
        public struct ar {
            private init() {}
        }
        
        public struct fill {
            public struct ar {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “questionmark.folder.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "questionmark.folder.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “questionmark.folder.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "questionmark.folder.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “questionmark.folder.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "questionmark.folder.fill", configuration: configuration)
            }
            
            ///Creates the “questionmark.folder.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "questionmark.folder.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “questionmark.folder.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "questionmark.folder.fill")
            }
            
            ///Creates the “questionmark.folder.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "questionmark.folder.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.circle {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.circle.fill {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.diamond {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.diamond.fill {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.square {
    public struct ar {
        private init() {}
    }
    
    public struct dashed {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.square.fill {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.video {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.video.fill {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.quote.bubble {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.quote.bubble.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.r {
    public struct joystick {
        public struct down {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “r.joystick.down.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.joystick.down.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “r.joystick.down.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.joystick.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “r.joystick.down.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.joystick.down.fill", configuration: configuration)
                }
                
                ///Creates the “r.joystick.down.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.joystick.down.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “r.joystick.down.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.joystick.down.fill")
                }
                
                ///Creates the “r.joystick.down.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.joystick.down.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “r.joystick.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "r.joystick.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “r.joystick.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "r.joystick.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “r.joystick.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "r.joystick.fill", configuration: configuration)
            }
            
            ///Creates the “r.joystick.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "r.joystick.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “r.joystick.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "r.joystick.fill")
            }
            
            ///Creates the “r.joystick.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "r.joystick.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct rectangle {
        public struct roundedbottom {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.rectangle.roundedbottom.fill", configuration: configuration)
                }
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.rectangle.roundedbottom.fill")
                }
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.rectangle.roundedbottom.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.r.square {
    public struct on {
        public struct square {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.r.square.fill {
    public struct on {
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.square.fill.on.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.square.fill.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.square.fill.on.square.fill", configuration: configuration)
                }
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.square.fill.on.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “r.square.fill.on.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.square.fill.on.square.fill")
                }
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.square.fill.on.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle {
    public struct arrowtriangle {
        public struct x2 {
            public struct inward {
                private init() {}
            }
            
            public struct outward {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct inward {
                private init() {}
            }
            
            public struct outward {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct bottomthird {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.bottomthird.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.bottomthird.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.bottomthird.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.bottomthird.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.bottomthird.inset.fill")
                }
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.bottomthird.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct center {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.center.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.center.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.center.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.center.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.center.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.center.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.center.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.center.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.center.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.center.inset.fill")
                }
                
                ///Creates the “rectangle.center.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.center.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct connected {
        public struct to {
            public struct line {
                public struct below {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dashed {
        public struct and {
            public struct paperclip {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct badge {
            public struct record {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct inset {
        public struct bottomleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomleft.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.bottomleft.fill")
                }
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.bottomleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottomright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomright.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.bottomright.fill")
                }
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.bottomright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.inset.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.inset.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.inset.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.inset.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.inset.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.inset.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.inset.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.inset.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.inset.fill")
            }
            
            ///Creates the “rectangle.inset.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.inset.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct topleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.topleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.topleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.topleft.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.topleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.inset.topleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.topleft.fill")
                }
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.topleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.topright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.topright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.topright.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.topright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.inset.topright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.topright.fill")
                }
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.topright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lefthalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.lefthalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.lefthalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.lefthalf.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.lefthalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.lefthalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.lefthalf.fill")
            }
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.lefthalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct inset {
            public struct fill {
                public struct arrow {
                    public struct left {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.lefthalf.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.lefthalf.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.lefthalf.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.lefthalf.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.lefthalf.inset.fill")
                }
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.lefthalf.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct leftthird {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.leftthird.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.leftthird.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.leftthird.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.leftthird.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.leftthird.inset.fill")
                }
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.leftthird.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct portrait {
        public struct arrowtriangle {
            public struct x2 {
                public struct inward {
                    private init() {}
                }
                
                public struct outward {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _2 {
                public struct inward {
                    private init() {}
                }
                
                public struct outward {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.portrait.fill")
            }
            
            ///Creates the “rectangle.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct righthalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.righthalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.righthalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.righthalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.righthalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.righthalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.righthalf.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.righthalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.righthalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.righthalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.righthalf.fill")
            }
            
            ///Creates the “rectangle.righthalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.righthalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct inset {
            public struct fill {
                public struct arrow {
                    public struct right {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.righthalf.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.righthalf.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.righthalf.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.righthalf.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.righthalf.inset.fill")
                }
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.righthalf.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct rightthird {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.rightthird.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.rightthird.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.rightthird.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.rightthird.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.rightthird.inset.fill")
                }
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.rightthird.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct roundedbottom {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.roundedbottom.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.roundedbottom.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.roundedbottom.fill")
            }
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.roundedbottom.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct roundedtop {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.roundedtop.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.roundedtop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.roundedtop.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.roundedtop.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.roundedtop.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.roundedtop.fill")
            }
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.roundedtop.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.slash.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.slash.fill")
            }
            
            ///Creates the “rectangle.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.x3.offgrid {
    public struct bubble {
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.3.offgrid.bubble.left.fill")
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle._3.offgrid {
    public struct bubble {
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.3.offgrid.bubble.left.fill")
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.and {
    public struct pencil {
        public struct and {
            public struct ellipsis {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct text {
        public struct magnifyingglass {
            public struct rtl {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.badge {
    public struct minus {
        private init() {}
    }
    
    public struct plus {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.fill.badge {
    public struct minus {
        private init() {}
    }
    
    public struct plus {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.fill.on.rectangle.fill {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.circle.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.fill.on.rectangle.fill.circle.fill")
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.fill.on.rectangle.fill.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.slash.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.fill.on.rectangle.fill.slash.fill")
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.fill.on.rectangle.fill.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.on.rectangle {
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.split {
    public struct x1x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.1x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.1x2.fill")
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.1x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _1x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.1x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.1x2.fill")
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.1x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct x2x1 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.2x1.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x1.fill")
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x1.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _2x1 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.2x1.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x1.fill")
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x1.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct x2x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.2x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x2.fill")
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _2x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.2x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x2.fill")
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rotate {
    public struct x3d {
        private init() {}
    }
    
    public struct _3d {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.scribble {
    public struct variable {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.shield.lefthalf.fill {
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.sidebar {
    public struct leading {
        private init() {}
    }
    
    public struct squares {
        public struct leading {
            private init() {}
        }
        
        public struct left {
            private init() {}
        }
        
        public struct right {
            private init() {}
        }
        
        public struct trailing {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct trailing {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.signature {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.slider {
    public struct vertical {
        public struct x3 {
            private init() {}
        }
        
        public struct _3 {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.slider.horizontal.below {
    public struct square {
        public struct fill {
            public struct and {
                public struct square {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.sparkles {
    public struct rectangle {
        public struct stack {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "sparkles.rectangle.stack.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "sparkles.rectangle.stack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "sparkles.rectangle.stack.fill", configuration: configuration)
                }
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "sparkles.rectangle.stack.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "sparkles.rectangle.stack.fill")
                }
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "sparkles.rectangle.stack.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            public struct on {
                public struct square {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.speaker {
    public struct wave {
        public struct x1 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.1.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.1.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.1.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.1.fill")
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.1.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _1 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.1.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.1.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.1.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.1.fill")
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.1.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct x2 {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "speaker.wave.2.circle.fill")
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "speaker.wave.2.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.fill")
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "speaker.wave.2.circle.fill")
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "speaker.wave.2.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.fill")
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct x3 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.3.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.3.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.3.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.3.fill")
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.3.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _3 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.3.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.3.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.3.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.3.fill")
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.3.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.speaker.slash {
    public struct circle {
        public struct fill {
            public struct rtl {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “speaker.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “speaker.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “speaker.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “speaker.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “speaker.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.slash.circle.fill")
            }
            
            ///Creates the “speaker.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square {
    public struct x2 {
        public struct stack {
            public struct x3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct stack {
            public struct x3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct x3 {
        public struct stack {
            public struct x3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct middle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct middle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _3 {
        public struct stack {
            public struct x3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct middle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct middle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct bottomhalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.bottomhalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.bottomhalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.bottomhalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.bottomhalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.bottomhalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.bottomhalf.fill", configuration: configuration)
            }
            
            ///Creates the “square.bottomhalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.bottomhalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.bottomhalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.bottomhalf.fill")
            }
            
            ///Creates the “square.bottomhalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.bottomhalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.circle.fill", configuration: configuration)
            }
            
            ///Creates the “square.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.circle.fill")
            }
            
            ///Creates the “square.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct dashed {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.dashed.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.dashed.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.dashed.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.dashed.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.dashed.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.dashed.inset.fill", configuration: configuration)
                }
                
                ///Creates the “square.dashed.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.dashed.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.dashed.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.dashed.inset.fill")
                }
                
                ///Creates the “square.dashed.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.dashed.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.slash.fill", configuration: configuration)
            }
            
            ///Creates the “square.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.slash.fill")
            }
            
            ///Creates the “square.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct tophalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.tophalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.tophalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.tophalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.tophalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.tophalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.tophalf.fill", configuration: configuration)
            }
            
            ///Creates the “square.tophalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.tophalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.tophalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.tophalf.fill")
            }
            
            ///Creates the “square.tophalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.tophalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.and {
    public struct at {
        public struct rectangle {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.fill {
    public struct text {
        public struct grid {
            public struct x1x2 {
                private init() {}
            }
            
            public struct _1x2 {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.grid {
    public struct x3x1 {
        public struct below {
            public struct line {
                public struct grid {
                    public struct x1x2 {
                        private init() {}
                    }
                    
                    public struct _1x2 {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct below {
                public struct line {
                    public struct grid {
                        public struct x1x2 {
                            private init() {}
                        }
                        
                        public struct _1x2 {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct folder {
            public struct badge {
                public struct plus {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct fill {
                public struct badge {
                    public struct plus {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _3x1 {
        public struct below {
            public struct line {
                public struct grid {
                    public struct x1x2 {
                        private init() {}
                    }
                    
                    public struct _1x2 {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct below {
                public struct line {
                    public struct grid {
                        public struct x1x2 {
                            private init() {}
                        }
                        
                        public struct _1x2 {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct folder {
            public struct badge {
                public struct plus {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct fill {
                public struct badge {
                    public struct plus {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct x3x3 {
        public struct bottomleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomleft.fill")
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottommiddle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottommiddle.fill")
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottomright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomright.fill")
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct square {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.grid.3x3.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.grid.3x3.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", configuration: configuration)
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.grid.3x3.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.grid.3x3.fill")
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.grid.3x3.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct middle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middle.fill")
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct middleleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleleft.fill")
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct middleright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleright.fill")
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topleft.fill")
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topmiddle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topmiddle.fill")
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topright.fill")
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _3x3 {
        public struct bottomleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomleft.fill")
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottommiddle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottommiddle.fill")
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottomright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomright.fill")
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct square {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.grid.3x3.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.grid.3x3.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", configuration: configuration)
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.grid.3x3.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.grid.3x3.fill")
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.grid.3x3.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct middle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middle.fill")
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct middleleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleleft.fill")
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct middleright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleright.fill")
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topleft.fill")
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topmiddle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topmiddle.fill")
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topright.fill")
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.on.square {
    public struct dashed {
        private init() {}
    }
    
    public struct squareshape {
        public struct controlhandles {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.split {
    public struct bottomrightquarter {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.split.bottomrightquarter.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.split.bottomrightquarter.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.split.bottomrightquarter.fill", configuration: configuration)
            }
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.split.bottomrightquarter.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.split.bottomrightquarter.fill")
            }
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.split.bottomrightquarter.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct diagonal {
        public struct x2x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", configuration: configuration)
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.split.diagonal.2x2.fill")
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.split.diagonal.2x2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", configuration: configuration)
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.split.diagonal.2x2.fill")
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.split.diagonal.2x2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.split.diagonal.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.split.diagonal.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.split.diagonal.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.split.diagonal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.split.diagonal.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.split.diagonal.fill", configuration: configuration)
            }
            
            ///Creates the “square.split.diagonal.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.split.diagonal.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.split.diagonal.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.split.diagonal.fill")
            }
            
            ///Creates the “square.split.diagonal.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.split.diagonal.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack.x3d {
    public struct forward {
        public struct dottedline {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", configuration: configuration)
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.forward.dottedline.fill")
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack.x3d.down {
    public struct forward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", configuration: configuration)
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.stack.3d.down.forward.fill")
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.stack.3d.down.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack.x3d.up {
    public struct badge {
        public struct a {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", configuration: configuration)
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.up.badge.a.fill")
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack._3d {
    public struct forward {
        public struct dottedline {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", configuration: configuration)
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.forward.dottedline.fill")
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack._3d.down {
    public struct forward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", configuration: configuration)
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.stack.3d.down.forward.fill")
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.stack.3d.down.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack._3d.up {
    public struct badge {
        public struct a {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", configuration: configuration)
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.up.badge.a.fill")
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.star {
    public struct leadinghalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “star.leadinghalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.leadinghalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “star.leadinghalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.leadinghalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “star.leadinghalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.leadinghalf.fill", configuration: configuration)
            }
            
            ///Creates the “star.leadinghalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.leadinghalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “star.leadinghalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.leadinghalf.fill")
            }
            
            ///Creates the “star.leadinghalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.leadinghalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “star.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “star.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “star.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.square.fill", configuration: configuration)
            }
            
            ///Creates the “star.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “star.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.square.fill")
            }
            
            ///Creates the “star.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.staroflife {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “staroflife.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "staroflife.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “staroflife.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "staroflife.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “staroflife.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "staroflife.circle.fill", configuration: configuration)
            }
            
            ///Creates the “staroflife.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "staroflife.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “staroflife.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "staroflife.circle.fill")
            }
            
            ///Creates the “staroflife.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "staroflife.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.sum {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.t.bubble {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.t.bubble.fill {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.tag {
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tag.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tag.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tag.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tag.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tag.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tag.slash.fill", configuration: configuration)
            }
            
            ///Creates the “tag.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tag.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tag.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tag.slash.fill")
            }
            
            ///Creates the “tag.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tag.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.teletype {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “teletype.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "teletype.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “teletype.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "teletype.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “teletype.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "teletype.circle.fill", configuration: configuration)
            }
            
            ///Creates the “teletype.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "teletype.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “teletype.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "teletype.circle.fill")
            }
            
            ///Creates the “teletype.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "teletype.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text {
    public struct and {
        public struct command {
            public struct macwindow {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct below {
        public struct photo {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “text.below.photo.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "text.below.photo.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “text.below.photo.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "text.below.photo.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “text.below.photo.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "text.below.photo.fill", configuration: configuration)
                }
                
                ///Creates the “text.below.photo.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "text.below.photo.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “text.below.photo.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "text.below.photo.fill")
                }
                
                ///Creates the “text.below.photo.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "text.below.photo.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct book {
        public struct closed {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “text.book.closed.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "text.book.closed.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “text.book.closed.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "text.book.closed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “text.book.closed.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "text.book.closed.fill", configuration: configuration)
                }
                
                ///Creates the “text.book.closed.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "text.book.closed.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “text.book.closed.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "text.book.closed.fill")
                }
                
                ///Creates the “text.book.closed.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "text.book.closed.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct magnifyingglass {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct redaction {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.badge.checkmark {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.bubble {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.bubble.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.cursor {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.quote {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.textbox {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.textformat.x123 {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.textformat._123 {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.thermometer.sun {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “thermometer.sun.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "thermometer.sun.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “thermometer.sun.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "thermometer.sun.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “thermometer.sun.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "thermometer.sun.fill", configuration: configuration)
        }
        
        ///Creates the “thermometer.sun.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "thermometer.sun.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “thermometer.sun.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "thermometer.sun.fill")
        }
        
        ///Creates the “thermometer.sun.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "thermometer.sun.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.timer {
    public struct square {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.tram {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tram.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tram.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tram.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tram.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tram.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tram.circle.fill", configuration: configuration)
            }
            
            ///Creates the “tram.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tram.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tram.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tram.circle.fill")
            }
            
            ///Creates the “tram.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tram.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct tunnel {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tram.tunnel.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tram.tunnel.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tram.tunnel.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tram.tunnel.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tram.tunnel.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tram.tunnel.fill", configuration: configuration)
            }
            
            ///Creates the “tram.tunnel.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tram.tunnel.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tram.tunnel.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tram.tunnel.fill")
            }
            
            ///Creates the “tram.tunnel.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tram.tunnel.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.tray {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tray.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tray.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tray.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tray.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tray.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tray.circle.fill", configuration: configuration)
            }
            
            ///Creates the “tray.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tray.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tray.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tray.circle.fill")
            }
            
            ///Creates the “tray.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tray.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.triangle {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “triangle.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "triangle.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “triangle.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "triangle.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “triangle.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "triangle.circle.fill", configuration: configuration)
            }
            
            ///Creates the “triangle.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "triangle.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “triangle.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "triangle.circle.fill")
            }
            
            ///Creates the “triangle.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "triangle.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.tv {
    public struct and {
        public struct hifispeaker {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "tv.and.hifispeaker.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "tv.and.hifispeaker.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "tv.and.hifispeaker.fill", configuration: configuration)
                }
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "tv.and.hifispeaker.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “tv.and.hifispeaker.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "tv.and.hifispeaker.fill")
                }
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "tv.and.hifispeaker.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.video {
    public struct bubble {
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “video.bubble.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "video.bubble.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “video.bubble.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "video.bubble.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “video.bubble.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "video.bubble.left.fill", configuration: configuration)
                }
                
                ///Creates the “video.bubble.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "video.bubble.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “video.bubble.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "video.bubble.left.fill")
                }
                
                ///Creates the “video.bubble.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "video.bubble.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.video.badge {
    public struct checkmark {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.video.fill {
    public struct badge {
        public struct checkmark {
            private init() {}
        }
        
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.waveform.path.ecg {
    public struct rectangle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "waveform.path.ecg.rectangle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "waveform.path.ecg.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "waveform.path.ecg.rectangle.fill", configuration: configuration)
            }
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "waveform.path.ecg.rectangle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "waveform.path.ecg.rectangle.fill")
            }
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "waveform.path.ecg.rectangle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.wrench {
    public struct and {
        public struct screwdriver {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "wrench.and.screwdriver.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "wrench.and.screwdriver.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "wrench.and.screwdriver.fill", configuration: configuration)
                }
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "wrench.and.screwdriver.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “wrench.and.screwdriver.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "wrench.and.screwdriver.fill")
                }
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "wrench.and.screwdriver.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.xmark {
    public struct bin {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “xmark.bin.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "xmark.bin.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “xmark.bin.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "xmark.bin.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “xmark.bin.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "xmark.bin.circle.fill", configuration: configuration)
                }
                
                ///Creates the “xmark.bin.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "xmark.bin.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “xmark.bin.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "xmark.bin.circle.fill")
                }
                
                ///Creates the “xmark.bin.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "xmark.bin.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “xmark.bin.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.bin.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “xmark.bin.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.bin.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “xmark.bin.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.bin.fill", configuration: configuration)
            }
            
            ///Creates the “xmark.bin.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.bin.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “xmark.bin.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.bin.fill")
            }
            
            ///Creates the “xmark.bin.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.bin.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct diamond {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “xmark.diamond.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.diamond.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “xmark.diamond.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.diamond.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “xmark.diamond.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.diamond.fill", configuration: configuration)
            }
            
            ///Creates the “xmark.diamond.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.diamond.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “xmark.diamond.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.diamond.fill")
            }
            
            ///Creates the “xmark.diamond.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.diamond.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.xmark.rectangle {
    public struct portrait {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.rectangle.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.rectangle.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.rectangle.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.rectangle.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.rectangle.portrait.fill")
            }
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.rectangle.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF {
    public struct aqi {
        public struct high {
            private init() {}
        }
        
        public struct low {
            private init() {}
        }
        
        public struct medium {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct brazilianrealsign {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "brazilianrealsign.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "brazilianrealsign.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "brazilianrealsign.circle.fill", configuration: configuration)
                }
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "brazilianrealsign.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “brazilianrealsign.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "brazilianrealsign.circle.fill")
                }
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "brazilianrealsign.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "brazilianrealsign.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "brazilianrealsign.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "brazilianrealsign.square.fill", configuration: configuration)
                }
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "brazilianrealsign.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “brazilianrealsign.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "brazilianrealsign.square.fill")
                }
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "brazilianrealsign.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct character {
        public struct ar {
            private init() {}
        }
        
        public struct book {
            public struct closed {
                public struct ar {
                    private init() {}
                }
                
                public struct fill {
                    public struct ar {
                        private init() {}
                    }
                    
                    public struct he {
                        private init() {}
                    }
                    
                    public struct hi {
                        private init() {}
                    }
                    
                    public struct ja {
                        private init() {}
                    }
                    
                    public struct ko {
                        private init() {}
                    }
                    
                    public struct th {
                        private init() {}
                    }
                    
                    public struct zh {
                        public struct traditional {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “character.book.closed.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "character.book.closed.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “character.book.closed.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "character.book.closed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “character.book.closed.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "character.book.closed.fill", configuration: configuration)
                    }
                    
                    ///Creates the “character.book.closed.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "character.book.closed.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “character.book.closed.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "character.book.closed.fill")
                    }
                    
                    ///Creates the “character.book.closed.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "character.book.closed.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct he {
                    private init() {}
                }
                
                public struct hi {
                    private init() {}
                }
                
                public struct ja {
                    private init() {}
                }
                
                public struct ko {
                    private init() {}
                }
                
                public struct th {
                    private init() {}
                }
                
                public struct zh {
                    public struct traditional {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        public struct ja {
            private init() {}
        }
        
        public struct ko {
            private init() {}
        }
        
        public struct th {
            private init() {}
        }
        
        public struct zh {
            public struct traditional {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct directcurrent {
        private init() {}
    }
    
    public struct torus {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.cart {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cart.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cart.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cart.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cart.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cart.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cart.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cart.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cart.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cart.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cart.circle.fill")
            }
            
            ///Creates the “cart.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cart.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.clock.arrow {
    public struct x2 {
        public struct circlepath {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct circlepath {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.doc.text.below.ecg {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.doc.text.below.ecg.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.exclamationmark {
    public struct applewatch {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.infinity {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “infinity.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "infinity.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “infinity.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "infinity.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “infinity.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "infinity.circle.fill", configuration: configuration)
            }
            
            ///Creates the “infinity.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "infinity.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “infinity.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "infinity.circle.fill")
            }
            
            ///Creates the “infinity.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "infinity.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipad {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipad.homebutton {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipad.homebutton.landscape {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipad.landscape {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.iphone {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct landscape {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.iphone.homebutton {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct landscape {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipodtouch {
    public struct landscape {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.lock {
    public struct applewatch {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.photo {
    public struct tv {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.play {
    public struct tv {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “play.tv.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "play.tv.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “play.tv.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "play.tv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “play.tv.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "play.tv.fill", configuration: configuration)
            }
            
            ///Creates the “play.tv.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "play.tv.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “play.tv.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "play.tv.fill")
            }
            
            ///Creates the “play.tv.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "play.tv.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.rectangle {
    public struct topthird {
        public struct inset {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.rectangle.badge {
    public struct person {
        public struct crop {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.rectangle.fill.badge {
    public struct person {
        public struct crop {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.`repeat` {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “repeat.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “repeat.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “repeat.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.circle.fill", configuration: configuration)
            }
            
            ///Creates the “repeat.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “repeat.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.circle.fill")
            }
            
            ///Creates the “repeat.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.`repeat`.x1 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “repeat.1.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “repeat.1.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", configuration: configuration)
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “repeat.1.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.1.circle.fill")
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.1.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.`repeat`._1 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “repeat.1.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “repeat.1.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", configuration: configuration)
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “repeat.1.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.1.circle.fill")
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.1.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.shield {
    public struct checkerboard {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.shuffle {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “shuffle.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shuffle.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “shuffle.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shuffle.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “shuffle.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shuffle.circle.fill", configuration: configuration)
            }
            
            ///Creates the “shuffle.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shuffle.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “shuffle.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shuffle.circle.fill")
            }
            
            ///Creates the “shuffle.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shuffle.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.text.below.photo {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.text.below.photo.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.text.cursor.zh {
    public struct traditional {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.textbox.zh {
    public struct traditional {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.textformat.size {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct larger {
        public struct ar {
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        public struct ja {
            private init() {}
        }
        
        public struct ko {
            private init() {}
        }
        
        public struct th {
            private init() {}
        }
        
        public struct zh {
            public struct traditional {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct smaller {
        public struct ar {
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        public struct ja {
            private init() {}
        }
        
        public struct ko {
            private init() {}
        }
        
        public struct th {
            private init() {}
        }
        
        public struct zh {
            public struct traditional {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.textformat.`subscript` {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.textformat.superscript {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.tv.and {
    public struct mediabox {
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF {
    public struct airpodsmax {
        private init() {}
    }
    
    public struct homepodmini {
        public struct x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepodmini.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepodmini.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", configuration: configuration)
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepodmini.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.2.fill")
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepodmini.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepodmini.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", configuration: configuration)
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepodmini.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.2.fill")
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “homepodmini.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "homepodmini.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “homepodmini.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "homepodmini.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “homepodmini.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "homepodmini.fill", configuration: configuration)
            }
            
            ///Creates the “homepodmini.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "homepodmini.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “homepodmini.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "homepodmini.fill")
            }
            
            ///Creates the “homepodmini.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "homepodmini.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.applewatch {
    public struct side {
        public struct right {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.character {
    public struct bubble {
        public struct ar {
            private init() {}
        }
        
        public struct fill {
            public struct ar {
                private init() {}
            }
            
            public struct he {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “character.bubble.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "character.bubble.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “character.bubble.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "character.bubble.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “character.bubble.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "character.bubble.fill", configuration: configuration)
            }
            
            ///Creates the “character.bubble.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "character.bubble.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “character.bubble.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "character.bubble.fill")
            }
            
            ///Creates the “character.bubble.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "character.bubble.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct he {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cursor {
        public struct ibeam {
            public struct ar {
                private init() {}
            }
            
            public struct he {
                private init() {}
            }
            
            public struct hi {
                private init() {}
            }
            
            public struct ja {
                private init() {}
            }
            
            public struct ko {
                private init() {}
            }
            
            public struct th {
                private init() {}
            }
            
            public struct zh {
                public struct traditional {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct textbox {
        public struct ar {
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        public struct ja {
            private init() {}
        }
        
        public struct ko {
            private init() {}
        }
        
        public struct th {
            private init() {}
        }
        
        public struct zh {
            public struct traditional {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.hifispeaker.and {
    public struct homepodmini {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.and.homepodmini.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.and.homepodmini.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.and.homepodmini.fill", configuration: configuration)
            }
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.and.homepodmini.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.and.homepodmini.fill")
            }
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.and.homepodmini.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.homepod {
    public struct and {
        public struct homepodmini {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepod.and.homepodmini.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepod.and.homepodmini.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepod.and.homepodmini.fill", configuration: configuration)
                }
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepod.and.homepodmini.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepod.and.homepodmini.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepod.and.homepodmini.fill")
                }
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepod.and.homepodmini.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.rectangle.topthird.inset {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "rectangle.topthird.inset.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "rectangle.topthird.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "rectangle.topthird.inset.fill", configuration: configuration)
        }
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "rectangle.topthird.inset.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “rectangle.topthird.inset.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "rectangle.topthird.inset.fill")
        }
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "rectangle.topthird.inset.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF {
    public struct x123 {
        public struct rectangle {
            public struct ar {
                private init() {}
            }
            
            public struct fill {
                public struct ar {
                    private init() {}
                }
                
                public struct hi {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “123.rectangle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “123.rectangle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “123.rectangle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", configuration: configuration)
                }
                
                ///Creates the “123.rectangle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “123.rectangle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "123.rectangle.fill")
                }
                
                ///Creates the “123.rectangle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "123.rectangle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct hi {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _123 {
        public struct rectangle {
            public struct ar {
                private init() {}
            }
            
            public struct fill {
                public struct ar {
                    private init() {}
                }
                
                public struct hi {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “123.rectangle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “123.rectangle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “123.rectangle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", configuration: configuration)
                }
                
                ///Creates the “123.rectangle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “123.rectangle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "123.rectangle.fill")
                }
                
                ///Creates the “123.rectangle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "123.rectangle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct hi {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct airtag {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airtag.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airtag.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airtag.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airtag.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airtag.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airtag.fill", configuration: configuration)
            }
            
            ///Creates the “airtag.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airtag.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airtag.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airtag.fill")
            }
            
            ///Creates the “airtag.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airtag.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct radiowaves {
            public struct forward {
                public struct fill {
                    public struct rtl {
                        private init() {}
                    }
                    
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "airtag.radiowaves.forward.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "airtag.radiowaves.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "airtag.radiowaves.forward.fill", configuration: configuration)
                    }
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "airtag.radiowaves.forward.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "airtag.radiowaves.forward.fill")
                    }
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "airtag.radiowaves.forward.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct align {
        public struct horizontal {
            public struct center {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.center.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.center.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.center.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.center.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.horizontal.center.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.center.fill")
                    }
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.center.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct left {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.left.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.left.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.left.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.horizontal.left.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.left.fill")
                    }
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.left.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct right {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.right.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.right.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.right.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.horizontal.right.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.right.fill")
                    }
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.right.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct vertical {
            public struct bottom {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.bottom.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.bottom.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.bottom.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.vertical.bottom.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.bottom.fill")
                    }
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.bottom.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct center {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.vertical.center.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.center.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.vertical.center.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.center.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.vertical.center.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.center.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.vertical.center.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.center.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.vertical.center.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.center.fill")
                    }
                    
                    ///Creates the “align.vertical.center.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.center.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct top {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.vertical.top.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.top.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.vertical.top.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.vertical.top.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.top.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.vertical.top.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.top.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.vertical.top.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.top.fill")
                    }
                    
                    ///Creates the “align.vertical.top.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.top.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct allergens {
        private init() {}
    }
    
    public struct alternatingcurrent {
        private init() {}
    }
    
    public struct applepencil {
        private init() {}
    }
    
    public struct appletvremote {
        public struct gen1 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “appletvremote.gen1.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen1.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “appletvremote.gen1.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “appletvremote.gen1.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen1.fill", configuration: configuration)
                }
                
                ///Creates the “appletvremote.gen1.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen1.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “appletvremote.gen1.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen1.fill")
                }
                
                ///Creates the “appletvremote.gen1.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen1.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct gen2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “appletvremote.gen2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “appletvremote.gen2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “appletvremote.gen2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen2.fill", configuration: configuration)
                }
                
                ///Creates the “appletvremote.gen2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “appletvremote.gen2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen2.fill")
                }
                
                ///Creates the “appletvremote.gen2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct gen3 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “appletvremote.gen3.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen3.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “appletvremote.gen3.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “appletvremote.gen3.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen3.fill", configuration: configuration)
                }
                
                ///Creates the “appletvremote.gen3.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen3.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “appletvremote.gen3.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen3.fill")
                }
                
                ///Creates the “appletvremote.gen3.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen3.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct gen4 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “appletvremote.gen4.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen4.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “appletvremote.gen4.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen4.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “appletvremote.gen4.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen4.fill", configuration: configuration)
                }
                
                ///Creates the “appletvremote.gen4.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen4.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “appletvremote.gen4.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen4.fill")
                }
                
                ///Creates the “appletvremote.gen4.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen4.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct beats {
        public struct earphones {
            private init() {}
        }
        
        public struct headphones {
            private init() {}
        }
        
        public struct powerbeats {
            private init() {}
        }
        
        public struct powerbeats3 {
            private init() {}
        }
        
        public struct powerbeatspro {
            public struct chargingcase {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.powerbeatspro.chargingcase.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.powerbeatspro.chargingcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.powerbeatspro.chargingcase.fill", configuration: configuration)
                    }
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.powerbeatspro.chargingcase.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.powerbeatspro.chargingcase.fill")
                    }
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.powerbeatspro.chargingcase.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct left {
                private init() {}
            }
            
            public struct right {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct studiobud {
            public struct left {
                private init() {}
            }
            
            public struct right {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct studiobuds {
            public struct chargingcase {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.studiobuds.chargingcase.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.studiobuds.chargingcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.studiobuds.chargingcase.fill", configuration: configuration)
                    }
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.studiobuds.chargingcase.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.studiobuds.chargingcase.fill")
                    }
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.studiobuds.chargingcase.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct brain {
        public struct head {
            public struct profile {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cable {
        public struct connector {
            public struct horizontal {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cablecar {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cablecar.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cablecar.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cablecar.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cablecar.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cablecar.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cablecar.fill", configuration: configuration)
            }
            
            ///Creates the “cablecar.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cablecar.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cablecar.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cablecar.fill")
            }
            
            ///Creates the “cablecar.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cablecar.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct checklist {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct computermouse {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “computermouse.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "computermouse.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “computermouse.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "computermouse.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “computermouse.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "computermouse.fill", configuration: configuration)
            }
            
            ///Creates the “computermouse.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "computermouse.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “computermouse.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "computermouse.fill")
            }
            
            ///Creates the “computermouse.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "computermouse.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct cup {
        public struct and {
            public struct saucer {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cup.and.saucer.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cup.and.saucer.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cup.and.saucer.fill", configuration: configuration)
                    }
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cup.and.saucer.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “cup.and.saucer.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cup.and.saucer.fill")
                    }
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cup.and.saucer.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dice {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dice.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dice.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dice.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dice.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dice.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dice.fill", configuration: configuration)
            }
            
            ///Creates the “dice.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dice.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dice.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dice.fill")
            }
            
            ///Creates the “dice.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dice.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct digitalcrown {
        public struct arrow {
            public struct clockwise {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.clockwise.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.clockwise.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.clockwise.fill", configuration: configuration)
                    }
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.clockwise.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.arrow.clockwise.fill")
                    }
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.arrow.clockwise.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct counterclockwise {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.counterclockwise.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.counterclockwise.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.counterclockwise.fill", configuration: configuration)
                    }
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.counterclockwise.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.arrow.counterclockwise.fill")
                    }
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.arrow.counterclockwise.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct horizontal {
            public struct arrow {
                public struct clockwise {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.clockwise.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.clockwise.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.clockwise.fill", configuration: configuration)
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.clockwise.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.arrow.clockwise.fill")
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.arrow.clockwise.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct counterclockwise {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", configuration: configuration)
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.arrow.counterclockwise.fill")
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct press {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.horizontal.press.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.horizontal.press.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.horizontal.press.fill", configuration: configuration)
                    }
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.horizontal.press.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.press.fill")
                    }
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.press.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct press {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “digitalcrown.press.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "digitalcrown.press.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “digitalcrown.press.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "digitalcrown.press.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “digitalcrown.press.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "digitalcrown.press.fill", configuration: configuration)
                }
                
                ///Creates the “digitalcrown.press.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "digitalcrown.press.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “digitalcrown.press.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "digitalcrown.press.fill")
                }
                
                ///Creates the “digitalcrown.press.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "digitalcrown.press.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct earbuds {
        public struct `case` {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “earbuds.case.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "earbuds.case.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “earbuds.case.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "earbuds.case.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “earbuds.case.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "earbuds.case.fill", configuration: configuration)
                }
                
                ///Creates the “earbuds.case.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "earbuds.case.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “earbuds.case.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "earbuds.case.fill")
                }
                
                ///Creates the “earbuds.case.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "earbuds.case.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct facemask {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “facemask.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "facemask.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “facemask.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "facemask.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “facemask.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "facemask.fill", configuration: configuration)
            }
            
            ///Creates the “facemask.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "facemask.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “facemask.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "facemask.fill")
            }
            
            ///Creates the “facemask.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "facemask.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fanblades {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “fanblades.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fanblades.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “fanblades.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fanblades.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “fanblades.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fanblades.fill", configuration: configuration)
            }
            
            ///Creates the “fanblades.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fanblades.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “fanblades.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fanblades.fill")
            }
            
            ///Creates the “fanblades.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fanblades.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct ferry {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “ferry.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ferry.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “ferry.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ferry.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “ferry.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ferry.fill", configuration: configuration)
            }
            
            ///Creates the “ferry.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ferry.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “ferry.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ferry.fill")
            }
            
            ///Creates the “ferry.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ferry.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fibrechannel {
        private init() {}
    }
    
    public struct fork {
        public struct knife {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "fork.knife.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "fork.knife.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "fork.knife.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "fork.knife.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “fork.knife.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "fork.knife.circle.fill")
                    }
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "fork.knife.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct fuelpump {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “fuelpump.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fuelpump.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “fuelpump.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fuelpump.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “fuelpump.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fuelpump.circle.fill", configuration: configuration)
                }
                
                ///Creates the “fuelpump.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fuelpump.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “fuelpump.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fuelpump.circle.fill")
                }
                
                ///Creates the “fuelpump.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fuelpump.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “fuelpump.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fuelpump.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “fuelpump.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fuelpump.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “fuelpump.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fuelpump.fill", configuration: configuration)
            }
            
            ///Creates the “fuelpump.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fuelpump.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “fuelpump.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fuelpump.fill")
            }
            
            ///Creates the “fuelpump.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fuelpump.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct hearingdevice {
        public struct ear {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct humidity {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “humidity.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "humidity.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “humidity.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "humidity.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “humidity.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "humidity.fill", configuration: configuration)
            }
            
            ///Creates the “humidity.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "humidity.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “humidity.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "humidity.fill")
            }
            
            ///Creates the “humidity.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "humidity.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct ivfluid {
        public struct bag {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “ivfluid.bag.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "ivfluid.bag.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “ivfluid.bag.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "ivfluid.bag.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “ivfluid.bag.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "ivfluid.bag.fill", configuration: configuration)
                }
                
                ///Creates the “ivfluid.bag.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "ivfluid.bag.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “ivfluid.bag.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "ivfluid.bag.fill")
                }
                
                ///Creates the “ivfluid.bag.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "ivfluid.bag.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lanyardcard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lanyardcard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lanyardcard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lanyardcard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lanyardcard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lanyardcard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lanyardcard.fill", configuration: configuration)
            }
            
            ///Creates the “lanyardcard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lanyardcard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lanyardcard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lanyardcard.fill")
            }
            
            ///Creates the “lanyardcard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lanyardcard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct lines {
        public struct measurement {
            public struct horizontal {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct logo {
        public struct playstation {
            private init() {}
        }
        
        public struct xbox {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct magazine {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “magazine.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "magazine.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “magazine.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "magazine.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “magazine.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "magazine.fill", configuration: configuration)
            }
            
            ///Creates the “magazine.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "magazine.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “magazine.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "magazine.fill")
            }
            
            ///Creates the “magazine.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "magazine.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct magicmouse {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “magicmouse.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "magicmouse.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “magicmouse.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "magicmouse.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “magicmouse.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "magicmouse.fill", configuration: configuration)
            }
            
            ///Creates the “magicmouse.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "magicmouse.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “magicmouse.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "magicmouse.fill")
            }
            
            ///Creates the “magicmouse.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "magicmouse.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct magsafe {
        public struct batterypack {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “magsafe.batterypack.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "magsafe.batterypack.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “magsafe.batterypack.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "magsafe.batterypack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “magsafe.batterypack.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "magsafe.batterypack.fill", configuration: configuration)
                }
                
                ///Creates the “magsafe.batterypack.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "magsafe.batterypack.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “magsafe.batterypack.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "magsafe.batterypack.fill")
                }
                
                ///Creates the “magsafe.batterypack.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "magsafe.batterypack.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct mediastick {
        private init() {}
    }
    
    public struct menucard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “menucard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "menucard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “menucard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "menucard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “menucard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "menucard.fill", configuration: configuration)
            }
            
            ///Creates the “menucard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "menucard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “menucard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "menucard.fill")
            }
            
            ///Creates the “menucard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "menucard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct parentheses {
        private init() {}
    }
    
    public struct parkingsign {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “parkingsign.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "parkingsign.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “parkingsign.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "parkingsign.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “parkingsign.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "parkingsign.circle.fill", configuration: configuration)
                }
                
                ///Creates the “parkingsign.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "parkingsign.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “parkingsign.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "parkingsign.circle.fill")
                }
                
                ///Creates the “parkingsign.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "parkingsign.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct pawprint {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “pawprint.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "pawprint.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “pawprint.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "pawprint.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “pawprint.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "pawprint.circle.fill", configuration: configuration)
                }
                
                ///Creates the “pawprint.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "pawprint.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “pawprint.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "pawprint.circle.fill")
                }
                
                ///Creates the “pawprint.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "pawprint.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pawprint.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pawprint.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pawprint.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pawprint.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pawprint.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pawprint.fill", configuration: configuration)
            }
            
            ///Creates the “pawprint.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pawprint.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pawprint.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pawprint.fill")
            }
            
            ///Creates the “pawprint.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pawprint.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct peacesign {
        private init() {}
    }
    
    public struct pentagon {
        public struct bottomhalf {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pentagon.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pentagon.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pentagon.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pentagon.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pentagon.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pentagon.fill", configuration: configuration)
            }
            
            ///Creates the “pentagon.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pentagon.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pentagon.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pentagon.fill")
            }
            
            ///Creates the “pentagon.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pentagon.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct lefthalf {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct righthalf {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct tophalf {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct platter {
        public struct x2 {
            public struct filled {
                public struct ipad {
                    public struct landscape {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                public struct iphone {
                    public struct landscape {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct filled {
                public struct ipad {
                    public struct landscape {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                public struct iphone {
                    public struct landscape {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct bottom {
            public struct applewatch {
                public struct `case` {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct filled {
            public struct bottom {
                public struct applewatch {
                    public struct `case` {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct top {
                public struct applewatch {
                    public struct `case` {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct top {
            public struct applewatch {
                public struct `case` {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct powerplug {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “powerplug.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "powerplug.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “powerplug.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "powerplug.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “powerplug.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "powerplug.fill", configuration: configuration)
            }
            
            ///Creates the “powerplug.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "powerplug.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “powerplug.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "powerplug.fill")
            }
            
            ///Creates the “powerplug.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "powerplug.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct scooter {
        private init() {}
    }
    
    public struct screwdriver {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “screwdriver.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "screwdriver.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “screwdriver.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "screwdriver.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “screwdriver.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "screwdriver.fill", configuration: configuration)
            }
            
            ///Creates the “screwdriver.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "screwdriver.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “screwdriver.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "screwdriver.fill")
            }
            
            ///Creates the “screwdriver.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "screwdriver.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct sensor {
        public struct tag {
            public struct radiowaves {
                public struct forward {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "sensor.tag.radiowaves.forward.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "sensor.tag.radiowaves.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "sensor.tag.radiowaves.forward.fill", configuration: configuration)
                        }
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "sensor.tag.radiowaves.forward.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "sensor.tag.radiowaves.forward.fill")
                        }
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "sensor.tag.radiowaves.forward.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct shareplay {
        public struct slash {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct snowflake {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “snowflake.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "snowflake.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “snowflake.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "snowflake.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “snowflake.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "snowflake.circle.fill", configuration: configuration)
                }
                
                ///Creates the “snowflake.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "snowflake.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “snowflake.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "snowflake.circle.fill")
                }
                
                ///Creates the “snowflake.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "snowflake.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct suitcase {
        public struct cart {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “suitcase.cart.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "suitcase.cart.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “suitcase.cart.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "suitcase.cart.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “suitcase.cart.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "suitcase.cart.fill", configuration: configuration)
                }
                
                ///Creates the “suitcase.cart.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "suitcase.cart.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “suitcase.cart.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "suitcase.cart.fill")
                }
                
                ///Creates the “suitcase.cart.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "suitcase.cart.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “suitcase.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "suitcase.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “suitcase.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "suitcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “suitcase.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "suitcase.fill", configuration: configuration)
            }
            
            ///Creates the “suitcase.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "suitcase.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “suitcase.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "suitcase.fill")
            }
            
            ///Creates the “suitcase.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "suitcase.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct takeoutbag {
        public struct and {
            public struct cup {
                public struct and {
                    public struct straw {
                        public struct fill {
                            private init() {}
                            #if os(macOS)
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image with the accessibility description you specify.
                            ///
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "takeoutbag.and.cup.and.straw.fill", accessibilityDescription: accessibilityDescription)
                            }
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image with the variable value you specify.
                            ///
                            ///The value parameter is valid for symbols that support variable rendering.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(macOS 13.0, *)
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "takeoutbag.and.cup.and.straw.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                            }
                            
                            #endif
                            
                            #if os(iOS) || os(tvOS) || os(watchOS)
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image object with the specified configuration.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(macOS, unavailable)
                            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "takeoutbag.and.cup.and.straw.fill", configuration: configuration)
                            }
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image object with the configuration and variable value you specify.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            @available(macOS, unavailable)
                            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "takeoutbag.and.cup.and.straw.fill", variableValue: variableValue, configuration: configuration)
                            }
                            
                            #endif
                            
                            #if canImport(SwiftUI)
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image.
                            ///
                            ///This initializer creates an image using a system-provided symbol.
                            public static func swiftUIImage() -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "takeoutbag.and.cup.and.straw.fill")
                            }
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image with a variable value.
                            ///
                            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                            ///
                            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "takeoutbag.and.cup.and.straw.fill", variableValue: variableValue)
                            }
                            
                            #endif
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct testtube {
        public struct x2 {
            private init() {}
        }
        
        public struct _2 {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct theatermasks {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “theatermasks.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "theatermasks.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “theatermasks.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "theatermasks.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “theatermasks.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "theatermasks.circle.fill", configuration: configuration)
                }
                
                ///Creates the “theatermasks.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "theatermasks.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “theatermasks.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "theatermasks.circle.fill")
                }
                
                ///Creates the “theatermasks.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "theatermasks.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “theatermasks.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "theatermasks.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “theatermasks.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "theatermasks.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “theatermasks.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "theatermasks.fill", configuration: configuration)
            }
            
            ///Creates the “theatermasks.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "theatermasks.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “theatermasks.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "theatermasks.fill")
            }
            
            ///Creates the “theatermasks.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "theatermasks.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct train {
        public struct side {
            public struct front {
                public struct car {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct middle {
                public struct car {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct rear {
                public struct car {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct trapezoid {
        public struct and {
            public struct line {
                public struct horizontal {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.horizontal.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.horizontal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.horizontal.fill", configuration: configuration)
                        }
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.horizontal.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "trapezoid.and.line.horizontal.fill")
                        }
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "trapezoid.and.line.horizontal.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct vertical {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.vertical.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.vertical.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.vertical.fill", configuration: configuration)
                        }
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.vertical.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "trapezoid.and.line.vertical.fill")
                        }
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "trapezoid.and.line.vertical.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tshirt {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tshirt.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tshirt.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tshirt.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tshirt.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tshirt.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tshirt.fill", configuration: configuration)
            }
            
            ///Creates the “tshirt.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tshirt.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tshirt.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tshirt.fill")
            }
            
            ///Creates the “tshirt.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tshirt.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct watchface {
        public struct applewatch {
            public struct `case` {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.x1.magnifyingglass {
    public struct hi {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF._1.magnifyingglass {
    public struct hi {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airplane {
    public struct arrival {
        private init() {}
    }
    
    public struct departure {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airplayaudio {
    public struct badge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airplayaudio.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplayaudio.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airplayaudio.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplayaudio.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airplayaudio.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplayaudio.circle.fill", configuration: configuration)
            }
            
            ///Creates the “airplayaudio.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplayaudio.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airplayaudio.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplayaudio.circle.fill")
            }
            
            ///Creates the “airplayaudio.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplayaudio.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airplayvideo {
    public struct badge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airplayvideo.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplayvideo.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airplayvideo.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplayvideo.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airplayvideo.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplayvideo.circle.fill", configuration: configuration)
            }
            
            ///Creates the “airplayvideo.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplayvideo.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airplayvideo.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplayvideo.circle.fill")
            }
            
            ///Creates the “airplayvideo.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplayvideo.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airpods {
    public struct chargingcase {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airpods.chargingcase.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airpods.chargingcase.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airpods.chargingcase.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airpods.chargingcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airpods.chargingcase.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airpods.chargingcase.fill", configuration: configuration)
            }
            
            ///Creates the “airpods.chargingcase.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airpods.chargingcase.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airpods.chargingcase.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airpods.chargingcase.fill")
            }
            
            ///Creates the “airpods.chargingcase.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airpods.chargingcase.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct wireless {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "airpods.chargingcase.wireless.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "airpods.chargingcase.wireless.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "airpods.chargingcase.wireless.fill", configuration: configuration)
                }
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "airpods.chargingcase.wireless.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "airpods.chargingcase.wireless.fill")
                }
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "airpods.chargingcase.wireless.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airpodspro {
    public struct chargingcase {
        public struct wireless {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "airpodspro.chargingcase.wireless.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "airpodspro.chargingcase.wireless.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "airpodspro.chargingcase.wireless.fill", configuration: configuration)
                }
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "airpodspro.chargingcase.wireless.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "airpodspro.chargingcase.wireless.fill")
                }
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "airpodspro.chargingcase.wireless.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.antenna.radiowaves.left.and.right {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "antenna.radiowaves.left.and.right.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "antenna.radiowaves.left.and.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "antenna.radiowaves.left.and.right.circle.fill", configuration: configuration)
            }
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "antenna.radiowaves.left.and.right.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "antenna.radiowaves.left.and.right.circle.fill")
            }
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "antenna.radiowaves.left.and.right.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.app {
    public struct connected {
        public struct to {
            public struct app {
                public struct below {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "app.connected.to.app.below.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "app.connected.to.app.below.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "app.connected.to.app.below.fill", configuration: configuration)
                        }
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "app.connected.to.app.below.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “app.connected.to.app.below.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "app.connected.to.app.below.fill")
                        }
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "app.connected.to.app.below.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dashed {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.app.badge {
    public struct checkmark {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “app.badge.checkmark.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "app.badge.checkmark.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “app.badge.checkmark.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "app.badge.checkmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “app.badge.checkmark.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "app.badge.checkmark.fill", configuration: configuration)
            }
            
            ///Creates the “app.badge.checkmark.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "app.badge.checkmark.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “app.badge.checkmark.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "app.badge.checkmark.fill")
            }
            
            ///Creates the “app.badge.checkmark.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "app.badge.checkmark.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.applewatch {
    public struct `case` {
        public struct inset {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arkit {
    public struct badge {
        public struct xmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.backward {
    public struct to {
        public struct line {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.backward.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.backward.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.backward.to.line.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.backward.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.backward.to.line.circle.fill")
                    }
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.backward.to.line.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.down.to.line {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.to.line.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.to.line.circle.fill")
            }
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.to.line.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compact {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.forward {
    public struct to {
        public struct line {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.forward.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.forward.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.forward.to.line.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.forward.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.forward.to.line.circle.fill")
                    }
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.forward.to.line.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.left.to.line {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.left.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.left.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.left.to.line.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.left.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.left.to.line.circle.fill")
            }
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.left.to.line.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compact {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.right.to.line {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.right.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.right.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.right.to.line.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.right.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.right.to.line.circle.fill")
            }
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.right.to.line.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compact {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.up.and.down.righttriangle.up.righttriangle.down {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", configuration: configuration)
        }
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill")
        }
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.up.to.line {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.to.line.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.to.line.circle.fill")
            }
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.to.line.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compact {
        private init() {}
    }
    
}

