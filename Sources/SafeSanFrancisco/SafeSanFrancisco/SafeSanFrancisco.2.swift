#if os(macOS)
import AppKit
#endif
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#endif
#if canImport(SwiftUI)
import SwiftUI
#endif
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.printer.fill {
    public struct and {
        public struct paper {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "printer.fill.and.paper.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "printer.fill.and.paper.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "printer.fill.and.paper.fill", configuration: configuration)
                }
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "printer.fill.and.paper.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “printer.fill.and.paper.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "printer.fill.and.paper.fill")
                }
                
                ///Creates the “printer.fill.and.paper.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "printer.fill.and.paper.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark {
    public struct ar {
        private init() {}
    }
    
    public struct folder {
        public struct ar {
            private init() {}
        }
        
        public struct fill {
            public struct ar {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “questionmark.folder.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "questionmark.folder.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “questionmark.folder.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "questionmark.folder.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “questionmark.folder.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "questionmark.folder.fill", configuration: configuration)
            }
            
            ///Creates the “questionmark.folder.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "questionmark.folder.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “questionmark.folder.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "questionmark.folder.fill")
            }
            
            ///Creates the “questionmark.folder.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "questionmark.folder.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.circle {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.circle.fill {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.diamond {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.diamond.fill {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.square {
    public struct ar {
        private init() {}
    }
    
    public struct dashed {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.square.fill {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.video {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.questionmark.video.fill {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.quote.bubble {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.quote.bubble.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.r {
    public struct joystick {
        public struct down {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “r.joystick.down.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.joystick.down.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “r.joystick.down.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.joystick.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “r.joystick.down.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.joystick.down.fill", configuration: configuration)
                }
                
                ///Creates the “r.joystick.down.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.joystick.down.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “r.joystick.down.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.joystick.down.fill")
                }
                
                ///Creates the “r.joystick.down.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.joystick.down.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “r.joystick.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "r.joystick.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “r.joystick.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "r.joystick.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “r.joystick.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "r.joystick.fill", configuration: configuration)
            }
            
            ///Creates the “r.joystick.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "r.joystick.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “r.joystick.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "r.joystick.fill")
            }
            
            ///Creates the “r.joystick.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "r.joystick.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct rectangle {
        public struct roundedbottom {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.rectangle.roundedbottom.fill", configuration: configuration)
                }
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.rectangle.roundedbottom.fill")
                }
                
                ///Creates the “r.rectangle.roundedbottom.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.rectangle.roundedbottom.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.r.square {
    public struct on {
        public struct square {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.r.square.fill {
    public struct on {
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.square.fill.on.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "r.square.fill.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.square.fill.on.square.fill", configuration: configuration)
                }
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "r.square.fill.on.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “r.square.fill.on.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.square.fill.on.square.fill")
                }
                
                ///Creates the “r.square.fill.on.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "r.square.fill.on.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle {
    public struct arrowtriangle {
        public struct x2 {
            public struct inward {
                private init() {}
            }
            
            public struct outward {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct inward {
                private init() {}
            }
            
            public struct outward {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct bottomthird {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.bottomthird.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.bottomthird.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.bottomthird.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.bottomthird.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.bottomthird.inset.fill")
                }
                
                ///Creates the “rectangle.bottomthird.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.bottomthird.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct center {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.center.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.center.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.center.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.center.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.center.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.center.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.center.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.center.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.center.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.center.inset.fill")
                }
                
                ///Creates the “rectangle.center.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.center.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct connected {
        public struct to {
            public struct line {
                public struct below {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dashed {
        public struct and {
            public struct paperclip {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct badge {
            public struct record {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct inset {
        public struct bottomleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomleft.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.bottomleft.fill")
                }
                
                ///Creates the “rectangle.inset.bottomleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.bottomleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottomright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomright.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.bottomright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.bottomright.fill")
                }
                
                ///Creates the “rectangle.inset.bottomright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.bottomright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.inset.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.inset.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.inset.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.inset.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.inset.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.inset.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.inset.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.inset.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.inset.fill")
            }
            
            ///Creates the “rectangle.inset.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.inset.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct topleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.topleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.topleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.topleft.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.topleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.inset.topleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.topleft.fill")
                }
                
                ///Creates the “rectangle.inset.topleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.topleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.topright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.inset.topright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.topright.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.inset.topright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.inset.topright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.topright.fill")
                }
                
                ///Creates the “rectangle.inset.topright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.inset.topright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lefthalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.lefthalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.lefthalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.lefthalf.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.lefthalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.lefthalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.lefthalf.fill")
            }
            
            ///Creates the “rectangle.lefthalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.lefthalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct inset {
            public struct fill {
                public struct arrow {
                    public struct left {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.lefthalf.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.lefthalf.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.lefthalf.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.lefthalf.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.lefthalf.inset.fill")
                }
                
                ///Creates the “rectangle.lefthalf.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.lefthalf.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct leftthird {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.leftthird.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.leftthird.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.leftthird.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.leftthird.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.leftthird.inset.fill")
                }
                
                ///Creates the “rectangle.leftthird.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.leftthird.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct portrait {
        public struct arrowtriangle {
            public struct x2 {
                public struct inward {
                    private init() {}
                }
                
                public struct outward {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _2 {
                public struct inward {
                    private init() {}
                }
                
                public struct outward {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.portrait.fill")
            }
            
            ///Creates the “rectangle.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct righthalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.righthalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.righthalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.righthalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.righthalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.righthalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.righthalf.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.righthalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.righthalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.righthalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.righthalf.fill")
            }
            
            ///Creates the “rectangle.righthalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.righthalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct inset {
            public struct fill {
                public struct arrow {
                    public struct right {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.righthalf.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.righthalf.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.righthalf.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.righthalf.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.righthalf.inset.fill")
                }
                
                ///Creates the “rectangle.righthalf.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.righthalf.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct rightthird {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.rightthird.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.rightthird.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.rightthird.inset.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.rightthird.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.rightthird.inset.fill")
                }
                
                ///Creates the “rectangle.rightthird.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.rightthird.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct roundedbottom {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.roundedbottom.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.roundedbottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.roundedbottom.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.roundedbottom.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.roundedbottom.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.roundedbottom.fill")
            }
            
            ///Creates the “rectangle.roundedbottom.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.roundedbottom.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct roundedtop {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.roundedtop.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.roundedtop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.roundedtop.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.roundedtop.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.roundedtop.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.roundedtop.fill")
            }
            
            ///Creates the “rectangle.roundedtop.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.roundedtop.fill", variableValue: variableValue)
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            public struct square {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.slash.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.slash.fill")
            }
            
            ///Creates the “rectangle.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.x3.offgrid {
    public struct bubble {
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.3.offgrid.bubble.left.fill")
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle._3.offgrid {
    public struct bubble {
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", configuration: configuration)
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.3.offgrid.bubble.left.fill")
                }
                
                ///Creates the “rectangle.3.offgrid.bubble.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "rectangle.3.offgrid.bubble.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.and {
    public struct pencil {
        public struct and {
            public struct ellipsis {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct text {
        public struct magnifyingglass {
            public struct rtl {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.badge {
    public struct minus {
        private init() {}
    }
    
    public struct plus {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.fill.badge {
    public struct minus {
        private init() {}
    }
    
    public struct plus {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.fill.on.rectangle.fill {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.circle.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.fill.on.rectangle.fill.circle.fill")
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.fill.on.rectangle.fill.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.slash.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.fill.on.rectangle.fill.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.fill.on.rectangle.fill.slash.fill")
            }
            
            ///Creates the “rectangle.fill.on.rectangle.fill.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.fill.on.rectangle.fill.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.on.rectangle {
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rectangle.split {
    public struct x1x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.1x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.1x2.fill")
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.1x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _1x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.1x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.1x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.1x2.fill")
            }
            
            ///Creates the “rectangle.split.1x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.1x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct x2x1 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.2x1.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x1.fill")
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x1.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _2x1 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x1.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.2x1.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x1.fill")
            }
            
            ///Creates the “rectangle.split.2x1.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x1.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct x2x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.2x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x2.fill")
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _2x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.split.2x2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.split.2x2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x2.fill")
            }
            
            ///Creates the “rectangle.split.2x2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.split.2x2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.rotate {
    public struct x3d {
        private init() {}
    }
    
    public struct _3d {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.scribble {
    public struct variable {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.shield.lefthalf.fill {
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.sidebar {
    public struct leading {
        private init() {}
    }
    
    public struct squares {
        public struct leading {
            private init() {}
        }
        
        public struct left {
            private init() {}
        }
        
        public struct right {
            private init() {}
        }
        
        public struct trailing {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct trailing {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.signature {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.slider {
    public struct vertical {
        public struct x3 {
            private init() {}
        }
        
        public struct _3 {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.slider.horizontal.below {
    public struct square {
        public struct fill {
            public struct and {
                public struct square {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.sparkles {
    public struct rectangle {
        public struct stack {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "sparkles.rectangle.stack.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "sparkles.rectangle.stack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "sparkles.rectangle.stack.fill", configuration: configuration)
                }
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "sparkles.rectangle.stack.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "sparkles.rectangle.stack.fill")
                }
                
                ///Creates the “sparkles.rectangle.stack.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "sparkles.rectangle.stack.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            public struct on {
                public struct square {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.speaker {
    public struct wave {
        public struct x1 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.1.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.1.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.1.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.1.fill")
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.1.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _1 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.1.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.1.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.1.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.1.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.1.fill")
                }
                
                ///Creates the “speaker.wave.1.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.1.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct x2 {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "speaker.wave.2.circle.fill")
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "speaker.wave.2.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.fill")
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "speaker.wave.2.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "speaker.wave.2.circle.fill")
                    }
                    
                    ///Creates the “speaker.wave.2.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "speaker.wave.2.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.fill")
                }
                
                ///Creates the “speaker.wave.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct x3 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.3.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.3.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.3.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.3.fill")
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.3.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _3 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.3.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.3.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.3.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.3.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.3.fill")
                }
                
                ///Creates the “speaker.wave.3.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.3.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.speaker.slash {
    public struct circle {
        public struct fill {
            public struct rtl {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “speaker.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “speaker.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “speaker.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “speaker.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “speaker.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.slash.circle.fill")
            }
            
            ///Creates the “speaker.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square {
    public struct x2 {
        public struct stack {
            public struct x3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct stack {
            public struct x3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.2.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.2.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.2.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct x3 {
        public struct stack {
            public struct x3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct middle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct middle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _3 {
        public struct stack {
            public struct x3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct middle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct _3d {
                public struct bottom {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.bottom.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.bottom.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct middle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.middle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.middle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.middle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct top {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", configuration: configuration)
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "square.3.stack.3d.top.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill")
                        }
                        
                        ///Creates the “square.3.stack.3d.top.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "square.3.stack.3d.top.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct bottomhalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.bottomhalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.bottomhalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.bottomhalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.bottomhalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.bottomhalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.bottomhalf.fill", configuration: configuration)
            }
            
            ///Creates the “square.bottomhalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.bottomhalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.bottomhalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.bottomhalf.fill")
            }
            
            ///Creates the “square.bottomhalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.bottomhalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.circle.fill", configuration: configuration)
            }
            
            ///Creates the “square.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.circle.fill")
            }
            
            ///Creates the “square.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct dashed {
        public struct inset {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.dashed.inset.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.dashed.inset.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.dashed.inset.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.dashed.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.dashed.inset.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.dashed.inset.fill", configuration: configuration)
                }
                
                ///Creates the “square.dashed.inset.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.dashed.inset.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.dashed.inset.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.dashed.inset.fill")
                }
                
                ///Creates the “square.dashed.inset.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.dashed.inset.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.slash.fill", configuration: configuration)
            }
            
            ///Creates the “square.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.slash.fill")
            }
            
            ///Creates the “square.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct tophalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.tophalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.tophalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.tophalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.tophalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.tophalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.tophalf.fill", configuration: configuration)
            }
            
            ///Creates the “square.tophalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.tophalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.tophalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.tophalf.fill")
            }
            
            ///Creates the “square.tophalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.tophalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.and {
    public struct at {
        public struct rectangle {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.fill {
    public struct text {
        public struct grid {
            public struct x1x2 {
                private init() {}
            }
            
            public struct _1x2 {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.grid {
    public struct x3x1 {
        public struct below {
            public struct line {
                public struct grid {
                    public struct x1x2 {
                        private init() {}
                    }
                    
                    public struct _1x2 {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct below {
                public struct line {
                    public struct grid {
                        public struct x1x2 {
                            private init() {}
                        }
                        
                        public struct _1x2 {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct folder {
            public struct badge {
                public struct plus {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct fill {
                public struct badge {
                    public struct plus {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _3x1 {
        public struct below {
            public struct line {
                public struct grid {
                    public struct x1x2 {
                        private init() {}
                    }
                    
                    public struct _1x2 {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct below {
                public struct line {
                    public struct grid {
                        public struct x1x2 {
                            private init() {}
                        }
                        
                        public struct _1x2 {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct folder {
            public struct badge {
                public struct plus {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct fill {
                public struct badge {
                    public struct plus {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct x3x3 {
        public struct bottomleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomleft.fill")
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottommiddle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottommiddle.fill")
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottomright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomright.fill")
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct square {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.grid.3x3.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.grid.3x3.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", configuration: configuration)
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.grid.3x3.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.grid.3x3.fill")
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.grid.3x3.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct middle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middle.fill")
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct middleleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleleft.fill")
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct middleright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleright.fill")
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topleft.fill")
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topmiddle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topmiddle.fill")
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topright.fill")
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _3x3 {
        public struct bottomleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomleft.fill")
                }
                
                ///Creates the “square.grid.3x3.bottomleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottommiddle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottommiddle.fill")
                }
                
                ///Creates the “square.grid.3x3.bottommiddle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottommiddle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct bottomright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomright.fill")
                }
                
                ///Creates the “square.grid.3x3.bottomright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.bottomright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct square {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.grid.3x3.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.grid.3x3.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", configuration: configuration)
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.grid.3x3.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.grid.3x3.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.grid.3x3.fill")
            }
            
            ///Creates the “square.grid.3x3.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.grid.3x3.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct middle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middle.fill")
                }
                
                ///Creates the “square.grid.3x3.middle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct middleleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleleft.fill")
                }
                
                ///Creates the “square.grid.3x3.middleleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct middleright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.middleright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleright.fill")
                }
                
                ///Creates the “square.grid.3x3.middleright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.middleright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topleft {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topleft.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topleft.fill")
                }
                
                ///Creates the “square.grid.3x3.topleft.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topleft.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topmiddle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topmiddle.fill")
                }
                
                ///Creates the “square.grid.3x3.topmiddle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topmiddle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct topright {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", configuration: configuration)
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.grid.3x3.topright.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.grid.3x3.topright.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topright.fill")
                }
                
                ///Creates the “square.grid.3x3.topright.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.grid.3x3.topright.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.on.square {
    public struct dashed {
        private init() {}
    }
    
    public struct squareshape {
        public struct controlhandles {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.split {
    public struct bottomrightquarter {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.split.bottomrightquarter.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.split.bottomrightquarter.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.split.bottomrightquarter.fill", configuration: configuration)
            }
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.split.bottomrightquarter.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.split.bottomrightquarter.fill")
            }
            
            ///Creates the “square.split.bottomrightquarter.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.split.bottomrightquarter.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct diagonal {
        public struct x2x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", configuration: configuration)
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.split.diagonal.2x2.fill")
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.split.diagonal.2x2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", configuration: configuration)
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.split.diagonal.2x2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.split.diagonal.2x2.fill")
                }
                
                ///Creates the “square.split.diagonal.2x2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.split.diagonal.2x2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.split.diagonal.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.split.diagonal.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.split.diagonal.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.split.diagonal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.split.diagonal.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.split.diagonal.fill", configuration: configuration)
            }
            
            ///Creates the “square.split.diagonal.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.split.diagonal.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.split.diagonal.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.split.diagonal.fill")
            }
            
            ///Creates the “square.split.diagonal.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.split.diagonal.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack.x3d {
    public struct forward {
        public struct dottedline {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", configuration: configuration)
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.forward.dottedline.fill")
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack.x3d.down {
    public struct forward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", configuration: configuration)
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.stack.3d.down.forward.fill")
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.stack.3d.down.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack.x3d.up {
    public struct badge {
        public struct a {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", configuration: configuration)
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.up.badge.a.fill")
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack._3d {
    public struct forward {
        public struct dottedline {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", configuration: configuration)
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.forward.dottedline.fill")
                }
                
                ///Creates the “square.stack.3d.forward.dottedline.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.forward.dottedline.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack._3d.down {
    public struct forward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", configuration: configuration)
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.stack.3d.down.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.stack.3d.down.forward.fill")
            }
            
            ///Creates the “square.stack.3d.down.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.stack.3d.down.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.square.stack._3d.up {
    public struct badge {
        public struct a {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", configuration: configuration)
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.up.badge.a.fill")
                }
                
                ///Creates the “square.stack.3d.up.badge.a.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.stack.3d.up.badge.a.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.star {
    public struct leadinghalf {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “star.leadinghalf.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.leadinghalf.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “star.leadinghalf.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.leadinghalf.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “star.leadinghalf.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.leadinghalf.fill", configuration: configuration)
            }
            
            ///Creates the “star.leadinghalf.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.leadinghalf.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “star.leadinghalf.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.leadinghalf.fill")
            }
            
            ///Creates the “star.leadinghalf.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.leadinghalf.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “star.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “star.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “star.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.square.fill", configuration: configuration)
            }
            
            ///Creates the “star.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “star.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.square.fill")
            }
            
            ///Creates the “star.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.staroflife {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “staroflife.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "staroflife.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “staroflife.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "staroflife.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “staroflife.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "staroflife.circle.fill", configuration: configuration)
            }
            
            ///Creates the “staroflife.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "staroflife.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “staroflife.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "staroflife.circle.fill")
            }
            
            ///Creates the “staroflife.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "staroflife.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.sum {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.t.bubble {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.t.bubble.fill {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.tag {
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tag.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tag.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tag.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tag.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tag.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tag.slash.fill", configuration: configuration)
            }
            
            ///Creates the “tag.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tag.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tag.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tag.slash.fill")
            }
            
            ///Creates the “tag.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tag.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.teletype {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “teletype.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "teletype.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “teletype.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "teletype.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “teletype.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "teletype.circle.fill", configuration: configuration)
            }
            
            ///Creates the “teletype.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "teletype.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “teletype.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "teletype.circle.fill")
            }
            
            ///Creates the “teletype.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "teletype.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text {
    public struct and {
        public struct command {
            public struct macwindow {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct below {
        public struct photo {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “text.below.photo.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "text.below.photo.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “text.below.photo.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "text.below.photo.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “text.below.photo.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "text.below.photo.fill", configuration: configuration)
                }
                
                ///Creates the “text.below.photo.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "text.below.photo.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “text.below.photo.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "text.below.photo.fill")
                }
                
                ///Creates the “text.below.photo.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "text.below.photo.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct book {
        public struct closed {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “text.book.closed.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "text.book.closed.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “text.book.closed.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "text.book.closed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “text.book.closed.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "text.book.closed.fill", configuration: configuration)
                }
                
                ///Creates the “text.book.closed.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "text.book.closed.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “text.book.closed.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "text.book.closed.fill")
                }
                
                ///Creates the “text.book.closed.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "text.book.closed.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct magnifyingglass {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct redaction {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.badge.checkmark {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.bubble {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.bubble.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.cursor {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.text.quote {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.textbox {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.textformat.x123 {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.textformat._123 {
    public struct ar {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.thermometer.sun {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “thermometer.sun.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "thermometer.sun.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “thermometer.sun.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "thermometer.sun.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “thermometer.sun.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "thermometer.sun.fill", configuration: configuration)
        }
        
        ///Creates the “thermometer.sun.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "thermometer.sun.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “thermometer.sun.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "thermometer.sun.fill")
        }
        
        ///Creates the “thermometer.sun.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "thermometer.sun.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.timer {
    public struct square {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.tram {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tram.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tram.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tram.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tram.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tram.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tram.circle.fill", configuration: configuration)
            }
            
            ///Creates the “tram.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tram.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tram.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tram.circle.fill")
            }
            
            ///Creates the “tram.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tram.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct tunnel {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tram.tunnel.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tram.tunnel.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tram.tunnel.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tram.tunnel.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tram.tunnel.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tram.tunnel.fill", configuration: configuration)
            }
            
            ///Creates the “tram.tunnel.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tram.tunnel.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tram.tunnel.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tram.tunnel.fill")
            }
            
            ///Creates the “tram.tunnel.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tram.tunnel.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.tray {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tray.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tray.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tray.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tray.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tray.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tray.circle.fill", configuration: configuration)
            }
            
            ///Creates the “tray.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tray.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tray.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tray.circle.fill")
            }
            
            ///Creates the “tray.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tray.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.triangle {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “triangle.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "triangle.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “triangle.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "triangle.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “triangle.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "triangle.circle.fill", configuration: configuration)
            }
            
            ///Creates the “triangle.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "triangle.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “triangle.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "triangle.circle.fill")
            }
            
            ///Creates the “triangle.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "triangle.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.tv {
    public struct and {
        public struct hifispeaker {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "tv.and.hifispeaker.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "tv.and.hifispeaker.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "tv.and.hifispeaker.fill", configuration: configuration)
                }
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "tv.and.hifispeaker.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “tv.and.hifispeaker.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "tv.and.hifispeaker.fill")
                }
                
                ///Creates the “tv.and.hifispeaker.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "tv.and.hifispeaker.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.video {
    public struct bubble {
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “video.bubble.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "video.bubble.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “video.bubble.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "video.bubble.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “video.bubble.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "video.bubble.left.fill", configuration: configuration)
                }
                
                ///Creates the “video.bubble.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "video.bubble.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “video.bubble.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "video.bubble.left.fill")
                }
                
                ///Creates the “video.bubble.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "video.bubble.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.video.badge {
    public struct checkmark {
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.video.fill {
    public struct badge {
        public struct checkmark {
            private init() {}
        }
        
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.waveform.path.ecg {
    public struct rectangle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "waveform.path.ecg.rectangle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "waveform.path.ecg.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "waveform.path.ecg.rectangle.fill", configuration: configuration)
            }
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "waveform.path.ecg.rectangle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "waveform.path.ecg.rectangle.fill")
            }
            
            ///Creates the “waveform.path.ecg.rectangle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "waveform.path.ecg.rectangle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.wrench {
    public struct and {
        public struct screwdriver {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "wrench.and.screwdriver.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "wrench.and.screwdriver.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "wrench.and.screwdriver.fill", configuration: configuration)
                }
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "wrench.and.screwdriver.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “wrench.and.screwdriver.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "wrench.and.screwdriver.fill")
                }
                
                ///Creates the “wrench.and.screwdriver.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "wrench.and.screwdriver.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.xmark {
    public struct bin {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “xmark.bin.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "xmark.bin.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “xmark.bin.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "xmark.bin.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “xmark.bin.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "xmark.bin.circle.fill", configuration: configuration)
                }
                
                ///Creates the “xmark.bin.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "xmark.bin.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “xmark.bin.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "xmark.bin.circle.fill")
                }
                
                ///Creates the “xmark.bin.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "xmark.bin.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “xmark.bin.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.bin.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “xmark.bin.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.bin.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “xmark.bin.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.bin.fill", configuration: configuration)
            }
            
            ///Creates the “xmark.bin.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.bin.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “xmark.bin.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.bin.fill")
            }
            
            ///Creates the “xmark.bin.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.bin.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct diamond {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “xmark.diamond.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.diamond.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “xmark.diamond.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.diamond.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “xmark.diamond.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.diamond.fill", configuration: configuration)
            }
            
            ///Creates the “xmark.diamond.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.diamond.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “xmark.diamond.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.diamond.fill")
            }
            
            ///Creates the “xmark.diamond.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.diamond.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
extension SF.xmark.rectangle {
    public struct portrait {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.rectangle.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.rectangle.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.rectangle.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.rectangle.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.rectangle.portrait.fill")
            }
            
            ///Creates the “xmark.rectangle.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.rectangle.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF {
    public struct aqi {
        public struct high {
            private init() {}
        }
        
        public struct low {
            private init() {}
        }
        
        public struct medium {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct brazilianrealsign {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "brazilianrealsign.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "brazilianrealsign.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "brazilianrealsign.circle.fill", configuration: configuration)
                }
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "brazilianrealsign.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “brazilianrealsign.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "brazilianrealsign.circle.fill")
                }
                
                ///Creates the “brazilianrealsign.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "brazilianrealsign.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "brazilianrealsign.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "brazilianrealsign.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "brazilianrealsign.square.fill", configuration: configuration)
                }
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "brazilianrealsign.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “brazilianrealsign.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "brazilianrealsign.square.fill")
                }
                
                ///Creates the “brazilianrealsign.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "brazilianrealsign.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct character {
        public struct ar {
            private init() {}
        }
        
        public struct book {
            public struct closed {
                public struct ar {
                    private init() {}
                }
                
                public struct fill {
                    public struct ar {
                        private init() {}
                    }
                    
                    public struct he {
                        private init() {}
                    }
                    
                    public struct hi {
                        private init() {}
                    }
                    
                    public struct ja {
                        private init() {}
                    }
                    
                    public struct ko {
                        private init() {}
                    }
                    
                    public struct th {
                        private init() {}
                    }
                    
                    public struct zh {
                        public struct traditional {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “character.book.closed.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "character.book.closed.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “character.book.closed.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "character.book.closed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “character.book.closed.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "character.book.closed.fill", configuration: configuration)
                    }
                    
                    ///Creates the “character.book.closed.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "character.book.closed.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “character.book.closed.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "character.book.closed.fill")
                    }
                    
                    ///Creates the “character.book.closed.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "character.book.closed.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct he {
                    private init() {}
                }
                
                public struct hi {
                    private init() {}
                }
                
                public struct ja {
                    private init() {}
                }
                
                public struct ko {
                    private init() {}
                }
                
                public struct th {
                    private init() {}
                }
                
                public struct zh {
                    public struct traditional {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        public struct ja {
            private init() {}
        }
        
        public struct ko {
            private init() {}
        }
        
        public struct th {
            private init() {}
        }
        
        public struct zh {
            public struct traditional {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct directcurrent {
        private init() {}
    }
    
    public struct torus {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.cart {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cart.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cart.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cart.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cart.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cart.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cart.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cart.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cart.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cart.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cart.circle.fill")
            }
            
            ///Creates the “cart.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cart.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.clock.arrow {
    public struct x2 {
        public struct circlepath {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct circlepath {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.doc.text.below.ecg {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.doc.text.below.ecg.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.exclamationmark {
    public struct applewatch {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.infinity {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “infinity.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "infinity.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “infinity.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "infinity.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “infinity.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "infinity.circle.fill", configuration: configuration)
            }
            
            ///Creates the “infinity.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "infinity.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “infinity.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "infinity.circle.fill")
            }
            
            ///Creates the “infinity.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "infinity.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipad {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipad.homebutton {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipad.homebutton.landscape {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipad.landscape {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.iphone {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct landscape {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.iphone.homebutton {
    public struct badge {
        public struct play {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct landscape {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.ipodtouch {
    public struct landscape {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.lock {
    public struct applewatch {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.photo {
    public struct tv {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.play {
    public struct tv {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “play.tv.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "play.tv.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “play.tv.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "play.tv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “play.tv.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "play.tv.fill", configuration: configuration)
            }
            
            ///Creates the “play.tv.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "play.tv.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “play.tv.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "play.tv.fill")
            }
            
            ///Creates the “play.tv.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "play.tv.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.rectangle {
    public struct topthird {
        public struct inset {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.rectangle.badge {
    public struct person {
        public struct crop {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.rectangle.fill.badge {
    public struct person {
        public struct crop {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.`repeat` {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “repeat.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “repeat.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “repeat.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.circle.fill", configuration: configuration)
            }
            
            ///Creates the “repeat.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “repeat.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.circle.fill")
            }
            
            ///Creates the “repeat.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.`repeat`.x1 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “repeat.1.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “repeat.1.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", configuration: configuration)
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “repeat.1.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.1.circle.fill")
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.1.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.`repeat`._1 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “repeat.1.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “repeat.1.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", configuration: configuration)
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "repeat.1.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “repeat.1.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.1.circle.fill")
            }
            
            ///Creates the “repeat.1.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "repeat.1.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.shield {
    public struct checkerboard {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.shuffle {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “shuffle.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shuffle.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “shuffle.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shuffle.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “shuffle.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shuffle.circle.fill", configuration: configuration)
            }
            
            ///Creates the “shuffle.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shuffle.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “shuffle.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shuffle.circle.fill")
            }
            
            ///Creates the “shuffle.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shuffle.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.text.below.photo {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.text.below.photo.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.text.cursor.zh {
    public struct traditional {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.textbox.zh {
    public struct traditional {
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.textformat.size {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct larger {
        public struct ar {
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        public struct ja {
            private init() {}
        }
        
        public struct ko {
            private init() {}
        }
        
        public struct th {
            private init() {}
        }
        
        public struct zh {
            public struct traditional {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct smaller {
        public struct ar {
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        public struct ja {
            private init() {}
        }
        
        public struct ko {
            private init() {}
        }
        
        public struct th {
            private init() {}
        }
        
        public struct zh {
            public struct traditional {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.textformat.`subscript` {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.textformat.superscript {
    public struct ar {
        private init() {}
    }
    
    public struct he {
        private init() {}
    }
    
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.2, tvOS 14.2, watchOS 7.1, macOS 11.0, *)
extension SF.tv.and {
    public struct mediabox {
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF {
    public struct airpodsmax {
        private init() {}
    }
    
    public struct homepodmini {
        public struct x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepodmini.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepodmini.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", configuration: configuration)
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepodmini.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.2.fill")
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepodmini.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepodmini.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", configuration: configuration)
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepodmini.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.2.fill")
                }
                
                ///Creates the “homepodmini.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “homepodmini.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "homepodmini.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “homepodmini.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "homepodmini.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “homepodmini.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "homepodmini.fill", configuration: configuration)
            }
            
            ///Creates the “homepodmini.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "homepodmini.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “homepodmini.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "homepodmini.fill")
            }
            
            ///Creates the “homepodmini.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "homepodmini.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.applewatch {
    public struct side {
        public struct right {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.character {
    public struct bubble {
        public struct ar {
            private init() {}
        }
        
        public struct fill {
            public struct ar {
                private init() {}
            }
            
            public struct he {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “character.bubble.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "character.bubble.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “character.bubble.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "character.bubble.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “character.bubble.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "character.bubble.fill", configuration: configuration)
            }
            
            ///Creates the “character.bubble.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "character.bubble.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “character.bubble.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "character.bubble.fill")
            }
            
            ///Creates the “character.bubble.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "character.bubble.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct he {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cursor {
        public struct ibeam {
            public struct ar {
                private init() {}
            }
            
            public struct he {
                private init() {}
            }
            
            public struct hi {
                private init() {}
            }
            
            public struct ja {
                private init() {}
            }
            
            public struct ko {
                private init() {}
            }
            
            public struct th {
                private init() {}
            }
            
            public struct zh {
                public struct traditional {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct textbox {
        public struct ar {
            private init() {}
        }
        
        public struct he {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        public struct ja {
            private init() {}
        }
        
        public struct ko {
            private init() {}
        }
        
        public struct th {
            private init() {}
        }
        
        public struct zh {
            public struct traditional {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.hifispeaker.and {
    public struct homepodmini {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.and.homepodmini.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.and.homepodmini.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.and.homepodmini.fill", configuration: configuration)
            }
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.and.homepodmini.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.and.homepodmini.fill")
            }
            
            ///Creates the “hifispeaker.and.homepodmini.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.and.homepodmini.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.homepod {
    public struct and {
        public struct homepodmini {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepod.and.homepodmini.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepod.and.homepodmini.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepod.and.homepodmini.fill", configuration: configuration)
                }
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepod.and.homepodmini.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepod.and.homepodmini.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepod.and.homepodmini.fill")
                }
                
                ///Creates the “homepod.and.homepodmini.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepod.and.homepodmini.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
extension SF.rectangle.topthird.inset {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "rectangle.topthird.inset.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "rectangle.topthird.inset.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "rectangle.topthird.inset.fill", configuration: configuration)
        }
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "rectangle.topthird.inset.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “rectangle.topthird.inset.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "rectangle.topthird.inset.fill")
        }
        
        ///Creates the “rectangle.topthird.inset.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "rectangle.topthird.inset.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF {
    public struct x123 {
        public struct rectangle {
            public struct ar {
                private init() {}
            }
            
            public struct fill {
                public struct ar {
                    private init() {}
                }
                
                public struct hi {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “123.rectangle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “123.rectangle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “123.rectangle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", configuration: configuration)
                }
                
                ///Creates the “123.rectangle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “123.rectangle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "123.rectangle.fill")
                }
                
                ///Creates the “123.rectangle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "123.rectangle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct hi {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _123 {
        public struct rectangle {
            public struct ar {
                private init() {}
            }
            
            public struct fill {
                public struct ar {
                    private init() {}
                }
                
                public struct hi {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “123.rectangle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “123.rectangle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “123.rectangle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", configuration: configuration)
                }
                
                ///Creates the “123.rectangle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "123.rectangle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “123.rectangle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "123.rectangle.fill")
                }
                
                ///Creates the “123.rectangle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "123.rectangle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct hi {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct airtag {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airtag.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airtag.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airtag.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airtag.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airtag.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airtag.fill", configuration: configuration)
            }
            
            ///Creates the “airtag.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airtag.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airtag.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airtag.fill")
            }
            
            ///Creates the “airtag.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airtag.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct radiowaves {
            public struct forward {
                public struct fill {
                    public struct rtl {
                        private init() {}
                    }
                    
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "airtag.radiowaves.forward.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "airtag.radiowaves.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "airtag.radiowaves.forward.fill", configuration: configuration)
                    }
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "airtag.radiowaves.forward.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "airtag.radiowaves.forward.fill")
                    }
                    
                    ///Creates the “airtag.radiowaves.forward.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "airtag.radiowaves.forward.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct align {
        public struct horizontal {
            public struct center {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.center.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.center.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.center.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.center.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.horizontal.center.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.center.fill")
                    }
                    
                    ///Creates the “align.horizontal.center.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.center.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct left {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.left.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.left.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.left.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.horizontal.left.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.left.fill")
                    }
                    
                    ///Creates the “align.horizontal.left.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.left.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct right {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.right.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.horizontal.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.right.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.horizontal.right.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.horizontal.right.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.right.fill")
                    }
                    
                    ///Creates the “align.horizontal.right.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.horizontal.right.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct vertical {
            public struct bottom {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.bottom.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.bottom.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.bottom.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.vertical.bottom.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.bottom.fill")
                    }
                    
                    ///Creates the “align.vertical.bottom.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.bottom.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct center {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.vertical.center.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.center.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.vertical.center.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.center.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.vertical.center.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.center.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.vertical.center.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.center.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.vertical.center.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.center.fill")
                    }
                    
                    ///Creates the “align.vertical.center.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.center.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct top {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “align.vertical.top.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.top.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “align.vertical.top.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "align.vertical.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “align.vertical.top.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.top.fill", configuration: configuration)
                    }
                    
                    ///Creates the “align.vertical.top.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "align.vertical.top.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “align.vertical.top.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.top.fill")
                    }
                    
                    ///Creates the “align.vertical.top.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "align.vertical.top.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct allergens {
        private init() {}
    }
    
    public struct alternatingcurrent {
        private init() {}
    }
    
    public struct applepencil {
        private init() {}
    }
    
    public struct appletvremote {
        public struct gen1 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “appletvremote.gen1.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen1.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “appletvremote.gen1.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “appletvremote.gen1.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen1.fill", configuration: configuration)
                }
                
                ///Creates the “appletvremote.gen1.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen1.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “appletvremote.gen1.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen1.fill")
                }
                
                ///Creates the “appletvremote.gen1.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen1.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct gen2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “appletvremote.gen2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “appletvremote.gen2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “appletvremote.gen2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen2.fill", configuration: configuration)
                }
                
                ///Creates the “appletvremote.gen2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “appletvremote.gen2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen2.fill")
                }
                
                ///Creates the “appletvremote.gen2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct gen3 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “appletvremote.gen3.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen3.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “appletvremote.gen3.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “appletvremote.gen3.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen3.fill", configuration: configuration)
                }
                
                ///Creates the “appletvremote.gen3.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen3.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “appletvremote.gen3.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen3.fill")
                }
                
                ///Creates the “appletvremote.gen3.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen3.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct gen4 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “appletvremote.gen4.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen4.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “appletvremote.gen4.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "appletvremote.gen4.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “appletvremote.gen4.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen4.fill", configuration: configuration)
                }
                
                ///Creates the “appletvremote.gen4.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "appletvremote.gen4.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “appletvremote.gen4.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen4.fill")
                }
                
                ///Creates the “appletvremote.gen4.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "appletvremote.gen4.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct beats {
        public struct earphones {
            private init() {}
        }
        
        public struct headphones {
            private init() {}
        }
        
        public struct powerbeats {
            private init() {}
        }
        
        public struct powerbeats3 {
            private init() {}
        }
        
        public struct powerbeatspro {
            public struct chargingcase {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.powerbeatspro.chargingcase.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.powerbeatspro.chargingcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.powerbeatspro.chargingcase.fill", configuration: configuration)
                    }
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.powerbeatspro.chargingcase.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.powerbeatspro.chargingcase.fill")
                    }
                    
                    ///Creates the “beats.powerbeatspro.chargingcase.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.powerbeatspro.chargingcase.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct left {
                private init() {}
            }
            
            public struct right {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct studiobud {
            public struct left {
                private init() {}
            }
            
            public struct right {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct studiobuds {
            public struct chargingcase {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.studiobuds.chargingcase.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.studiobuds.chargingcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.studiobuds.chargingcase.fill", configuration: configuration)
                    }
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.studiobuds.chargingcase.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.studiobuds.chargingcase.fill")
                    }
                    
                    ///Creates the “beats.studiobuds.chargingcase.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.studiobuds.chargingcase.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct brain {
        public struct head {
            public struct profile {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cable {
        public struct connector {
            public struct horizontal {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cablecar {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cablecar.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cablecar.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cablecar.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cablecar.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cablecar.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cablecar.fill", configuration: configuration)
            }
            
            ///Creates the “cablecar.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cablecar.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cablecar.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cablecar.fill")
            }
            
            ///Creates the “cablecar.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cablecar.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct checklist {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct computermouse {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “computermouse.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "computermouse.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “computermouse.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "computermouse.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “computermouse.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "computermouse.fill", configuration: configuration)
            }
            
            ///Creates the “computermouse.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "computermouse.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “computermouse.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "computermouse.fill")
            }
            
            ///Creates the “computermouse.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "computermouse.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct cup {
        public struct and {
            public struct saucer {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cup.and.saucer.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cup.and.saucer.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cup.and.saucer.fill", configuration: configuration)
                    }
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cup.and.saucer.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “cup.and.saucer.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cup.and.saucer.fill")
                    }
                    
                    ///Creates the “cup.and.saucer.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cup.and.saucer.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dice {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dice.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dice.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dice.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dice.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dice.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dice.fill", configuration: configuration)
            }
            
            ///Creates the “dice.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dice.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dice.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dice.fill")
            }
            
            ///Creates the “dice.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dice.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct digitalcrown {
        public struct arrow {
            public struct clockwise {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.clockwise.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.clockwise.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.clockwise.fill", configuration: configuration)
                    }
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.clockwise.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.arrow.clockwise.fill")
                    }
                    
                    ///Creates the “digitalcrown.arrow.clockwise.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.arrow.clockwise.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct counterclockwise {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.counterclockwise.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.counterclockwise.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.counterclockwise.fill", configuration: configuration)
                    }
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.arrow.counterclockwise.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.arrow.counterclockwise.fill")
                    }
                    
                    ///Creates the “digitalcrown.arrow.counterclockwise.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.arrow.counterclockwise.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct horizontal {
            public struct arrow {
                public struct clockwise {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.clockwise.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.clockwise.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.clockwise.fill", configuration: configuration)
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.clockwise.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.arrow.clockwise.fill")
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.clockwise.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.arrow.clockwise.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct counterclockwise {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", configuration: configuration)
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.arrow.counterclockwise.fill")
                        }
                        
                        ///Creates the “digitalcrown.horizontal.arrow.counterclockwise.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.arrow.counterclockwise.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct press {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.horizontal.press.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "digitalcrown.horizontal.press.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.horizontal.press.fill", configuration: configuration)
                    }
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "digitalcrown.horizontal.press.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.press.fill")
                    }
                    
                    ///Creates the “digitalcrown.horizontal.press.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "digitalcrown.horizontal.press.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct press {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “digitalcrown.press.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "digitalcrown.press.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “digitalcrown.press.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "digitalcrown.press.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “digitalcrown.press.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "digitalcrown.press.fill", configuration: configuration)
                }
                
                ///Creates the “digitalcrown.press.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "digitalcrown.press.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “digitalcrown.press.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "digitalcrown.press.fill")
                }
                
                ///Creates the “digitalcrown.press.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "digitalcrown.press.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct earbuds {
        public struct `case` {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “earbuds.case.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "earbuds.case.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “earbuds.case.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "earbuds.case.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “earbuds.case.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "earbuds.case.fill", configuration: configuration)
                }
                
                ///Creates the “earbuds.case.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "earbuds.case.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “earbuds.case.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "earbuds.case.fill")
                }
                
                ///Creates the “earbuds.case.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "earbuds.case.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct facemask {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “facemask.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "facemask.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “facemask.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "facemask.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “facemask.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "facemask.fill", configuration: configuration)
            }
            
            ///Creates the “facemask.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "facemask.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “facemask.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "facemask.fill")
            }
            
            ///Creates the “facemask.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "facemask.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fanblades {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “fanblades.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fanblades.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “fanblades.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fanblades.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “fanblades.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fanblades.fill", configuration: configuration)
            }
            
            ///Creates the “fanblades.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fanblades.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “fanblades.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fanblades.fill")
            }
            
            ///Creates the “fanblades.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fanblades.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
        #if os(macOS)
        
        ///Creates the “cpu.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "cpu.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “cpu.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "cpu.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “cpu.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "cpu.fill", configuration: configuration)
        }
        
        ///Creates the “cpu.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "cpu.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “cpu.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "cpu.fill")
        }
        
        ///Creates the “cpu.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "cpu.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
    public struct ferry {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “ferry.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ferry.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “ferry.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ferry.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “ferry.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ferry.fill", configuration: configuration)
            }
            
            ///Creates the “ferry.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ferry.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “ferry.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ferry.fill")
            }
            
            ///Creates the “ferry.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ferry.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fibrechannel {
        private init() {}
    }
    
    public struct fork {
        public struct knife {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "fork.knife.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "fork.knife.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "fork.knife.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "fork.knife.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “fork.knife.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "fork.knife.circle.fill")
                    }
                    
                    ///Creates the “fork.knife.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "fork.knife.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct fuelpump {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “fuelpump.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fuelpump.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “fuelpump.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fuelpump.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “fuelpump.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fuelpump.circle.fill", configuration: configuration)
                }
                
                ///Creates the “fuelpump.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fuelpump.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “fuelpump.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fuelpump.circle.fill")
                }
                
                ///Creates the “fuelpump.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fuelpump.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “fuelpump.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fuelpump.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “fuelpump.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fuelpump.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “fuelpump.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fuelpump.fill", configuration: configuration)
            }
            
            ///Creates the “fuelpump.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fuelpump.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “fuelpump.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fuelpump.fill")
            }
            
            ///Creates the “fuelpump.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fuelpump.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct hearingdevice {
        public struct ear {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct humidity {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “humidity.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "humidity.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “humidity.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "humidity.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “humidity.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "humidity.fill", configuration: configuration)
            }
            
            ///Creates the “humidity.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "humidity.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “humidity.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "humidity.fill")
            }
            
            ///Creates the “humidity.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "humidity.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct ivfluid {
        public struct bag {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “ivfluid.bag.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "ivfluid.bag.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “ivfluid.bag.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "ivfluid.bag.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “ivfluid.bag.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "ivfluid.bag.fill", configuration: configuration)
                }
                
                ///Creates the “ivfluid.bag.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "ivfluid.bag.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “ivfluid.bag.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "ivfluid.bag.fill")
                }
                
                ///Creates the “ivfluid.bag.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "ivfluid.bag.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lanyardcard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lanyardcard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lanyardcard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lanyardcard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lanyardcard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lanyardcard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lanyardcard.fill", configuration: configuration)
            }
            
            ///Creates the “lanyardcard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lanyardcard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lanyardcard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lanyardcard.fill")
            }
            
            ///Creates the “lanyardcard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lanyardcard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct lines {
        public struct measurement {
            public struct horizontal {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct logo {
        public struct playstation {
            private init() {}
        }
        
        public struct xbox {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct magazine {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “magazine.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "magazine.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “magazine.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "magazine.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “magazine.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "magazine.fill", configuration: configuration)
            }
            
            ///Creates the “magazine.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "magazine.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “magazine.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "magazine.fill")
            }
            
            ///Creates the “magazine.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "magazine.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct magicmouse {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “magicmouse.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "magicmouse.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “magicmouse.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "magicmouse.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “magicmouse.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "magicmouse.fill", configuration: configuration)
            }
            
            ///Creates the “magicmouse.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "magicmouse.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “magicmouse.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "magicmouse.fill")
            }
            
            ///Creates the “magicmouse.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "magicmouse.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct magsafe {
        public struct batterypack {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “magsafe.batterypack.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "magsafe.batterypack.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “magsafe.batterypack.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "magsafe.batterypack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “magsafe.batterypack.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "magsafe.batterypack.fill", configuration: configuration)
                }
                
                ///Creates the “magsafe.batterypack.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "magsafe.batterypack.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “magsafe.batterypack.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "magsafe.batterypack.fill")
                }
                
                ///Creates the “magsafe.batterypack.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "magsafe.batterypack.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct mediastick {
        private init() {}
    }
    
    public struct menucard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “menucard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "menucard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “menucard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "menucard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “menucard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "menucard.fill", configuration: configuration)
            }
            
            ///Creates the “menucard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "menucard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “menucard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "menucard.fill")
            }
            
            ///Creates the “menucard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "menucard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct parentheses {
        private init() {}
    }
    
    public struct parkingsign {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “parkingsign.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "parkingsign.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “parkingsign.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "parkingsign.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “parkingsign.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "parkingsign.circle.fill", configuration: configuration)
                }
                
                ///Creates the “parkingsign.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "parkingsign.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “parkingsign.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "parkingsign.circle.fill")
                }
                
                ///Creates the “parkingsign.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "parkingsign.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct pawprint {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “pawprint.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "pawprint.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “pawprint.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "pawprint.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “pawprint.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "pawprint.circle.fill", configuration: configuration)
                }
                
                ///Creates the “pawprint.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "pawprint.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “pawprint.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "pawprint.circle.fill")
                }
                
                ///Creates the “pawprint.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "pawprint.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pawprint.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pawprint.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pawprint.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pawprint.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pawprint.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pawprint.fill", configuration: configuration)
            }
            
            ///Creates the “pawprint.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pawprint.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pawprint.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pawprint.fill")
            }
            
            ///Creates the “pawprint.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pawprint.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct peacesign {
        private init() {}
    }
    
    public struct pentagon {
        public struct bottomhalf {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pentagon.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pentagon.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pentagon.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pentagon.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pentagon.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pentagon.fill", configuration: configuration)
            }
            
            ///Creates the “pentagon.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pentagon.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pentagon.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pentagon.fill")
            }
            
            ///Creates the “pentagon.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pentagon.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct lefthalf {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct righthalf {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct tophalf {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct platter {
        public struct x2 {
            public struct filled {
                public struct ipad {
                    public struct landscape {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                public struct iphone {
                    public struct landscape {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct _2 {
            public struct filled {
                public struct ipad {
                    public struct landscape {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                public struct iphone {
                    public struct landscape {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct bottom {
            public struct applewatch {
                public struct `case` {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct filled {
            public struct bottom {
                public struct applewatch {
                    public struct `case` {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct top {
                public struct applewatch {
                    public struct `case` {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct top {
            public struct applewatch {
                public struct `case` {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct powerplug {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “powerplug.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "powerplug.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “powerplug.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "powerplug.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “powerplug.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "powerplug.fill", configuration: configuration)
            }
            
            ///Creates the “powerplug.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "powerplug.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “powerplug.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "powerplug.fill")
            }
            
            ///Creates the “powerplug.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "powerplug.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct scooter {
        private init() {}
    }
    
    public struct screwdriver {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “screwdriver.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "screwdriver.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “screwdriver.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "screwdriver.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “screwdriver.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "screwdriver.fill", configuration: configuration)
            }
            
            ///Creates the “screwdriver.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "screwdriver.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “screwdriver.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "screwdriver.fill")
            }
            
            ///Creates the “screwdriver.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "screwdriver.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct sensor {
        public struct tag {
            public struct radiowaves {
                public struct forward {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "sensor.tag.radiowaves.forward.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "sensor.tag.radiowaves.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "sensor.tag.radiowaves.forward.fill", configuration: configuration)
                        }
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "sensor.tag.radiowaves.forward.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "sensor.tag.radiowaves.forward.fill")
                        }
                        
                        ///Creates the “sensor.tag.radiowaves.forward.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "sensor.tag.radiowaves.forward.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct shareplay {
        public struct slash {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct snowflake {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “snowflake.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "snowflake.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “snowflake.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "snowflake.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “snowflake.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "snowflake.circle.fill", configuration: configuration)
                }
                
                ///Creates the “snowflake.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "snowflake.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “snowflake.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "snowflake.circle.fill")
                }
                
                ///Creates the “snowflake.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "snowflake.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct suitcase {
        public struct cart {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “suitcase.cart.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "suitcase.cart.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “suitcase.cart.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "suitcase.cart.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “suitcase.cart.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "suitcase.cart.fill", configuration: configuration)
                }
                
                ///Creates the “suitcase.cart.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "suitcase.cart.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “suitcase.cart.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "suitcase.cart.fill")
                }
                
                ///Creates the “suitcase.cart.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "suitcase.cart.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “suitcase.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "suitcase.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “suitcase.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "suitcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “suitcase.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "suitcase.fill", configuration: configuration)
            }
            
            ///Creates the “suitcase.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "suitcase.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “suitcase.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "suitcase.fill")
            }
            
            ///Creates the “suitcase.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "suitcase.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct takeoutbag {
        public struct and {
            public struct cup {
                public struct and {
                    public struct straw {
                        public struct fill {
                            private init() {}
                            #if os(macOS)
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image with the accessibility description you specify.
                            ///
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "takeoutbag.and.cup.and.straw.fill", accessibilityDescription: accessibilityDescription)
                            }
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image with the variable value you specify.
                            ///
                            ///The value parameter is valid for symbols that support variable rendering.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(macOS 13.0, *)
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "takeoutbag.and.cup.and.straw.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                            }
                            
                            #endif
                            
                            #if os(iOS) || os(tvOS) || os(watchOS)
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image object with the specified configuration.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(macOS, unavailable)
                            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "takeoutbag.and.cup.and.straw.fill", configuration: configuration)
                            }
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image object with the configuration and variable value you specify.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            @available(macOS, unavailable)
                            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "takeoutbag.and.cup.and.straw.fill", variableValue: variableValue, configuration: configuration)
                            }
                            
                            #endif
                            
                            #if canImport(SwiftUI)
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image.
                            ///
                            ///This initializer creates an image using a system-provided symbol.
                            public static func swiftUIImage() -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "takeoutbag.and.cup.and.straw.fill")
                            }
                            
                            ///Creates the “takeoutbag.and.cup.and.straw.fill” system symbol image with a variable value.
                            ///
                            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                            ///
                            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "takeoutbag.and.cup.and.straw.fill", variableValue: variableValue)
                            }
                            
                            #endif
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct testtube {
        public struct x2 {
            private init() {}
        }
        
        public struct _2 {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct theatermasks {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “theatermasks.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "theatermasks.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “theatermasks.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "theatermasks.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “theatermasks.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "theatermasks.circle.fill", configuration: configuration)
                }
                
                ///Creates the “theatermasks.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "theatermasks.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “theatermasks.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "theatermasks.circle.fill")
                }
                
                ///Creates the “theatermasks.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "theatermasks.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “theatermasks.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "theatermasks.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “theatermasks.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "theatermasks.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “theatermasks.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "theatermasks.fill", configuration: configuration)
            }
            
            ///Creates the “theatermasks.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "theatermasks.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “theatermasks.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "theatermasks.fill")
            }
            
            ///Creates the “theatermasks.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "theatermasks.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct train {
        public struct side {
            public struct front {
                public struct car {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct middle {
                public struct car {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct rear {
                public struct car {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct trapezoid {
        public struct and {
            public struct line {
                public struct horizontal {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.horizontal.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.horizontal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.horizontal.fill", configuration: configuration)
                        }
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.horizontal.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "trapezoid.and.line.horizontal.fill")
                        }
                        
                        ///Creates the “trapezoid.and.line.horizontal.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "trapezoid.and.line.horizontal.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                public struct vertical {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.vertical.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.vertical.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.vertical.fill", configuration: configuration)
                        }
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "trapezoid.and.line.vertical.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "trapezoid.and.line.vertical.fill")
                        }
                        
                        ///Creates the “trapezoid.and.line.vertical.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "trapezoid.and.line.vertical.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tshirt {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tshirt.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tshirt.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tshirt.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tshirt.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tshirt.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tshirt.fill", configuration: configuration)
            }
            
            ///Creates the “tshirt.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tshirt.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tshirt.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tshirt.fill")
            }
            
            ///Creates the “tshirt.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tshirt.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct watchface {
        public struct applewatch {
            public struct `case` {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.x1.magnifyingglass {
    public struct hi {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF._1.magnifyingglass {
    public struct hi {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airplane {
    public struct arrival {
        private init() {}
    }
    
    public struct departure {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airplayaudio {
    public struct badge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airplayaudio.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplayaudio.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airplayaudio.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplayaudio.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airplayaudio.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplayaudio.circle.fill", configuration: configuration)
            }
            
            ///Creates the “airplayaudio.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplayaudio.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airplayaudio.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplayaudio.circle.fill")
            }
            
            ///Creates the “airplayaudio.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplayaudio.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airplayvideo {
    public struct badge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airplayvideo.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplayvideo.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airplayvideo.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airplayvideo.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airplayvideo.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplayvideo.circle.fill", configuration: configuration)
            }
            
            ///Creates the “airplayvideo.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airplayvideo.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airplayvideo.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplayvideo.circle.fill")
            }
            
            ///Creates the “airplayvideo.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airplayvideo.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airpods {
    public struct chargingcase {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “airpods.chargingcase.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airpods.chargingcase.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “airpods.chargingcase.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "airpods.chargingcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “airpods.chargingcase.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airpods.chargingcase.fill", configuration: configuration)
            }
            
            ///Creates the “airpods.chargingcase.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "airpods.chargingcase.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “airpods.chargingcase.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airpods.chargingcase.fill")
            }
            
            ///Creates the “airpods.chargingcase.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "airpods.chargingcase.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct wireless {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "airpods.chargingcase.wireless.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "airpods.chargingcase.wireless.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "airpods.chargingcase.wireless.fill", configuration: configuration)
                }
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "airpods.chargingcase.wireless.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "airpods.chargingcase.wireless.fill")
                }
                
                ///Creates the “airpods.chargingcase.wireless.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "airpods.chargingcase.wireless.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.airpodspro {
    public struct chargingcase {
        public struct wireless {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "airpodspro.chargingcase.wireless.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "airpodspro.chargingcase.wireless.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "airpodspro.chargingcase.wireless.fill", configuration: configuration)
                }
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "airpodspro.chargingcase.wireless.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "airpodspro.chargingcase.wireless.fill")
                }
                
                ///Creates the “airpodspro.chargingcase.wireless.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "airpodspro.chargingcase.wireless.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.antenna.radiowaves.left.and.right {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "antenna.radiowaves.left.and.right.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "antenna.radiowaves.left.and.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "antenna.radiowaves.left.and.right.circle.fill", configuration: configuration)
            }
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "antenna.radiowaves.left.and.right.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "antenna.radiowaves.left.and.right.circle.fill")
            }
            
            ///Creates the “antenna.radiowaves.left.and.right.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "antenna.radiowaves.left.and.right.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.app {
    public struct connected {
        public struct to {
            public struct app {
                public struct below {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "app.connected.to.app.below.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "app.connected.to.app.below.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "app.connected.to.app.below.fill", configuration: configuration)
                        }
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "app.connected.to.app.below.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “app.connected.to.app.below.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "app.connected.to.app.below.fill")
                        }
                        
                        ///Creates the “app.connected.to.app.below.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "app.connected.to.app.below.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dashed {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.app.badge {
    public struct checkmark {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “app.badge.checkmark.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "app.badge.checkmark.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “app.badge.checkmark.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "app.badge.checkmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “app.badge.checkmark.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "app.badge.checkmark.fill", configuration: configuration)
            }
            
            ///Creates the “app.badge.checkmark.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "app.badge.checkmark.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “app.badge.checkmark.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "app.badge.checkmark.fill")
            }
            
            ///Creates the “app.badge.checkmark.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "app.badge.checkmark.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.applewatch {
    public struct `case` {
        public struct inset {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arkit {
    public struct badge {
        public struct xmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.backward {
    public struct to {
        public struct line {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.backward.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.backward.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.backward.to.line.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.backward.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.backward.to.line.circle.fill")
                    }
                    
                    ///Creates the “arrow.backward.to.line.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.backward.to.line.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.down.to.line {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.to.line.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.to.line.circle.fill")
            }
            
            ///Creates the “arrow.down.to.line.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.to.line.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compact {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.forward {
    public struct to {
        public struct line {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.forward.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "arrow.forward.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.forward.to.line.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "arrow.forward.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.forward.to.line.circle.fill")
                    }
                    
                    ///Creates the “arrow.forward.to.line.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "arrow.forward.to.line.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.left.to.line {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.left.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.left.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.left.to.line.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.left.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.left.to.line.circle.fill")
            }
            
            ///Creates the “arrow.left.to.line.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.left.to.line.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compact {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.right.to.line {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.right.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.right.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.right.to.line.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.right.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.right.to.line.circle.fill")
            }
            
            ///Creates the “arrow.right.to.line.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.right.to.line.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compact {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.up.and.down.righttriangle.up.righttriangle.down {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", configuration: configuration)
        }
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill")
        }
        
        ///Creates the “arrow.up.and.down.righttriangle.up.righttriangle.down.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "arrow.up.and.down.righttriangle.up.righttriangle.down.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrow.up.to.line {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.to.line.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.up.to.line.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.to.line.circle.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.up.to.line.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.to.line.circle.fill")
            }
            
            ///Creates the “arrow.up.to.line.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.up.to.line.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compact {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrowtriangle.left.and.line.vertical.and.arrowtriangle.right {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill", configuration: configuration)
        }
        
        ///Creates the “arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill")
        }
        
        ///Creates the “arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "arrowtriangle.left.and.line.vertical.and.arrowtriangle.right.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.arrowtriangle.right.and.line.vertical.and.arrowtriangle.left {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill", configuration: configuration)
        }
        
        ///Creates the “arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill")
        }
        
        ///Creates the “arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "arrowtriangle.right.and.line.vertical.and.arrowtriangle.left.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.backward {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “backward.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "backward.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “backward.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "backward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “backward.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "backward.circle.fill", configuration: configuration)
            }
            
            ///Creates the “backward.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "backward.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “backward.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "backward.circle.fill")
            }
            
            ///Creates the “backward.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "backward.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.battery {
    public struct x50 {
        private init() {}
    }
    
    public struct _50 {
        private init() {}
    }
    
    public struct x75 {
        private init() {}
    }
    
    public struct _75 {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bed.double {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bed.double.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bed.double.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bed.double.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bed.double.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bed.double.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bed.double.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bed.double.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bed.double.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bed.double.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bed.double.circle.fill")
            }
            
            ///Creates the “bed.double.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bed.double.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bell {
    public struct and {
        public struct waveform {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “bell.and.waveform.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "bell.and.waveform.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “bell.and.waveform.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "bell.and.waveform.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “bell.and.waveform.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "bell.and.waveform.fill", configuration: configuration)
                }
                
                ///Creates the “bell.and.waveform.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "bell.and.waveform.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “bell.and.waveform.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "bell.and.waveform.fill")
                }
                
                ///Creates the “bell.and.waveform.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "bell.and.waveform.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bell.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bell.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bell.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bell.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bell.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bell.square.fill", configuration: configuration)
            }
            
            ///Creates the “bell.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bell.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bell.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bell.square.fill")
            }
            
            ///Creates the “bell.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bell.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bell.badge {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bell.badge.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bell.badge.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bell.badge.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bell.badge.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bell.badge.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bell.badge.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bell.badge.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bell.badge.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bell.badge.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bell.badge.circle.fill")
            }
            
            ///Creates the “bell.badge.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bell.badge.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bolt {
    public struct batteryblock {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.batteryblock.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.batteryblock.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.batteryblock.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.batteryblock.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.batteryblock.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.batteryblock.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.batteryblock.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.batteryblock.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.batteryblock.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.batteryblock.fill")
            }
            
            ///Creates the “bolt.batteryblock.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.batteryblock.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct shield {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.shield.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.shield.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.shield.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.shield.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.shield.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.shield.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.shield.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.shield.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.shield.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.shield.fill")
            }
            
            ///Creates the “bolt.shield.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.shield.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.square.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.square.fill")
            }
            
            ///Creates the “bolt.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bolt.car {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.car.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.car.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.car.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.car.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.car.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.car.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.car.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.car.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.car.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.car.circle.fill")
            }
            
            ///Creates the “bolt.car.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.car.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.book.closed {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “book.closed.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "book.closed.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “book.closed.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "book.closed.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “book.closed.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "book.closed.circle.fill", configuration: configuration)
            }
            
            ///Creates the “book.closed.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "book.closed.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “book.closed.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "book.closed.circle.fill")
            }
            
            ///Creates the “book.closed.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "book.closed.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bookmark {
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bookmark.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bookmark.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bookmark.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bookmark.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bookmark.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bookmark.square.fill", configuration: configuration)
            }
            
            ///Creates the “bookmark.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bookmark.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bookmark.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bookmark.square.fill")
            }
            
            ///Creates the “bookmark.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bookmark.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.books.vertical {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “books.vertical.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "books.vertical.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “books.vertical.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "books.vertical.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “books.vertical.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "books.vertical.circle.fill", configuration: configuration)
            }
            
            ///Creates the “books.vertical.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "books.vertical.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “books.vertical.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "books.vertical.circle.fill")
            }
            
            ///Creates the “books.vertical.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "books.vertical.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.briefcase {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “briefcase.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "briefcase.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “briefcase.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "briefcase.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “briefcase.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "briefcase.circle.fill", configuration: configuration)
            }
            
            ///Creates the “briefcase.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "briefcase.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “briefcase.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "briefcase.circle.fill")
            }
            
            ///Creates the “briefcase.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "briefcase.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bubble.left {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bubble.left.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bubble.left.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bubble.left.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bubble.left.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bubble.left.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bubble.left.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bubble.left.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bubble.left.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bubble.left.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bubble.left.circle.fill")
            }
            
            ///Creates the “bubble.left.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bubble.left.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bubble.left.and {
    public struct exclamationmark {
        public struct bubble {
            public struct right {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “bubble.left.and.exclamationmark.bubble.right.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "bubble.left.and.exclamationmark.bubble.right.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “bubble.left.and.exclamationmark.bubble.right.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "bubble.left.and.exclamationmark.bubble.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “bubble.left.and.exclamationmark.bubble.right.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "bubble.left.and.exclamationmark.bubble.right.fill", configuration: configuration)
                    }
                    
                    ///Creates the “bubble.left.and.exclamationmark.bubble.right.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "bubble.left.and.exclamationmark.bubble.right.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “bubble.left.and.exclamationmark.bubble.right.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "bubble.left.and.exclamationmark.bubble.right.fill")
                    }
                    
                    ///Creates the “bubble.left.and.exclamationmark.bubble.right.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "bubble.left.and.exclamationmark.bubble.right.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.bubble.right {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bubble.right.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bubble.right.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bubble.right.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bubble.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bubble.right.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bubble.right.circle.fill", configuration: configuration)
            }
            
            ///Creates the “bubble.right.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bubble.right.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bubble.right.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bubble.right.circle.fill")
            }
            
            ///Creates the “bubble.right.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bubble.right.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.building.columns {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “building.columns.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "building.columns.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “building.columns.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "building.columns.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “building.columns.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "building.columns.circle.fill", configuration: configuration)
            }
            
            ///Creates the “building.columns.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "building.columns.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “building.columns.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "building.columns.circle.fill")
            }
            
            ///Creates the “building.columns.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "building.columns.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.calendar {
    public struct day {
        public struct timeline {
            public struct leading {
                private init() {}
            }
            
            public struct left {
                private init() {}
            }
            
            public struct right {
                private init() {}
            }
            
            public struct trailing {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.camera {
    public struct shutter {
        public struct button {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “camera.shutter.button.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "camera.shutter.button.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “camera.shutter.button.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "camera.shutter.button.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “camera.shutter.button.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "camera.shutter.button.fill", configuration: configuration)
                }
                
                ///Creates the “camera.shutter.button.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "camera.shutter.button.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “camera.shutter.button.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "camera.shutter.button.fill")
                }
                
                ///Creates the “camera.shutter.button.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "camera.shutter.button.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.capsule {
    public struct bottomhalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct inset {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lefthalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct righthalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tophalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.capsule.portrait {
    public struct bottomhalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct inset {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lefthalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct righthalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tophalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.car {
    public struct ferry {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “car.ferry.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "car.ferry.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “car.ferry.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "car.ferry.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “car.ferry.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "car.ferry.fill", configuration: configuration)
            }
            
            ///Creates the “car.ferry.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "car.ferry.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “car.ferry.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "car.ferry.fill")
            }
            
            ///Creates the “car.ferry.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "car.ferry.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.character.bubble {
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.character.bubble.fill {
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.chart {
    public struct line {
        public struct uptrend {
            public struct xyaxis {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “chart.line.uptrend.xyaxis.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "chart.line.uptrend.xyaxis.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “chart.line.uptrend.xyaxis.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "chart.line.uptrend.xyaxis.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “chart.line.uptrend.xyaxis.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "chart.line.uptrend.xyaxis.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “chart.line.uptrend.xyaxis.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "chart.line.uptrend.xyaxis.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “chart.line.uptrend.xyaxis.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "chart.line.uptrend.xyaxis.circle.fill")
                        }
                        
                        ///Creates the “chart.line.uptrend.xyaxis.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "chart.line.uptrend.xyaxis.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct xyaxis {
        public struct line {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.checkerboard {
    public struct shield {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.checkmark {
    public struct bubble {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “checkmark.bubble.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.bubble.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “checkmark.bubble.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.bubble.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “checkmark.bubble.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.bubble.fill", configuration: configuration)
            }
            
            ///Creates the “checkmark.bubble.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.bubble.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “checkmark.bubble.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.bubble.fill")
            }
            
            ///Creates the “checkmark.bubble.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.bubble.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct diamond {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “checkmark.diamond.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.diamond.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “checkmark.diamond.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.diamond.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “checkmark.diamond.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.diamond.fill", configuration: configuration)
            }
            
            ///Creates the “checkmark.diamond.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.diamond.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “checkmark.diamond.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.diamond.fill")
            }
            
            ///Creates the “checkmark.diamond.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.diamond.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.checkmark.circle {
    public struct trianglebadge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.chevron.left {
    public struct forwardslash {
        public struct chevron {
            public struct right {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle {
    public struct and {
        public struct line {
            public struct horizontal {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “circle.and.line.horizontal.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "circle.and.line.horizontal.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “circle.and.line.horizontal.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "circle.and.line.horizontal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “circle.and.line.horizontal.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "circle.and.line.horizontal.fill", configuration: configuration)
                    }
                    
                    ///Creates the “circle.and.line.horizontal.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "circle.and.line.horizontal.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “circle.and.line.horizontal.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "circle.and.line.horizontal.fill")
                    }
                    
                    ///Creates the “circle.and.line.horizontal.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "circle.and.line.horizontal.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dotted {
        private init() {}
    }
    
    public struct hexagongrid {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “circle.hexagongrid.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.hexagongrid.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “circle.hexagongrid.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "circle.hexagongrid.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “circle.hexagongrid.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.hexagongrid.circle.fill", configuration: configuration)
                }
                
                ///Creates the “circle.hexagongrid.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "circle.hexagongrid.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “circle.hexagongrid.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.hexagongrid.circle.fill")
                }
                
                ///Creates the “circle.hexagongrid.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "circle.hexagongrid.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.hexagongrid.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.hexagongrid.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.hexagongrid.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.hexagongrid.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.hexagongrid.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.hexagongrid.fill", configuration: configuration)
            }
            
            ///Creates the “circle.hexagongrid.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.hexagongrid.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.hexagongrid.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.hexagongrid.fill")
            }
            
            ///Creates the “circle.hexagongrid.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.hexagongrid.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct hexagonpath {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.hexagonpath.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.hexagonpath.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.hexagonpath.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.hexagonpath.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.hexagonpath.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.hexagonpath.fill", configuration: configuration)
            }
            
            ///Creates the “circle.hexagonpath.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.hexagonpath.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.hexagonpath.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.hexagonpath.fill")
            }
            
            ///Creates the “circle.hexagonpath.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.hexagonpath.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct inset {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.slash.fill", configuration: configuration)
            }
            
            ///Creates the “circle.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.slash.fill")
            }
            
            ///Creates the “circle.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.bottomhalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.dashed.inset {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.grid {
    public struct x2x1 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.grid.2x1.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.2x1.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.grid.2x1.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.2x1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.grid.2x1.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.2x1.fill", configuration: configuration)
            }
            
            ///Creates the “circle.grid.2x1.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.2x1.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.grid.2x1.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.2x1.fill")
            }
            
            ///Creates the “circle.grid.2x1.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.2x1.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct left {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct right {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _2x1 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.grid.2x1.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.2x1.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.grid.2x1.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.2x1.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.grid.2x1.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.2x1.fill", configuration: configuration)
            }
            
            ///Creates the “circle.grid.2x1.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.2x1.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.grid.2x1.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.2x1.fill")
            }
            
            ///Creates the “circle.grid.2x1.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.2x1.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct left {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct right {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.grid.x3x3 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.3x3.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.3x3.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.3x3.circle.fill", configuration: configuration)
            }
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.3x3.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.3x3.circle.fill")
            }
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.3x3.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.grid._3x3 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.3x3.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "circle.grid.3x3.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.3x3.circle.fill", configuration: configuration)
            }
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "circle.grid.3x3.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.3x3.circle.fill")
            }
            
            ///Creates the “circle.grid.3x3.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "circle.grid.3x3.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.grid.cross.down {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.grid.cross.left {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.grid.cross.right {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.grid.cross.up {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.lefthalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.righthalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.square {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “circle.square.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "circle.square.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “circle.square.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "circle.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “circle.square.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "circle.square.fill", configuration: configuration)
        }
        
        ///Creates the “circle.square.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "circle.square.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “circle.square.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "circle.square.fill")
        }
        
        ///Creates the “circle.square.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "circle.square.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.circle.tophalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.clock {
    public struct badge {
        public struct checkmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “clock.badge.checkmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "clock.badge.checkmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “clock.badge.checkmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "clock.badge.checkmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “clock.badge.checkmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "clock.badge.checkmark.fill", configuration: configuration)
                }
                
                ///Creates the “clock.badge.checkmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "clock.badge.checkmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “clock.badge.checkmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "clock.badge.checkmark.fill")
                }
                
                ///Creates the “clock.badge.checkmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "clock.badge.checkmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct exclamationmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “clock.badge.exclamationmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "clock.badge.exclamationmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “clock.badge.exclamationmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "clock.badge.exclamationmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “clock.badge.exclamationmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "clock.badge.exclamationmark.fill", configuration: configuration)
                }
                
                ///Creates the “clock.badge.exclamationmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "clock.badge.exclamationmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “clock.badge.exclamationmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "clock.badge.exclamationmark.fill")
                }
                
                ///Creates the “clock.badge.exclamationmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "clock.badge.exclamationmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “clock.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "clock.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “clock.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "clock.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “clock.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "clock.circle.fill", configuration: configuration)
            }
            
            ///Creates the “clock.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "clock.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “clock.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "clock.circle.fill")
            }
            
            ///Creates the “clock.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "clock.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.cpu {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “cpu.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "cpu.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “cpu.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "cpu.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “cpu.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "cpu.fill", configuration: configuration)
        }
        
        ///Creates the “cpu.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "cpu.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “cpu.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "cpu.fill")
        }
        
        ///Creates the “cpu.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "cpu.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.creditcard {
    public struct and {
        public struct x123 {
            private init() {}
        }
        
        public struct _123 {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct trianglebadge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.cross {
    public struct vial {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cross.vial.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cross.vial.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cross.vial.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cross.vial.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cross.vial.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cross.vial.fill", configuration: configuration)
            }
            
            ///Creates the “cross.vial.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cross.vial.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cross.vial.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cross.vial.fill")
            }
            
            ///Creates the “cross.vial.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cross.vial.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.delete {
    public struct backward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “delete.backward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "delete.backward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “delete.backward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "delete.backward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “delete.backward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "delete.backward.fill", configuration: configuration)
            }
            
            ///Creates the “delete.backward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "delete.backward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “delete.backward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "delete.backward.fill")
            }
            
            ///Creates the “delete.backward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "delete.backward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “delete.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "delete.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “delete.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "delete.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “delete.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "delete.forward.fill", configuration: configuration)
            }
            
            ///Creates the “delete.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "delete.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “delete.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "delete.forward.fill")
            }
            
            ///Creates the “delete.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "delete.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.desktopcomputer {
    public struct and {
        public struct arrow {
            public struct down {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct trianglebadge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.diamond {
    public struct bottomhalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “diamond.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "diamond.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “diamond.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "diamond.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “diamond.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "diamond.circle.fill", configuration: configuration)
            }
            
            ///Creates the “diamond.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "diamond.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “diamond.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "diamond.circle.fill")
            }
            
            ///Creates the “diamond.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "diamond.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct inset {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lefthalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct righthalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tophalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.display {
    public struct and {
        public struct arrow {
            public struct down {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.doc {
    public struct viewfinder {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “doc.viewfinder.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "doc.viewfinder.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “doc.viewfinder.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "doc.viewfinder.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “doc.viewfinder.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "doc.viewfinder.fill", configuration: configuration)
            }
            
            ///Creates the “doc.viewfinder.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "doc.viewfinder.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “doc.viewfinder.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "doc.viewfinder.fill")
            }
            
            ///Creates the “doc.viewfinder.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "doc.viewfinder.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.doc.richtext {
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.doc.richtext.fill {
    public struct hi {
        private init() {}
    }
    
    public struct ja {
        private init() {}
    }
    
    public struct ko {
        private init() {}
    }
    
    public struct th {
        private init() {}
    }
    
    public struct zh {
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.doc.text {
    public struct x_image {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “doc.text.image.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "doc.text.image.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “doc.text.image.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "doc.text.image.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “doc.text.image.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "doc.text.image.fill", configuration: configuration)
            }
            
            ///Creates the “doc.text.image.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "doc.text.image.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “doc.text.image.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "doc.text.image.fill")
            }
            
            ///Creates the “doc.text.image.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "doc.text.image.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct _image {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “doc.text.image.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "doc.text.image.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “doc.text.image.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "doc.text.image.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “doc.text.image.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "doc.text.image.fill", configuration: configuration)
            }
            
            ///Creates the “doc.text.image.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "doc.text.image.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “doc.text.image.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "doc.text.image.fill")
            }
            
            ///Creates the “doc.text.image.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "doc.text.image.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.dot {
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.dot.circle {
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.dot.circle.and {
    public struct hand {
        public struct point {
            public struct up {
                public struct left {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “dot.circle.and.hand.point.up.left.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "dot.circle.and.hand.point.up.left.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “dot.circle.and.hand.point.up.left.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "dot.circle.and.hand.point.up.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “dot.circle.and.hand.point.up.left.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "dot.circle.and.hand.point.up.left.fill", configuration: configuration)
                        }
                        
                        ///Creates the “dot.circle.and.hand.point.up.left.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "dot.circle.and.hand.point.up.left.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “dot.circle.and.hand.point.up.left.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "dot.circle.and.hand.point.up.left.fill")
                        }
                        
                        ///Creates the “dot.circle.and.hand.point.up.left.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "dot.circle.and.hand.point.up.left.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.dot.radiowaves {
    public struct up {
        public struct forward {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.dpad.down {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.dpad.left {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.dpad.right {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.dpad.up {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.drop {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “drop.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "drop.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “drop.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "drop.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “drop.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "drop.circle.fill", configuration: configuration)
            }
            
            ///Creates the “drop.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "drop.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “drop.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "drop.circle.fill")
            }
            
            ///Creates the “drop.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "drop.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.ear {
    public struct and {
        public struct waveform {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.ellipsis {
    public struct curlybraces {
        private init() {}
    }
    
    public struct vertical {
        public struct bubble {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “ellipsis.vertical.bubble.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "ellipsis.vertical.bubble.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “ellipsis.vertical.bubble.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "ellipsis.vertical.bubble.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “ellipsis.vertical.bubble.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "ellipsis.vertical.bubble.fill", configuration: configuration)
                }
                
                ///Creates the “ellipsis.vertical.bubble.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "ellipsis.vertical.bubble.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “ellipsis.vertical.bubble.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "ellipsis.vertical.bubble.fill")
                }
                
                ///Creates the “ellipsis.vertical.bubble.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "ellipsis.vertical.bubble.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.envelope.badge.shield {
    public struct half {
        public struct filled {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “envelope.badge.shield.half.filled.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "envelope.badge.shield.half.filled.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “envelope.badge.shield.half.filled.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "envelope.badge.shield.half.filled.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “envelope.badge.shield.half.filled.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "envelope.badge.shield.half.filled.fill", configuration: configuration)
                }
                
                ///Creates the “envelope.badge.shield.half.filled.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "envelope.badge.shield.half.filled.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “envelope.badge.shield.half.filled.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "envelope.badge.shield.half.filled.fill")
                }
                
                ///Creates the “envelope.badge.shield.half.filled.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "envelope.badge.shield.half.filled.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.exclamationmark.bubble {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “exclamationmark.bubble.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "exclamationmark.bubble.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “exclamationmark.bubble.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "exclamationmark.bubble.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “exclamationmark.bubble.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "exclamationmark.bubble.circle.fill", configuration: configuration)
            }
            
            ///Creates the “exclamationmark.bubble.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "exclamationmark.bubble.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “exclamationmark.bubble.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "exclamationmark.bubble.circle.fill")
            }
            
            ///Creates the “exclamationmark.bubble.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "exclamationmark.bubble.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.eye {
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “eye.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eye.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “eye.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eye.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “eye.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eye.square.fill", configuration: configuration)
            }
            
            ///Creates the “eye.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eye.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “eye.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eye.square.fill")
            }
            
            ///Creates the “eye.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eye.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct trianglebadge {
        public struct exclamationmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “eye.trianglebadge.exclamationmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "eye.trianglebadge.exclamationmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “eye.trianglebadge.exclamationmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "eye.trianglebadge.exclamationmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “eye.trianglebadge.exclamationmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "eye.trianglebadge.exclamationmark.fill", configuration: configuration)
                }
                
                ///Creates the “eye.trianglebadge.exclamationmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "eye.trianglebadge.exclamationmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “eye.trianglebadge.exclamationmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "eye.trianglebadge.exclamationmark.fill")
                }
                
                ///Creates the “eye.trianglebadge.exclamationmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "eye.trianglebadge.exclamationmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.eye.slash {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “eye.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eye.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “eye.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eye.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “eye.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eye.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “eye.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eye.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “eye.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eye.slash.circle.fill")
            }
            
            ///Creates the “eye.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eye.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.figure {
    public struct roll {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.film {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “film.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "film.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “film.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "film.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “film.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "film.circle.fill", configuration: configuration)
            }
            
            ///Creates the “film.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "film.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “film.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "film.circle.fill")
            }
            
            ///Creates the “film.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "film.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.flag {
    public struct x2 {
        public struct crossed {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “flag.2.crossed.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flag.2.crossed.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “flag.2.crossed.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flag.2.crossed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “flag.2.crossed.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flag.2.crossed.fill", configuration: configuration)
                }
                
                ///Creates the “flag.2.crossed.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flag.2.crossed.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “flag.2.crossed.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flag.2.crossed.fill")
                }
                
                ///Creates the “flag.2.crossed.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flag.2.crossed.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct crossed {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “flag.2.crossed.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flag.2.crossed.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “flag.2.crossed.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "flag.2.crossed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “flag.2.crossed.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flag.2.crossed.fill", configuration: configuration)
                }
                
                ///Creates the “flag.2.crossed.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "flag.2.crossed.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “flag.2.crossed.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flag.2.crossed.fill")
                }
                
                ///Creates the “flag.2.crossed.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "flag.2.crossed.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct and {
        public struct flag {
            public struct filled {
                public struct crossed {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct filled {
        public struct and {
            public struct flag {
                public struct crossed {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “flag.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "flag.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “flag.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "flag.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “flag.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "flag.square.fill", configuration: configuration)
            }
            
            ///Creates the “flag.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "flag.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “flag.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "flag.square.fill")
            }
            
            ///Creates the “flag.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "flag.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.flame {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “flame.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "flame.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “flame.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "flame.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “flame.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "flame.circle.fill", configuration: configuration)
            }
            
            ///Creates the “flame.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "flame.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “flame.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "flame.circle.fill")
            }
            
            ///Creates the “flame.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "flame.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.folder.badge {
    public struct gearshape {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.folder.fill.badge {
    public struct gearshape {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.forward {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “forward.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "forward.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “forward.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "forward.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “forward.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "forward.circle.fill", configuration: configuration)
            }
            
            ///Creates the “forward.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "forward.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “forward.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "forward.circle.fill")
            }
            
            ///Creates the “forward.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "forward.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.gear {
    public struct badge {
        public struct checkmark {
            private init() {}
        }
        
        public struct questionmark {
            private init() {}
        }
        
        public struct xmark {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “gear.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "gear.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “gear.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "gear.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “gear.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "gear.circle.fill", configuration: configuration)
            }
            
            ///Creates the “gear.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "gear.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “gear.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "gear.circle.fill")
            }
            
            ///Creates the “gear.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "gear.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.gearshape {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “gearshape.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "gearshape.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “gearshape.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "gearshape.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “gearshape.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "gearshape.circle.fill", configuration: configuration)
            }
            
            ///Creates the “gearshape.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "gearshape.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “gearshape.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "gearshape.circle.fill")
            }
            
            ///Creates the “gearshape.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "gearshape.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.globe {
    public struct americas {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “globe.americas.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "globe.americas.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “globe.americas.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "globe.americas.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “globe.americas.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "globe.americas.fill", configuration: configuration)
            }
            
            ///Creates the “globe.americas.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "globe.americas.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “globe.americas.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "globe.americas.fill")
            }
            
            ///Creates the “globe.americas.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "globe.americas.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct asia {
        public struct australia {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “globe.asia.australia.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "globe.asia.australia.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “globe.asia.australia.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "globe.asia.australia.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “globe.asia.australia.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "globe.asia.australia.fill", configuration: configuration)
                }
                
                ///Creates the “globe.asia.australia.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "globe.asia.australia.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “globe.asia.australia.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "globe.asia.australia.fill")
                }
                
                ///Creates the “globe.asia.australia.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "globe.asia.australia.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct badge {
        public struct chevron {
            public struct backward {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct europe {
        public struct africa {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “globe.europe.africa.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "globe.europe.africa.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “globe.europe.africa.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "globe.europe.africa.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “globe.europe.africa.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "globe.europe.africa.fill", configuration: configuration)
                }
                
                ///Creates the “globe.europe.africa.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "globe.europe.africa.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “globe.europe.africa.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "globe.europe.africa.fill")
                }
                
                ///Creates the “globe.europe.africa.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "globe.europe.africa.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.gobackward {
    public struct x5 {
        public struct ar {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _5 {
        public struct ar {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.goforward {
    public struct x5 {
        public struct ar {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _5 {
        public struct ar {
            private init() {}
        }
        
        public struct hi {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.graduationcap {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “graduationcap.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "graduationcap.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “graduationcap.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "graduationcap.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “graduationcap.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "graduationcap.circle.fill", configuration: configuration)
            }
            
            ///Creates the “graduationcap.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "graduationcap.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “graduationcap.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "graduationcap.circle.fill")
            }
            
            ///Creates the “graduationcap.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "graduationcap.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.h.square.on.square {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “h.square.on.square.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "h.square.on.square.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “h.square.on.square.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "h.square.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “h.square.on.square.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "h.square.on.square.fill", configuration: configuration)
        }
        
        ///Creates the “h.square.on.square.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "h.square.on.square.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “h.square.on.square.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "h.square.on.square.fill")
        }
        
        ///Creates the “h.square.on.square.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "h.square.on.square.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hammer {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hammer.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hammer.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hammer.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hammer.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hammer.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hammer.circle.fill", configuration: configuration)
            }
            
            ///Creates the “hammer.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hammer.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hammer.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hammer.circle.fill")
            }
            
            ///Creates the “hammer.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hammer.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hand.raised {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.raised.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.raised.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.raised.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.raised.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.raised.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.raised.circle.fill", configuration: configuration)
            }
            
            ///Creates the “hand.raised.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.raised.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.raised.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.raised.circle.fill")
            }
            
            ///Creates the “hand.raised.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.raised.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.raised.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.raised.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.raised.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.raised.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.raised.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.raised.square.fill", configuration: configuration)
            }
            
            ///Creates the “hand.raised.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.raised.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.raised.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.raised.square.fill")
            }
            
            ///Creates the “hand.raised.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.raised.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct on {
            public struct square {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “hand.raised.square.on.square.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "hand.raised.square.on.square.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “hand.raised.square.on.square.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "hand.raised.square.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “hand.raised.square.on.square.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "hand.raised.square.on.square.fill", configuration: configuration)
                    }
                    
                    ///Creates the “hand.raised.square.on.square.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "hand.raised.square.on.square.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “hand.raised.square.on.square.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "hand.raised.square.on.square.fill")
                    }
                    
                    ///Creates the “hand.raised.square.on.square.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "hand.raised.square.on.square.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hand.thumbsdown {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.thumbsdown.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.thumbsdown.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.thumbsdown.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.thumbsdown.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.thumbsdown.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.thumbsdown.circle.fill", configuration: configuration)
            }
            
            ///Creates the “hand.thumbsdown.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.thumbsdown.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.thumbsdown.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.thumbsdown.circle.fill")
            }
            
            ///Creates the “hand.thumbsdown.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.thumbsdown.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hand.thumbsup {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.thumbsup.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.thumbsup.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.thumbsup.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.thumbsup.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.thumbsup.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.thumbsup.circle.fill", configuration: configuration)
            }
            
            ///Creates the “hand.thumbsup.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.thumbsup.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.thumbsup.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.thumbsup.circle.fill")
            }
            
            ///Creates the “hand.thumbsup.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.thumbsup.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.heart {
    public struct rectangle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “heart.rectangle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "heart.rectangle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “heart.rectangle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "heart.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “heart.rectangle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "heart.rectangle.fill", configuration: configuration)
            }
            
            ///Creates the “heart.rectangle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "heart.rectangle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “heart.rectangle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "heart.rectangle.fill")
            }
            
            ///Creates the “heart.rectangle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "heart.rectangle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “heart.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "heart.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “heart.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "heart.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “heart.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "heart.square.fill", configuration: configuration)
            }
            
            ///Creates the “heart.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "heart.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “heart.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "heart.square.fill")
            }
            
            ///Creates the “heart.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "heart.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hexagon {
    public struct bottomhalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lefthalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct righthalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tophalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hifispeaker.and {
    public struct appletv {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hifispeaker.and.appletv.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.and.appletv.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hifispeaker.and.appletv.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifispeaker.and.appletv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hifispeaker.and.appletv.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.and.appletv.fill", configuration: configuration)
            }
            
            ///Creates the “hifispeaker.and.appletv.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifispeaker.and.appletv.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hifispeaker.and.appletv.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.and.appletv.fill")
            }
            
            ///Creates the “hifispeaker.and.appletv.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifispeaker.and.appletv.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.homepod.and {
    public struct appletv {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “homepod.and.appletv.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "homepod.and.appletv.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “homepod.and.appletv.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "homepod.and.appletv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “homepod.and.appletv.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "homepod.and.appletv.fill", configuration: configuration)
            }
            
            ///Creates the “homepod.and.appletv.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "homepod.and.appletv.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “homepod.and.appletv.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "homepod.and.appletv.fill")
            }
            
            ///Creates the “homepod.and.appletv.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "homepod.and.appletv.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.homepodmini {
    public struct and {
        public struct appletv {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “homepodmini.and.appletv.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.and.appletv.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “homepodmini.and.appletv.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "homepodmini.and.appletv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “homepodmini.and.appletv.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.and.appletv.fill", configuration: configuration)
                }
                
                ///Creates the “homepodmini.and.appletv.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "homepodmini.and.appletv.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “homepodmini.and.appletv.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.and.appletv.fill")
                }
                
                ///Creates the “homepodmini.and.appletv.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "homepodmini.and.appletv.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hourglass {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hourglass.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hourglass.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hourglass.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hourglass.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hourglass.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hourglass.circle.fill", configuration: configuration)
            }
            
            ///Creates the “hourglass.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hourglass.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hourglass.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hourglass.circle.fill")
            }
            
            ///Creates the “hourglass.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hourglass.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hourglass.bottomhalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.hourglass.tophalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.icloud {
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “icloud.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "icloud.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “icloud.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "icloud.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “icloud.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "icloud.square.fill", configuration: configuration)
            }
            
            ///Creates the “icloud.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "icloud.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “icloud.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "icloud.square.fill")
            }
            
            ///Creates the “icloud.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "icloud.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.ipad {
    public struct and {
        public struct arrow {
            public struct forward {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct iphone {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct rear {
        public struct camera {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.iphone {
    public struct and {
        public struct arrow {
            public struct forward {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “iphone.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “iphone.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “iphone.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.circle.fill", configuration: configuration)
            }
            
            ///Creates the “iphone.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “iphone.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.circle.fill")
            }
            
            ///Creates the “iphone.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct rear {
        public struct camera {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct smartbatterycase {
        public struct gen1 {
            private init() {}
        }
        
        public struct gen2 {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.iphone.homebutton {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “iphone.homebutton.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.homebutton.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “iphone.homebutton.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.homebutton.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “iphone.homebutton.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.homebutton.circle.fill", configuration: configuration)
            }
            
            ///Creates the “iphone.homebutton.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.homebutton.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “iphone.homebutton.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.homebutton.circle.fill")
            }
            
            ///Creates the “iphone.homebutton.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.homebutton.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.iphone.homebutton.radiowaves.left.and.right {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “iphone.homebutton.radiowaves.left.and.right.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.homebutton.radiowaves.left.and.right.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “iphone.homebutton.radiowaves.left.and.right.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.homebutton.radiowaves.left.and.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “iphone.homebutton.radiowaves.left.and.right.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.homebutton.radiowaves.left.and.right.circle.fill", configuration: configuration)
            }
            
            ///Creates the “iphone.homebutton.radiowaves.left.and.right.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.homebutton.radiowaves.left.and.right.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “iphone.homebutton.radiowaves.left.and.right.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.homebutton.radiowaves.left.and.right.circle.fill")
            }
            
            ///Creates the “iphone.homebutton.radiowaves.left.and.right.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.homebutton.radiowaves.left.and.right.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.iphone.homebutton.slash {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “iphone.homebutton.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.homebutton.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “iphone.homebutton.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.homebutton.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “iphone.homebutton.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.homebutton.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “iphone.homebutton.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.homebutton.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “iphone.homebutton.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.homebutton.slash.circle.fill")
            }
            
            ///Creates the “iphone.homebutton.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.homebutton.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.iphone.radiowaves.left.and.right {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “iphone.radiowaves.left.and.right.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.radiowaves.left.and.right.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “iphone.radiowaves.left.and.right.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.radiowaves.left.and.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “iphone.radiowaves.left.and.right.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.radiowaves.left.and.right.circle.fill", configuration: configuration)
            }
            
            ///Creates the “iphone.radiowaves.left.and.right.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.radiowaves.left.and.right.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “iphone.radiowaves.left.and.right.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.radiowaves.left.and.right.circle.fill")
            }
            
            ///Creates the “iphone.radiowaves.left.and.right.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.radiowaves.left.and.right.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.iphone.slash {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “iphone.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “iphone.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "iphone.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “iphone.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “iphone.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "iphone.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “iphone.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.slash.circle.fill")
            }
            
            ///Creates the “iphone.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "iphone.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.ipodtouch {
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.j.square.on.square {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “j.square.on.square.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "j.square.on.square.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “j.square.on.square.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "j.square.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “j.square.on.square.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "j.square.on.square.fill", configuration: configuration)
        }
        
        ///Creates the “j.square.on.square.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "j.square.on.square.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “j.square.on.square.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "j.square.on.square.fill")
        }
        
        ///Creates the “j.square.on.square.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "j.square.on.square.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.keyboard {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “keyboard.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “keyboard.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “keyboard.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.fill", configuration: configuration)
        }
        
        ///Creates the “keyboard.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “keyboard.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.fill")
        }
        
        ///Creates the “keyboard.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.l.joystick {
    public struct press {
        public struct down {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “l.joystick.press.down.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.press.down.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “l.joystick.press.down.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.press.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “l.joystick.press.down.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.press.down.fill", configuration: configuration)
                }
                
                ///Creates the “l.joystick.press.down.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.press.down.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “l.joystick.press.down.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.press.down.fill")
                }
                
                ///Creates the “l.joystick.press.down.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.press.down.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tilt {
        public struct down {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “l.joystick.tilt.down.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.down.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “l.joystick.tilt.down.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “l.joystick.tilt.down.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.down.fill", configuration: configuration)
                }
                
                ///Creates the “l.joystick.tilt.down.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.down.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “l.joystick.tilt.down.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.tilt.down.fill")
                }
                
                ///Creates the “l.joystick.tilt.down.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.tilt.down.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct left {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “l.joystick.tilt.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “l.joystick.tilt.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “l.joystick.tilt.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.left.fill", configuration: configuration)
                }
                
                ///Creates the “l.joystick.tilt.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “l.joystick.tilt.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.tilt.left.fill")
                }
                
                ///Creates the “l.joystick.tilt.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.tilt.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct right {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “l.joystick.tilt.right.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.right.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “l.joystick.tilt.right.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “l.joystick.tilt.right.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.right.fill", configuration: configuration)
                }
                
                ///Creates the “l.joystick.tilt.right.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.right.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “l.joystick.tilt.right.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.tilt.right.fill")
                }
                
                ///Creates the “l.joystick.tilt.right.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.tilt.right.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct up {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “l.joystick.tilt.up.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.up.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “l.joystick.tilt.up.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.up.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “l.joystick.tilt.up.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.up.fill", configuration: configuration)
                }
                
                ///Creates the “l.joystick.tilt.up.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "l.joystick.tilt.up.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “l.joystick.tilt.up.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.tilt.up.fill")
                }
                
                ///Creates the “l.joystick.tilt.up.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "l.joystick.tilt.up.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.laptopcomputer {
    public struct trianglebadge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.laptopcomputer.and {
    public struct arrow {
        public struct down {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.lasso {
    public struct and {
        public struct sparkles {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.leaf {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “leaf.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "leaf.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “leaf.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "leaf.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “leaf.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "leaf.circle.fill", configuration: configuration)
            }
            
            ///Creates the “leaf.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "leaf.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “leaf.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "leaf.circle.fill")
            }
            
            ///Creates the “leaf.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "leaf.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.lightbulb {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lightbulb.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lightbulb.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lightbulb.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lightbulb.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lightbulb.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lightbulb.circle.fill", configuration: configuration)
            }
            
            ///Creates the “lightbulb.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lightbulb.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lightbulb.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lightbulb.circle.fill")
            }
            
            ///Creates the “lightbulb.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lightbulb.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.line {
    public struct x2 {
        public struct horizontal {
            public struct decrease {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "line.2.horizontal.decrease.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "line.2.horizontal.decrease.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "line.2.horizontal.decrease.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "line.2.horizontal.decrease.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "line.2.horizontal.decrease.circle.fill")
                        }
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "line.2.horizontal.decrease.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct _2 {
        public struct horizontal {
            public struct decrease {
                public struct circle {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "line.2.horizontal.decrease.circle.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "line.2.horizontal.decrease.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "line.2.horizontal.decrease.circle.fill", configuration: configuration)
                        }
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "line.2.horizontal.decrease.circle.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "line.2.horizontal.decrease.circle.fill")
                        }
                        
                        ///Creates the “line.2.horizontal.decrease.circle.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "line.2.horizontal.decrease.circle.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.line.x3 {
    public struct horizontal {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "line.3.horizontal.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "line.3.horizontal.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "line.3.horizontal.circle.fill", configuration: configuration)
                }
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "line.3.horizontal.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “line.3.horizontal.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "line.3.horizontal.circle.fill")
                }
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "line.3.horizontal.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct decrease {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "line.3.horizontal.decrease.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "line.3.horizontal.decrease.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "line.3.horizontal.decrease.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "line.3.horizontal.decrease.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "line.3.horizontal.decrease.circle.fill")
                    }
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "line.3.horizontal.decrease.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.line._3 {
    public struct horizontal {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "line.3.horizontal.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "line.3.horizontal.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "line.3.horizontal.circle.fill", configuration: configuration)
                }
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "line.3.horizontal.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “line.3.horizontal.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "line.3.horizontal.circle.fill")
                }
                
                ///Creates the “line.3.horizontal.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "line.3.horizontal.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct decrease {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "line.3.horizontal.decrease.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "line.3.horizontal.decrease.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "line.3.horizontal.decrease.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "line.3.horizontal.decrease.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "line.3.horizontal.decrease.circle.fill")
                    }
                    
                    ///Creates the “line.3.horizontal.decrease.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "line.3.horizontal.decrease.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.list.bullet {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “list.bullet.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "list.bullet.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “list.bullet.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "list.bullet.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “list.bullet.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "list.bullet.circle.fill", configuration: configuration)
            }
            
            ///Creates the “list.bullet.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "list.bullet.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “list.bullet.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "list.bullet.circle.fill")
            }
            
            ///Creates the “list.bullet.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "list.bullet.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.list.bullet.rectangle {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “list.bullet.rectangle.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "list.bullet.rectangle.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “list.bullet.rectangle.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "list.bullet.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “list.bullet.rectangle.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "list.bullet.rectangle.fill", configuration: configuration)
        }
        
        ///Creates the “list.bullet.rectangle.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "list.bullet.rectangle.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “list.bullet.rectangle.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "list.bullet.rectangle.fill")
        }
        
        ///Creates the “list.bullet.rectangle.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "list.bullet.rectangle.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
    public struct portrait {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “list.bullet.rectangle.portrait.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "list.bullet.rectangle.portrait.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “list.bullet.rectangle.portrait.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "list.bullet.rectangle.portrait.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “list.bullet.rectangle.portrait.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "list.bullet.rectangle.portrait.fill", configuration: configuration)
            }
            
            ///Creates the “list.bullet.rectangle.portrait.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "list.bullet.rectangle.portrait.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “list.bullet.rectangle.portrait.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "list.bullet.rectangle.portrait.fill")
            }
            
            ///Creates the “list.bullet.rectangle.portrait.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "list.bullet.rectangle.portrait.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

