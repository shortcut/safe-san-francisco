#if os(macOS)
import AppKit
#endif
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#endif
#if canImport(SwiftUI)
import SwiftUI
#endif
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.sparkle {
    public struct magnifyingglass {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.sparkles {
    public struct tv {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sparkles.tv.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sparkles.tv.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sparkles.tv.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sparkles.tv.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sparkles.tv.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sparkles.tv.fill", configuration: configuration)
            }
            
            ///Creates the “sparkles.tv.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sparkles.tv.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sparkles.tv.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sparkles.tv.fill")
            }
            
            ///Creates the “sparkles.tv.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sparkles.tv.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.sparkles.square {
    public struct filled {
        public struct on {
            public struct square {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.speaker {
    public struct badge {
        public struct exclamationmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.badge.exclamationmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.badge.exclamationmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.badge.exclamationmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.badge.exclamationmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.badge.exclamationmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.badge.exclamationmark.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.badge.exclamationmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.badge.exclamationmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.badge.exclamationmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.badge.exclamationmark.fill")
                }
                
                ///Creates the “speaker.badge.exclamationmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.badge.exclamationmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “speaker.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “speaker.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “speaker.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.circle.fill", configuration: configuration)
            }
            
            ///Creates the “speaker.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “speaker.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.circle.fill")
            }
            
            ///Creates the “speaker.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square {
    public struct filled {
        public struct and {
            public struct line {
                public struct vertical {
                    public struct and {
                        public struct square {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct on {
            public struct square {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct inset {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct text {
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “square.text.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.text.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “square.text.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "square.text.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “square.text.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.text.square.fill", configuration: configuration)
                }
                
                ///Creates the “square.text.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "square.text.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “square.text.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.text.square.fill")
                }
                
                ///Creates the “square.text.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "square.text.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.x2.stack.x3d.bottom {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.x2.stack.x3d.top {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.x3.stack.x3d.bottom {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.x3.stack.x3d.middle {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.x3.stack.x3d.top {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.and.arrow.up {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.and.arrow.up.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.and.arrow.up.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.and.arrow.up.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.and.arrow.up.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.and.arrow.up.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.and.arrow.up.circle.fill", configuration: configuration)
            }
            
            ///Creates the “square.and.arrow.up.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.and.arrow.up.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.and.arrow.up.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.and.arrow.up.circle.fill")
            }
            
            ///Creates the “square.and.arrow.up.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.and.arrow.up.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct trianglebadge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.and.at.rectangle {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “square.and.at.rectangle.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "square.and.at.rectangle.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “square.and.at.rectangle.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "square.and.at.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “square.and.at.rectangle.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "square.and.at.rectangle.fill", configuration: configuration)
        }
        
        ///Creates the “square.and.at.rectangle.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "square.and.at.rectangle.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “square.and.at.rectangle.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "square.and.at.rectangle.fill")
        }
        
        ///Creates the “square.and.at.rectangle.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "square.and.at.rectangle.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.and.line.vertical.and.square {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.bottomhalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.dashed.inset {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.fill.and.line.vertical.and.square {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “square.fill.and.line.vertical.and.square.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "square.fill.and.line.vertical.and.square.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “square.fill.and.line.vertical.and.square.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "square.fill.and.line.vertical.and.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “square.fill.and.line.vertical.and.square.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "square.fill.and.line.vertical.and.square.fill", configuration: configuration)
        }
        
        ///Creates the “square.fill.and.line.vertical.and.square.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "square.fill.and.line.vertical.and.square.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “square.fill.and.line.vertical.and.square.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "square.fill.and.line.vertical.and.square.fill")
        }
        
        ///Creates the “square.fill.and.line.vertical.and.square.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "square.fill.and.line.vertical.and.square.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x1.below.line.grid.x1x2 {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “square.grid.3x1.below.line.grid.1x2.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "square.grid.3x1.below.line.grid.1x2.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “square.grid.3x1.below.line.grid.1x2.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "square.grid.3x1.below.line.grid.1x2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “square.grid.3x1.below.line.grid.1x2.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "square.grid.3x1.below.line.grid.1x2.fill", configuration: configuration)
        }
        
        ///Creates the “square.grid.3x1.below.line.grid.1x2.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "square.grid.3x1.below.line.grid.1x2.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “square.grid.3x1.below.line.grid.1x2.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "square.grid.3x1.below.line.grid.1x2.fill")
        }
        
        ///Creates the “square.grid.3x1.below.line.grid.1x2.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "square.grid.3x1.below.line.grid.1x2.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3 {
    public struct square {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.bottomleft {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.bottommiddle {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.bottomright {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.middle {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.middleleft {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.middleright {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.topleft {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.topmiddle {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.grid.x3x3.topright {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.lefthalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.righthalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.square.tophalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.star {
    public struct bubble {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “star.bubble.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.bubble.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “star.bubble.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "star.bubble.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “star.bubble.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.bubble.fill", configuration: configuration)
            }
            
            ///Creates the “star.bubble.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "star.bubble.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “star.bubble.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.bubble.fill")
            }
            
            ///Creates the “star.bubble.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "star.bubble.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.star.leadinghalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.stethoscope {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “stethoscope.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "stethoscope.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “stethoscope.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "stethoscope.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “stethoscope.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "stethoscope.circle.fill", configuration: configuration)
            }
            
            ///Creates the “stethoscope.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "stethoscope.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “stethoscope.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "stethoscope.circle.fill")
            }
            
            ///Creates the “stethoscope.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "stethoscope.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.sun {
    public struct and {
        public struct horizon {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “sun.and.horizon.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "sun.and.horizon.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “sun.and.horizon.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "sun.and.horizon.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “sun.and.horizon.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "sun.and.horizon.fill", configuration: configuration)
                }
                
                ///Creates the “sun.and.horizon.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "sun.and.horizon.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “sun.and.horizon.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "sun.and.horizon.fill")
                }
                
                ///Creates the “sun.and.horizon.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "sun.and.horizon.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.sun.max {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sun.max.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sun.max.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sun.max.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sun.max.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sun.max.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sun.max.circle.fill", configuration: configuration)
            }
            
            ///Creates the “sun.max.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sun.max.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sun.max.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sun.max.circle.fill")
            }
            
            ///Creates the “sun.max.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sun.max.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.tablecells.fill {
    public struct badge {
        public struct ellipsis {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.tag {
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tag.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tag.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tag.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tag.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tag.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tag.square.fill", configuration: configuration)
            }
            
            ///Creates the “tag.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tag.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tag.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tag.square.fill")
            }
            
            ///Creates the “tag.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tag.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.teletype.answer {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “teletype.answer.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "teletype.answer.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “teletype.answer.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "teletype.answer.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “teletype.answer.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "teletype.answer.circle.fill", configuration: configuration)
            }
            
            ///Creates the “teletype.answer.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "teletype.answer.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “teletype.answer.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "teletype.answer.circle.fill")
            }
            
            ///Creates the “teletype.answer.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "teletype.answer.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.text {
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.textformat.x123 {
    public struct hi {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.tram.fill {
    public struct tunnel {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.trash {
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “trash.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "trash.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “trash.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "trash.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “trash.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "trash.square.fill", configuration: configuration)
            }
            
            ///Creates the “trash.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "trash.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “trash.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "trash.square.fill")
            }
            
            ///Creates the “trash.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "trash.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.trash.slash {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “trash.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "trash.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “trash.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "trash.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “trash.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "trash.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “trash.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "trash.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “trash.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "trash.slash.circle.fill")
            }
            
            ///Creates the “trash.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "trash.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “trash.slash.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "trash.slash.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “trash.slash.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "trash.slash.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “trash.slash.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "trash.slash.square.fill", configuration: configuration)
            }
            
            ///Creates the “trash.slash.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "trash.slash.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “trash.slash.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "trash.slash.square.fill")
            }
            
            ///Creates the “trash.slash.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "trash.slash.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.triangle {
    public struct bottomhalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct inset {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tophalf {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.triangle.lefthalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.triangle.righthalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.tv {
    public struct inset {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.video {
    public struct and {
        public struct waveform {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “video.and.waveform.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "video.and.waveform.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “video.and.waveform.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "video.and.waveform.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “video.and.waveform.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "video.and.waveform.fill", configuration: configuration)
                }
                
                ///Creates the “video.and.waveform.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "video.and.waveform.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “video.and.waveform.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "video.and.waveform.fill")
                }
                
                ///Creates the “video.and.waveform.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "video.and.waveform.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “video.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "video.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “video.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "video.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “video.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "video.square.fill", configuration: configuration)
            }
            
            ///Creates the “video.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "video.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “video.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "video.square.fill")
            }
            
            ///Creates the “video.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "video.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.video.badge {
    public struct ellipsis {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.video.fill.badge {
    public struct ellipsis {
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.wake {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “wake.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "wake.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “wake.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "wake.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “wake.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "wake.circle.fill", configuration: configuration)
            }
            
            ///Creates the “wake.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "wake.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “wake.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "wake.circle.fill")
            }
            
            ///Creates the “wake.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "wake.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.waveform {
    public struct and {
        public struct magnifyingglass {
            private init() {}
        }
        
        public struct mic {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct badge {
        public struct exclamationmark {
            private init() {}
        }
        
        public struct minus {
            private init() {}
        }
        
        public struct plus {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.wifi {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “wifi.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "wifi.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “wifi.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "wifi.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “wifi.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "wifi.circle.fill", configuration: configuration)
            }
            
            ///Creates the “wifi.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "wifi.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “wifi.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "wifi.circle.fill")
            }
            
            ///Creates the “wifi.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "wifi.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “wifi.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "wifi.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “wifi.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "wifi.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “wifi.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "wifi.square.fill", configuration: configuration)
            }
            
            ///Creates the “wifi.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "wifi.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “wifi.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "wifi.square.fill")
            }
            
            ///Creates the “wifi.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "wifi.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
extension SF.xmark {
    public struct app {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “xmark.app.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.app.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “xmark.app.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "xmark.app.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “xmark.app.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.app.fill", configuration: configuration)
            }
            
            ///Creates the “xmark.app.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "xmark.app.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “xmark.app.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.app.fill")
            }
            
            ///Creates the “xmark.app.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "xmark.app.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 15.1, tvOS 15.1, watchOS 8.1, macOS 12.0, *)
extension SF.bolt {
    public struct ring {
        public struct closed {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.1, tvOS 15.1, watchOS 8.1, macOS 12.0, *)
extension SF.platter.filled.bottom {
    public struct and {
        public struct arrow {
            public struct down {
                public struct iphone {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct iphone {
        private init() {}
    }
    
}

@available(iOS 15.1, tvOS 15.1, watchOS 8.1, macOS 12.0, *)
extension SF.platter.filled.top {
    public struct and {
        public struct arrow {
            public struct up {
                public struct iphone {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct iphone {
        private init() {}
    }
    
}

@available(iOS 15.1, tvOS 15.1, watchOS 8.1, macOS 12.0, *)
extension SF.square.x3 {
    public struct layers {
        public struct x3d {
            public struct down {
                public struct backward {
                    private init() {}
                }
                
                public struct forward {
                    private init() {}
                }
                
                public struct left {
                    private init() {}
                }
                
                public struct right {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.1, tvOS 15.1, watchOS 8.1, macOS 12.0, *)
extension SF.text.justify {
    public struct leading {
        private init() {}
    }
    
    public struct left {
        private init() {}
    }
    
    public struct right {
        private init() {}
    }
    
    public struct trailing {
        private init() {}
    }
    
}

@available(iOS 15.2, tvOS 15.2, watchOS 8.3, macOS 12.1, *)
extension SF.airpod {
    public struct gen3 {
        public struct left {
            private init() {}
        }
        
        public struct right {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.2, tvOS 15.2, watchOS 8.3, macOS 12.1, *)
extension SF.airpods {
    public struct gen3 {
        public struct chargingcase {
            public struct wireless {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “airpods.gen3.chargingcase.wireless.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "airpods.gen3.chargingcase.wireless.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “airpods.gen3.chargingcase.wireless.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "airpods.gen3.chargingcase.wireless.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “airpods.gen3.chargingcase.wireless.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "airpods.gen3.chargingcase.wireless.fill", configuration: configuration)
                    }
                    
                    ///Creates the “airpods.gen3.chargingcase.wireless.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "airpods.gen3.chargingcase.wireless.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “airpods.gen3.chargingcase.wireless.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "airpods.gen3.chargingcase.wireless.fill")
                    }
                    
                    ///Creates the “airpods.gen3.chargingcase.wireless.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "airpods.gen3.chargingcase.wireless.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.2, tvOS 15.2, watchOS 8.3, macOS 12.1, *)
extension SF.beats {
    public struct fit {
        public struct pro {
            public struct chargingcase {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “beats.fit.pro.chargingcase.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.fit.pro.chargingcase.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “beats.fit.pro.chargingcase.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "beats.fit.pro.chargingcase.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “beats.fit.pro.chargingcase.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.fit.pro.chargingcase.fill", configuration: configuration)
                    }
                    
                    ///Creates the “beats.fit.pro.chargingcase.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "beats.fit.pro.chargingcase.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “beats.fit.pro.chargingcase.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.fit.pro.chargingcase.fill")
                    }
                    
                    ///Creates the “beats.fit.pro.chargingcase.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "beats.fit.pro.chargingcase.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct left {
                private init() {}
            }
            
            public struct right {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.2, tvOS 15.2, watchOS 8.3, macOS 12.1, *)
extension SF.rectangle.leadinghalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.2, tvOS 15.2, watchOS 8.3, macOS 12.1, *)
extension SF.rectangle.trailinghalf {
    public struct filled {
        private init() {}
    }
    
}

@available(iOS 15.2, tvOS 15.2, watchOS 8.3, macOS 12.1, *)
extension SF.square.x3.layers.x3d.down.left {
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 15.2, tvOS 15.2, watchOS 8.3, macOS 12.1, *)
extension SF.square.x3.layers.x3d.down.right {
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 15.2, tvOS 15.2, watchOS 8.3, macOS 12.1, *)
extension SF.square.x3.stack.x3d {
    public struct slash {
        private init() {}
    }
    
}

@available(iOS 15.4, tvOS 15.4, watchOS 8.5, macOS 12.3, *)
extension SF {
    public struct dots {
        public struct and {
            public struct line {
                public struct vertical {
                    public struct and {
                        public struct cursorarrow {
                            public struct rectangle {
                                private init() {}
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.4, tvOS 15.4, watchOS 8.5, macOS 12.3, *)
extension SF.camera {
    public struct macro {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “camera.macro.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "camera.macro.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “camera.macro.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "camera.macro.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “camera.macro.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "camera.macro.circle.fill", configuration: configuration)
                }
                
                ///Creates the “camera.macro.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "camera.macro.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “camera.macro.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "camera.macro.circle.fill")
                }
                
                ///Creates the “camera.macro.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "camera.macro.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 15.4, tvOS 15.4, watchOS 8.5, macOS 12.3, *)
extension SF.key {
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 15.4, tvOS 15.4, watchOS 8.5, macOS 12.3, *)
extension SF.person.badge {
    public struct key {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “person.badge.key.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.badge.key.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “person.badge.key.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.badge.key.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “person.badge.key.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.badge.key.fill", configuration: configuration)
            }
            
            ///Creates the “person.badge.key.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.badge.key.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “person.badge.key.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.badge.key.fill")
            }
            
            ///Creates the “person.badge.key.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.badge.key.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF {
    public struct abs {
        public struct brakesignal {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct air {
        public struct conditioner {
            public struct horizontal {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “air.conditioner.horizontal.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "air.conditioner.horizontal.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “air.conditioner.horizontal.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "air.conditioner.horizontal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “air.conditioner.horizontal.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "air.conditioner.horizontal.fill", configuration: configuration)
                    }
                    
                    ///Creates the “air.conditioner.horizontal.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "air.conditioner.horizontal.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “air.conditioner.horizontal.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "air.conditioner.horizontal.fill")
                    }
                    
                    ///Creates the “air.conditioner.horizontal.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "air.conditioner.horizontal.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct vertical {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “air.conditioner.vertical.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "air.conditioner.vertical.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “air.conditioner.vertical.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "air.conditioner.vertical.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “air.conditioner.vertical.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "air.conditioner.vertical.fill", configuration: configuration)
                    }
                    
                    ///Creates the “air.conditioner.vertical.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "air.conditioner.vertical.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “air.conditioner.vertical.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "air.conditioner.vertical.fill")
                    }
                    
                    ///Creates the “air.conditioner.vertical.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "air.conditioner.vertical.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct purifier {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “air.purifier.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "air.purifier.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “air.purifier.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "air.purifier.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “air.purifier.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "air.purifier.fill", configuration: configuration)
                }
                
                ///Creates the “air.purifier.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "air.purifier.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “air.purifier.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "air.purifier.fill")
                }
                
                ///Creates the “air.purifier.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "air.purifier.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct angle {
        private init() {}
    }
    
    public struct apple {
        public struct logo {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct av {
        public struct remote {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “av.remote.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "av.remote.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “av.remote.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "av.remote.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “av.remote.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "av.remote.fill", configuration: configuration)
                }
                
                ///Creates the “av.remote.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "av.remote.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “av.remote.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "av.remote.fill")
                }
                
                ///Creates the “av.remote.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "av.remote.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct backpack {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “backpack.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "backpack.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “backpack.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "backpack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “backpack.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "backpack.fill", configuration: configuration)
            }
            
            ///Creates the “backpack.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "backpack.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “backpack.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "backpack.fill")
            }
            
            ///Creates the “backpack.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "backpack.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct balloon {
        public struct x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “balloon.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "balloon.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “balloon.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "balloon.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “balloon.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "balloon.2.fill", configuration: configuration)
                }
                
                ///Creates the “balloon.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "balloon.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “balloon.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "balloon.2.fill")
                }
                
                ///Creates the “balloon.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "balloon.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “balloon.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "balloon.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “balloon.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "balloon.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “balloon.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "balloon.fill", configuration: configuration)
            }
            
            ///Creates the “balloon.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "balloon.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “balloon.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "balloon.fill")
            }
            
            ///Creates the “balloon.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "balloon.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct baseball {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “baseball.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "baseball.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “baseball.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "baseball.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “baseball.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "baseball.circle.fill", configuration: configuration)
                }
                
                ///Creates the “baseball.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "baseball.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “baseball.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "baseball.circle.fill")
                }
                
                ///Creates the “baseball.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "baseball.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct diamond {
            public struct bases {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “baseball.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "baseball.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “baseball.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "baseball.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “baseball.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "baseball.fill", configuration: configuration)
            }
            
            ///Creates the “baseball.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "baseball.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “baseball.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "baseball.fill")
            }
            
            ///Creates the “baseball.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "baseball.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct basket {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “basket.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "basket.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “basket.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "basket.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “basket.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "basket.fill", configuration: configuration)
            }
            
            ///Creates the “basket.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "basket.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “basket.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "basket.fill")
            }
            
            ///Creates the “basket.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "basket.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct basketball {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “basketball.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "basketball.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “basketball.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "basketball.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “basketball.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "basketball.circle.fill", configuration: configuration)
                }
                
                ///Creates the “basketball.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "basketball.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “basketball.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "basketball.circle.fill")
                }
                
                ///Creates the “basketball.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "basketball.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “basketball.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "basketball.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “basketball.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "basketball.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “basketball.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "basketball.fill", configuration: configuration)
            }
            
            ///Creates the “basketball.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "basketball.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “basketball.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "basketball.fill")
            }
            
            ///Creates the “basketball.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "basketball.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct bathtub {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bathtub.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bathtub.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bathtub.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bathtub.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bathtub.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bathtub.fill", configuration: configuration)
            }
            
            ///Creates the “bathtub.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bathtub.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bathtub.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bathtub.fill")
            }
            
            ///Creates the “bathtub.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bathtub.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct beach {
        public struct umbrella {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “beach.umbrella.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "beach.umbrella.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “beach.umbrella.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "beach.umbrella.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “beach.umbrella.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "beach.umbrella.fill", configuration: configuration)
                }
                
                ///Creates the “beach.umbrella.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "beach.umbrella.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “beach.umbrella.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "beach.umbrella.fill")
                }
                
                ///Creates the “beach.umbrella.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "beach.umbrella.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct bird {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bird.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bird.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bird.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bird.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bird.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bird.fill", configuration: configuration)
            }
            
            ///Creates the “bird.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bird.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bird.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bird.fill")
            }
            
            ///Creates the “bird.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bird.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct birthday {
        public struct cake {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “birthday.cake.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "birthday.cake.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “birthday.cake.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "birthday.cake.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “birthday.cake.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "birthday.cake.fill", configuration: configuration)
                }
                
                ///Creates the “birthday.cake.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "birthday.cake.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “birthday.cake.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "birthday.cake.fill")
                }
                
                ///Creates the “birthday.cake.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "birthday.cake.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct blinds {
        public struct horizontal {
            public struct closed {
                private init() {}
            }
            
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct vertical {
            public struct closed {
                private init() {}
            }
            
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct box {
        public struct truck {
            public struct badge {
                public struct clock {
                    public struct fill {
                        public struct rtl {
                            private init() {}
                        }
                        
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “box.truck.badge.clock.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "box.truck.badge.clock.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “box.truck.badge.clock.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "box.truck.badge.clock.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “box.truck.badge.clock.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "box.truck.badge.clock.fill", configuration: configuration)
                        }
                        
                        ///Creates the “box.truck.badge.clock.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "box.truck.badge.clock.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “box.truck.badge.clock.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "box.truck.badge.clock.fill")
                        }
                        
                        ///Creates the “box.truck.badge.clock.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "box.truck.badge.clock.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    public struct rtl {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “box.truck.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "box.truck.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “box.truck.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "box.truck.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “box.truck.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "box.truck.fill", configuration: configuration)
                }
                
                ///Creates the “box.truck.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "box.truck.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “box.truck.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "box.truck.fill")
                }
                
                ///Creates the “box.truck.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "box.truck.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct brakesignal {
        public struct dashed {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct bubbles {
        public struct and {
            public struct sparkles {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “bubbles.and.sparkles.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "bubbles.and.sparkles.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “bubbles.and.sparkles.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "bubbles.and.sparkles.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “bubbles.and.sparkles.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "bubbles.and.sparkles.fill", configuration: configuration)
                    }
                    
                    ///Creates the “bubbles.and.sparkles.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "bubbles.and.sparkles.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “bubbles.and.sparkles.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "bubbles.and.sparkles.fill")
                    }
                    
                    ///Creates the “bubbles.and.sparkles.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "bubbles.and.sparkles.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct button {
        public struct programmable {
            public struct square {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “button.programmable.square.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "button.programmable.square.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “button.programmable.square.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "button.programmable.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “button.programmable.square.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "button.programmable.square.fill", configuration: configuration)
                    }
                    
                    ///Creates the “button.programmable.square.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "button.programmable.square.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “button.programmable.square.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "button.programmable.square.fill")
                    }
                    
                    ///Creates the “button.programmable.square.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "button.programmable.square.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cabinet {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cabinet.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cabinet.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cabinet.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cabinet.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cabinet.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cabinet.fill", configuration: configuration)
            }
            
            ///Creates the “cabinet.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cabinet.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cabinet.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cabinet.fill")
            }
            
            ///Creates the “cabinet.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cabinet.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct carbon {
        public struct dioxide {
            public struct cloud {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “carbon.dioxide.cloud.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "carbon.dioxide.cloud.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “carbon.dioxide.cloud.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "carbon.dioxide.cloud.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “carbon.dioxide.cloud.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "carbon.dioxide.cloud.fill", configuration: configuration)
                    }
                    
                    ///Creates the “carbon.dioxide.cloud.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "carbon.dioxide.cloud.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “carbon.dioxide.cloud.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "carbon.dioxide.cloud.fill")
                    }
                    
                    ///Creates the “carbon.dioxide.cloud.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "carbon.dioxide.cloud.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct monoxide {
            public struct cloud {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “carbon.monoxide.cloud.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "carbon.monoxide.cloud.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “carbon.monoxide.cloud.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "carbon.monoxide.cloud.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “carbon.monoxide.cloud.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "carbon.monoxide.cloud.fill", configuration: configuration)
                    }
                    
                    ///Creates the “carbon.monoxide.cloud.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "carbon.monoxide.cloud.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “carbon.monoxide.cloud.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "carbon.monoxide.cloud.fill")
                    }
                    
                    ///Creates the “carbon.monoxide.cloud.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "carbon.monoxide.cloud.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct carrot {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “carrot.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "carrot.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “carrot.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "carrot.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “carrot.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "carrot.fill", configuration: configuration)
            }
            
            ///Creates the “carrot.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "carrot.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “carrot.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "carrot.fill")
            }
            
            ///Creates the “carrot.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "carrot.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct cellularbars {
        private init() {}
    }
    
    public struct chair {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “chair.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "chair.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “chair.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "chair.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “chair.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "chair.fill", configuration: configuration)
            }
            
            ///Creates the “chair.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "chair.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “chair.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "chair.fill")
            }
            
            ///Creates the “chair.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "chair.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct lounge {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “chair.lounge.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chair.lounge.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “chair.lounge.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "chair.lounge.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “chair.lounge.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chair.lounge.fill", configuration: configuration)
                }
                
                ///Creates the “chair.lounge.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "chair.lounge.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “chair.lounge.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chair.lounge.fill")
                }
                
                ///Creates the “chair.lounge.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "chair.lounge.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct chandelier {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “chandelier.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "chandelier.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “chandelier.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "chandelier.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “chandelier.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "chandelier.fill", configuration: configuration)
            }
            
            ///Creates the “chandelier.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "chandelier.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “chandelier.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "chandelier.fill")
            }
            
            ///Creates the “chandelier.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "chandelier.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct clipboard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “clipboard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "clipboard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “clipboard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "clipboard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “clipboard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "clipboard.fill", configuration: configuration)
            }
            
            ///Creates the “clipboard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "clipboard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “clipboard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "clipboard.fill")
            }
            
            ///Creates the “clipboard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "clipboard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct compass {
        public struct drawing {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct contact {
        public struct sensor {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “contact.sensor.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "contact.sensor.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “contact.sensor.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "contact.sensor.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “contact.sensor.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "contact.sensor.fill", configuration: configuration)
                }
                
                ///Creates the “contact.sensor.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "contact.sensor.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “contact.sensor.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "contact.sensor.fill")
                }
                
                ///Creates the “contact.sensor.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "contact.sensor.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cooktop {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cooktop.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cooktop.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cooktop.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cooktop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cooktop.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cooktop.fill", configuration: configuration)
            }
            
            ///Creates the “cooktop.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cooktop.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cooktop.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cooktop.fill")
            }
            
            ///Creates the “cooktop.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cooktop.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct cricket {
        public struct ball {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “cricket.ball.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cricket.ball.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “cricket.ball.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "cricket.ball.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “cricket.ball.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cricket.ball.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “cricket.ball.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "cricket.ball.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “cricket.ball.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cricket.ball.circle.fill")
                    }
                    
                    ///Creates the “cricket.ball.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "cricket.ball.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “cricket.ball.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "cricket.ball.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “cricket.ball.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "cricket.ball.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “cricket.ball.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "cricket.ball.fill", configuration: configuration)
                }
                
                ///Creates the “cricket.ball.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "cricket.ball.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “cricket.ball.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "cricket.ball.fill")
                }
                
                ///Creates the “cricket.ball.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "cricket.ball.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct curtains {
        public struct closed {
            private init() {}
        }
        
        public struct open {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dehumidifier {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dehumidifier.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dehumidifier.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dehumidifier.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dehumidifier.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dehumidifier.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dehumidifier.fill", configuration: configuration)
            }
            
            ///Creates the “dehumidifier.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dehumidifier.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dehumidifier.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dehumidifier.fill")
            }
            
            ///Creates the “dehumidifier.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dehumidifier.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct deskview {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “deskview.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "deskview.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “deskview.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "deskview.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “deskview.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "deskview.fill", configuration: configuration)
            }
            
            ///Creates the “deskview.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "deskview.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “deskview.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "deskview.fill")
            }
            
            ///Creates the “deskview.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "deskview.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct dishwasher {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dishwasher.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dishwasher.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dishwasher.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dishwasher.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dishwasher.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dishwasher.fill", configuration: configuration)
            }
            
            ///Creates the “dishwasher.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dishwasher.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dishwasher.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dishwasher.fill")
            }
            
            ///Creates the “dishwasher.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dishwasher.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct distribute {
        public struct horizontal {
            public struct center {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “distribute.horizontal.center.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.horizontal.center.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “distribute.horizontal.center.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.horizontal.center.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “distribute.horizontal.center.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.horizontal.center.fill", configuration: configuration)
                    }
                    
                    ///Creates the “distribute.horizontal.center.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.horizontal.center.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “distribute.horizontal.center.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.horizontal.center.fill")
                    }
                    
                    ///Creates the “distribute.horizontal.center.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.horizontal.center.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct left {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “distribute.horizontal.left.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.horizontal.left.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “distribute.horizontal.left.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.horizontal.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “distribute.horizontal.left.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.horizontal.left.fill", configuration: configuration)
                    }
                    
                    ///Creates the “distribute.horizontal.left.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.horizontal.left.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “distribute.horizontal.left.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.horizontal.left.fill")
                    }
                    
                    ///Creates the “distribute.horizontal.left.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.horizontal.left.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct right {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “distribute.horizontal.right.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.horizontal.right.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “distribute.horizontal.right.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.horizontal.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “distribute.horizontal.right.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.horizontal.right.fill", configuration: configuration)
                    }
                    
                    ///Creates the “distribute.horizontal.right.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.horizontal.right.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “distribute.horizontal.right.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.horizontal.right.fill")
                    }
                    
                    ///Creates the “distribute.horizontal.right.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.horizontal.right.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct vertical {
            public struct bottom {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “distribute.vertical.bottom.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.vertical.bottom.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “distribute.vertical.bottom.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.vertical.bottom.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “distribute.vertical.bottom.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.vertical.bottom.fill", configuration: configuration)
                    }
                    
                    ///Creates the “distribute.vertical.bottom.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.vertical.bottom.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “distribute.vertical.bottom.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.vertical.bottom.fill")
                    }
                    
                    ///Creates the “distribute.vertical.bottom.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.vertical.bottom.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct center {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “distribute.vertical.center.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.vertical.center.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “distribute.vertical.center.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.vertical.center.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “distribute.vertical.center.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.vertical.center.fill", configuration: configuration)
                    }
                    
                    ///Creates the “distribute.vertical.center.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.vertical.center.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “distribute.vertical.center.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.vertical.center.fill")
                    }
                    
                    ///Creates the “distribute.vertical.center.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.vertical.center.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct top {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “distribute.vertical.top.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.vertical.top.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “distribute.vertical.top.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "distribute.vertical.top.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “distribute.vertical.top.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.vertical.top.fill", configuration: configuration)
                    }
                    
                    ///Creates the “distribute.vertical.top.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "distribute.vertical.top.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “distribute.vertical.top.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.vertical.top.fill")
                    }
                    
                    ///Creates the “distribute.vertical.top.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "distribute.vertical.top.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct door {
        public struct french {
            public struct closed {
                private init() {}
            }
            
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct garage {
            public struct closed {
                public struct trianglebadge {
                    public struct exclamationmark {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct double {
                public struct bay {
                    public struct closed {
                        public struct trianglebadge {
                            public struct exclamationmark {
                                private init() {}
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    public struct open {
                        public struct trianglebadge {
                            public struct exclamationmark {
                                private init() {}
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct open {
                public struct trianglebadge {
                    public struct exclamationmark {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct left {
            public struct hand {
                public struct closed {
                    private init() {}
                }
                
                public struct open {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct right {
            public struct hand {
                public struct closed {
                    private init() {}
                }
                
                public struct open {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct sliding {
            public struct left {
                public struct hand {
                    public struct closed {
                        private init() {}
                    }
                    
                    public struct open {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct right {
                public struct hand {
                    public struct closed {
                        private init() {}
                    }
                    
                    public struct open {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dryer {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dryer.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dryer.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dryer.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dryer.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dryer.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dryer.fill", configuration: configuration)
            }
            
            ///Creates the “dryer.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dryer.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dryer.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dryer.fill")
            }
            
            ///Creates the “dryer.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dryer.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct dumbbell {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dumbbell.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dumbbell.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dumbbell.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dumbbell.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dumbbell.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dumbbell.fill", configuration: configuration)
            }
            
            ///Creates the “dumbbell.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dumbbell.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dumbbell.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dumbbell.fill")
            }
            
            ///Creates the “dumbbell.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dumbbell.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct entry {
        public struct lever {
            public struct keypad {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “entry.lever.keypad.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "entry.lever.keypad.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “entry.lever.keypad.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "entry.lever.keypad.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “entry.lever.keypad.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "entry.lever.keypad.fill", configuration: configuration)
                    }
                    
                    ///Creates the “entry.lever.keypad.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "entry.lever.keypad.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “entry.lever.keypad.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "entry.lever.keypad.fill")
                    }
                    
                    ///Creates the “entry.lever.keypad.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "entry.lever.keypad.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct trianglebadge {
                    public struct exclamationmark {
                        public struct fill {
                            private init() {}
                            #if os(macOS)
                            
                            ///Creates the “entry.lever.keypad.trianglebadge.exclamationmark.fill” system symbol image with the accessibility description you specify.
                            ///
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "entry.lever.keypad.trianglebadge.exclamationmark.fill", accessibilityDescription: accessibilityDescription)
                            }
                            
                            ///Creates the “entry.lever.keypad.trianglebadge.exclamationmark.fill” system symbol image with the variable value you specify.
                            ///
                            ///The value parameter is valid for symbols that support variable rendering.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                            @available(macOS 13.0, *)
                            @available(iOS, unavailable)
                            @available(tvOS, unavailable)
                            @available(watchOS, unavailable)
                            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                                SFSymbolReference.image(name: "entry.lever.keypad.trianglebadge.exclamationmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                            }
                            
                            #endif
                            
                            #if os(iOS) || os(tvOS) || os(watchOS)
                            
                            ///Creates the “entry.lever.keypad.trianglebadge.exclamationmark.fill” system symbol image object with the specified configuration.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(macOS, unavailable)
                            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "entry.lever.keypad.trianglebadge.exclamationmark.fill", configuration: configuration)
                            }
                            
                            ///Creates the “entry.lever.keypad.trianglebadge.exclamationmark.fill” system symbol image object with the configuration and variable value you specify.
                            ///
                            ///Use this method to retrieve system-defined symbol images.
                            ///
                            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                            ///- Parameter configuration: The image configuration the system applies to the image.
                            ///
                            ///- Returns: The object containing the image variant that matches the specified configuration data.
                            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            @available(macOS, unavailable)
                            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                                SFSymbolReference.image(name: "entry.lever.keypad.trianglebadge.exclamationmark.fill", variableValue: variableValue, configuration: configuration)
                            }
                            
                            #endif
                            
                            #if canImport(SwiftUI)
                            ///Creates the “entry.lever.keypad.trianglebadge.exclamationmark.fill” system symbol image.
                            ///
                            ///This initializer creates an image using a system-provided symbol.
                            public static func swiftUIImage() -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "entry.lever.keypad.trianglebadge.exclamationmark.fill")
                            }
                            
                            ///Creates the “entry.lever.keypad.trianglebadge.exclamationmark.fill” system symbol image with a variable value.
                            ///
                            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                            ///
                            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                                SFSymbolReference.swiftUIImage(name: "entry.lever.keypad.trianglebadge.exclamationmark.fill", variableValue: variableValue)
                            }
                            
                            #endif
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct eraser {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “eraser.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eraser.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “eraser.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "eraser.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “eraser.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eraser.fill", configuration: configuration)
            }
            
            ///Creates the “eraser.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "eraser.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “eraser.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eraser.fill")
            }
            
            ///Creates the “eraser.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "eraser.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct line {
            public struct dashed {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “eraser.line.dashed.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "eraser.line.dashed.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “eraser.line.dashed.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "eraser.line.dashed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “eraser.line.dashed.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "eraser.line.dashed.fill", configuration: configuration)
                    }
                    
                    ///Creates the “eraser.line.dashed.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "eraser.line.dashed.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “eraser.line.dashed.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "eraser.line.dashed.fill")
                    }
                    
                    ///Creates the “eraser.line.dashed.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "eraser.line.dashed.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct fan {
        public struct and {
            public struct light {
                public struct ceiling {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “fan.and.light.ceiling.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "fan.and.light.ceiling.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “fan.and.light.ceiling.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "fan.and.light.ceiling.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “fan.and.light.ceiling.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "fan.and.light.ceiling.fill", configuration: configuration)
                        }
                        
                        ///Creates the “fan.and.light.ceiling.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "fan.and.light.ceiling.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “fan.and.light.ceiling.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "fan.and.light.ceiling.fill")
                        }
                        
                        ///Creates the “fan.and.light.ceiling.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "fan.and.light.ceiling.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct ceiling {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “fan.ceiling.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fan.ceiling.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “fan.ceiling.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fan.ceiling.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “fan.ceiling.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fan.ceiling.fill", configuration: configuration)
                }
                
                ///Creates the “fan.ceiling.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fan.ceiling.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “fan.ceiling.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fan.ceiling.fill")
                }
                
                ///Creates the “fan.ceiling.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fan.ceiling.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct desk {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “fan.desk.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fan.desk.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “fan.desk.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fan.desk.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “fan.desk.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fan.desk.fill", configuration: configuration)
                }
                
                ///Creates the “fan.desk.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fan.desk.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “fan.desk.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fan.desk.fill")
                }
                
                ///Creates the “fan.desk.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fan.desk.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct floor {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “fan.floor.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fan.floor.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “fan.floor.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fan.floor.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “fan.floor.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fan.floor.fill", configuration: configuration)
                }
                
                ///Creates the “fan.floor.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fan.floor.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “fan.floor.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fan.floor.fill")
                }
                
                ///Creates the “fan.floor.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fan.floor.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct oscillation {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “fan.oscillation.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fan.oscillation.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “fan.oscillation.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fan.oscillation.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “fan.oscillation.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fan.oscillation.fill", configuration: configuration)
                }
                
                ///Creates the “fan.oscillation.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fan.oscillation.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “fan.oscillation.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fan.oscillation.fill")
                }
                
                ///Creates the “fan.oscillation.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fan.oscillation.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct fireplace {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “fireplace.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fireplace.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “fireplace.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fireplace.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “fireplace.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fireplace.fill", configuration: configuration)
            }
            
            ///Creates the “fireplace.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fireplace.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “fireplace.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fireplace.fill")
            }
            
            ///Creates the “fireplace.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fireplace.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct firewall {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “firewall.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "firewall.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “firewall.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "firewall.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “firewall.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "firewall.fill", configuration: configuration)
            }
            
            ///Creates the “firewall.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "firewall.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “firewall.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "firewall.fill")
            }
            
            ///Creates the “firewall.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "firewall.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fish {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “fish.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fish.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “fish.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fish.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “fish.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fish.fill", configuration: configuration)
            }
            
            ///Creates the “fish.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fish.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “fish.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fish.fill")
            }
            
            ///Creates the “fish.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fish.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fleuron {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “fleuron.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fleuron.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “fleuron.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fleuron.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “fleuron.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fleuron.fill", configuration: configuration)
            }
            
            ///Creates the “fleuron.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fleuron.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “fleuron.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fleuron.fill")
            }
            
            ///Creates the “fleuron.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fleuron.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fluid {
        public struct brakesignal {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct football {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “football.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "football.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “football.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "football.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “football.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "football.circle.fill", configuration: configuration)
                }
                
                ///Creates the “football.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "football.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “football.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "football.circle.fill")
                }
                
                ///Creates the “football.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "football.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “football.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "football.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “football.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "football.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “football.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "football.fill", configuration: configuration)
            }
            
            ///Creates the “football.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "football.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “football.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "football.fill")
            }
            
            ///Creates the “football.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "football.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fossil {
        public struct shell {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “fossil.shell.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fossil.shell.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “fossil.shell.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "fossil.shell.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “fossil.shell.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fossil.shell.fill", configuration: configuration)
                }
                
                ///Creates the “fossil.shell.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "fossil.shell.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “fossil.shell.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fossil.shell.fill")
                }
                
                ///Creates the “fossil.shell.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "fossil.shell.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct frying {
        public struct pan {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “frying.pan.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "frying.pan.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “frying.pan.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "frying.pan.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “frying.pan.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "frying.pan.fill", configuration: configuration)
                }
                
                ///Creates the “frying.pan.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "frying.pan.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “frying.pan.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "frying.pan.fill")
                }
                
                ///Creates the “frying.pan.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "frying.pan.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct headlight {
        public struct high {
            public struct beam {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “headlight.high.beam.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "headlight.high.beam.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “headlight.high.beam.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "headlight.high.beam.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “headlight.high.beam.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "headlight.high.beam.fill", configuration: configuration)
                    }
                    
                    ///Creates the “headlight.high.beam.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "headlight.high.beam.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “headlight.high.beam.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "headlight.high.beam.fill")
                    }
                    
                    ///Creates the “headlight.high.beam.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "headlight.high.beam.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct low {
            public struct beam {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “headlight.low.beam.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "headlight.low.beam.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “headlight.low.beam.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "headlight.low.beam.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “headlight.low.beam.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "headlight.low.beam.fill", configuration: configuration)
                    }
                    
                    ///Creates the “headlight.low.beam.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "headlight.low.beam.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “headlight.low.beam.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "headlight.low.beam.fill")
                    }
                    
                    ///Creates the “headlight.low.beam.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "headlight.low.beam.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct heater {
        public struct vertical {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “heater.vertical.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "heater.vertical.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “heater.vertical.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "heater.vertical.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “heater.vertical.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "heater.vertical.fill", configuration: configuration)
                }
                
                ///Creates the “heater.vertical.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "heater.vertical.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “heater.vertical.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "heater.vertical.fill")
                }
                
                ///Creates the “heater.vertical.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "heater.vertical.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct hifireceiver {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hifireceiver.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifireceiver.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hifireceiver.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hifireceiver.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hifireceiver.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifireceiver.fill", configuration: configuration)
            }
            
            ///Creates the “hifireceiver.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hifireceiver.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hifireceiver.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifireceiver.fill")
            }
            
            ///Creates the “hifireceiver.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hifireceiver.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct hockey {
        public struct puck {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “hockey.puck.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "hockey.puck.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “hockey.puck.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "hockey.puck.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “hockey.puck.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "hockey.puck.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “hockey.puck.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "hockey.puck.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “hockey.puck.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "hockey.puck.circle.fill")
                    }
                    
                    ///Creates the “hockey.puck.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "hockey.puck.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “hockey.puck.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hockey.puck.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “hockey.puck.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hockey.puck.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “hockey.puck.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hockey.puck.fill", configuration: configuration)
                }
                
                ///Creates the “hockey.puck.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hockey.puck.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “hockey.puck.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hockey.puck.fill")
                }
                
                ///Creates the “hockey.puck.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hockey.puck.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct hold {
        public struct brakesignal {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct humidifier {
        public struct and {
            public struct droplets {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “humidifier.and.droplets.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "humidifier.and.droplets.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “humidifier.and.droplets.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "humidifier.and.droplets.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “humidifier.and.droplets.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "humidifier.and.droplets.fill", configuration: configuration)
                    }
                    
                    ///Creates the “humidifier.and.droplets.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "humidifier.and.droplets.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “humidifier.and.droplets.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "humidifier.and.droplets.fill")
                    }
                    
                    ///Creates the “humidifier.and.droplets.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "humidifier.and.droplets.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “humidifier.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "humidifier.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “humidifier.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "humidifier.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “humidifier.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "humidifier.fill", configuration: configuration)
            }
            
            ///Creates the “humidifier.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "humidifier.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “humidifier.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "humidifier.fill")
            }
            
            ///Creates the “humidifier.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "humidifier.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct lamp {
        public struct ceiling {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lamp.ceiling.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lamp.ceiling.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lamp.ceiling.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lamp.ceiling.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lamp.ceiling.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lamp.ceiling.fill", configuration: configuration)
                }
                
                ///Creates the “lamp.ceiling.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lamp.ceiling.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lamp.ceiling.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lamp.ceiling.fill")
                }
                
                ///Creates the “lamp.ceiling.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lamp.ceiling.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct inverse {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct desk {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lamp.desk.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lamp.desk.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lamp.desk.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lamp.desk.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lamp.desk.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lamp.desk.fill", configuration: configuration)
                }
                
                ///Creates the “lamp.desk.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lamp.desk.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lamp.desk.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lamp.desk.fill")
                }
                
                ///Creates the “lamp.desk.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lamp.desk.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct floor {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lamp.floor.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lamp.floor.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lamp.floor.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lamp.floor.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lamp.floor.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lamp.floor.fill", configuration: configuration)
                }
                
                ///Creates the “lamp.floor.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lamp.floor.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lamp.floor.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lamp.floor.fill")
                }
                
                ///Creates the “lamp.floor.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lamp.floor.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct table {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lamp.table.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lamp.table.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lamp.table.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lamp.table.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lamp.table.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lamp.table.fill", configuration: configuration)
                }
                
                ///Creates the “lamp.table.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lamp.table.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lamp.table.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lamp.table.fill")
                }
                
                ///Creates the “lamp.table.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lamp.table.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct laurel {
        public struct leading {
            private init() {}
        }
        
        public struct trailing {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lightswitch {
        public struct off {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lightswitch.off.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lightswitch.off.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lightswitch.off.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lightswitch.off.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lightswitch.off.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lightswitch.off.fill", configuration: configuration)
                }
                
                ///Creates the “lightswitch.off.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lightswitch.off.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lightswitch.off.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lightswitch.off.fill")
                }
                
                ///Creates the “lightswitch.off.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lightswitch.off.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct square {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “lightswitch.off.square.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lightswitch.off.square.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “lightswitch.off.square.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lightswitch.off.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “lightswitch.off.square.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lightswitch.off.square.fill", configuration: configuration)
                    }
                    
                    ///Creates the “lightswitch.off.square.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lightswitch.off.square.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “lightswitch.off.square.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lightswitch.off.square.fill")
                    }
                    
                    ///Creates the “lightswitch.off.square.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lightswitch.off.square.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct on {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lightswitch.on.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lightswitch.on.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lightswitch.on.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lightswitch.on.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lightswitch.on.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lightswitch.on.fill", configuration: configuration)
                }
                
                ///Creates the “lightswitch.on.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lightswitch.on.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lightswitch.on.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lightswitch.on.fill")
                }
                
                ///Creates the “lightswitch.on.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lightswitch.on.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct square {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “lightswitch.on.square.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lightswitch.on.square.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “lightswitch.on.square.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "lightswitch.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “lightswitch.on.square.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lightswitch.on.square.fill", configuration: configuration)
                    }
                    
                    ///Creates the “lightswitch.on.square.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "lightswitch.on.square.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “lightswitch.on.square.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lightswitch.on.square.fill")
                    }
                    
                    ///Creates the “lightswitch.on.square.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "lightswitch.on.square.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct lizard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lizard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lizard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lizard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lizard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lizard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lizard.fill", configuration: configuration)
            }
            
            ///Creates the “lizard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lizard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lizard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lizard.fill")
            }
            
            ///Creates the “lizard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lizard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct macstudio {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “macstudio.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "macstudio.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “macstudio.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "macstudio.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “macstudio.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "macstudio.fill", configuration: configuration)
            }
            
            ///Creates the “macstudio.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "macstudio.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “macstudio.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "macstudio.fill")
            }
            
            ///Creates the “macstudio.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "macstudio.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct medal {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “medal.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "medal.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “medal.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "medal.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “medal.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "medal.fill", configuration: configuration)
            }
            
            ///Creates the “medal.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "medal.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “medal.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "medal.fill")
            }
            
            ///Creates the “medal.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "medal.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct medical {
        public struct thermometer {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “medical.thermometer.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "medical.thermometer.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “medical.thermometer.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "medical.thermometer.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “medical.thermometer.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "medical.thermometer.fill", configuration: configuration)
                }
                
                ///Creates the “medical.thermometer.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "medical.thermometer.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “medical.thermometer.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "medical.thermometer.fill")
                }
                
                ///Creates the “medical.thermometer.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "medical.thermometer.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct microbe {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “microbe.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "microbe.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “microbe.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "microbe.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “microbe.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "microbe.circle.fill", configuration: configuration)
                }
                
                ///Creates the “microbe.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "microbe.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “microbe.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "microbe.circle.fill")
                }
                
                ///Creates the “microbe.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "microbe.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “microbe.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "microbe.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “microbe.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "microbe.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “microbe.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "microbe.fill", configuration: configuration)
            }
            
            ///Creates the “microbe.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "microbe.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “microbe.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "microbe.fill")
            }
            
            ///Creates the “microbe.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "microbe.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct microwave {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “microwave.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "microwave.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “microwave.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "microwave.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “microwave.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "microwave.fill", configuration: configuration)
            }
            
            ///Creates the “microwave.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "microwave.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “microwave.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "microwave.fill")
            }
            
            ///Creates the “microwave.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "microwave.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct mirror {
        public struct side {
            public struct left {
                private init() {}
            }
            
            public struct right {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct moonphase {
        public struct first {
            public struct quarter {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct full {
            public struct moon {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct last {
            public struct quarter {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct new {
            public struct moon {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct waning {
            public struct crescent {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct gibbous {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct waxing {
            public struct crescent {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct gibbous {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct numbersign {
        private init() {}
    }
    
    public struct oar {
        public struct x2 {
            public struct crossed {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct oven {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “oven.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "oven.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “oven.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "oven.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “oven.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "oven.fill", configuration: configuration)
            }
            
            ///Creates the “oven.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "oven.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “oven.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "oven.fill")
            }
            
            ///Creates the “oven.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "oven.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct parkinglight {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “parkinglight.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "parkinglight.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “parkinglight.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "parkinglight.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “parkinglight.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "parkinglight.fill", configuration: configuration)
            }
            
            ///Creates the “parkinglight.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "parkinglight.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “parkinglight.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "parkinglight.fill")
            }
            
            ///Creates the “parkinglight.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "parkinglight.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct party {
        public struct popper {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “party.popper.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "party.popper.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “party.popper.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "party.popper.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “party.popper.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "party.popper.fill", configuration: configuration)
                }
                
                ///Creates the “party.popper.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "party.popper.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “party.popper.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "party.popper.fill")
                }
                
                ///Creates the “party.popper.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "party.popper.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct pedestrian {
        public struct gate {
            public struct closed {
                private init() {}
            }
            
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct pill {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “pill.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "pill.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “pill.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "pill.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “pill.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "pill.circle.fill", configuration: configuration)
                }
                
                ///Creates the “pill.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "pill.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “pill.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "pill.circle.fill")
                }
                
                ///Creates the “pill.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "pill.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pill.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pill.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pill.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pill.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pill.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pill.fill", configuration: configuration)
            }
            
            ///Creates the “pill.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pill.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pill.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pill.fill")
            }
            
            ///Creates the “pill.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pill.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct pipe {
        public struct and {
            public struct drop {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “pipe.and.drop.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "pipe.and.drop.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “pipe.and.drop.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "pipe.and.drop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “pipe.and.drop.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "pipe.and.drop.fill", configuration: configuration)
                    }
                    
                    ///Creates the “pipe.and.drop.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "pipe.and.drop.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “pipe.and.drop.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "pipe.and.drop.fill")
                    }
                    
                    ///Creates the “pipe.and.drop.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "pipe.and.drop.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct playstation {
        public struct logo {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct popcorn {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “popcorn.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "popcorn.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “popcorn.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "popcorn.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “popcorn.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "popcorn.circle.fill", configuration: configuration)
                }
                
                ///Creates the “popcorn.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "popcorn.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “popcorn.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "popcorn.circle.fill")
                }
                
                ///Creates the “popcorn.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "popcorn.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “popcorn.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "popcorn.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “popcorn.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "popcorn.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “popcorn.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "popcorn.fill", configuration: configuration)
            }
            
            ///Creates the “popcorn.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "popcorn.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “popcorn.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "popcorn.fill")
            }
            
            ///Creates the “popcorn.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "popcorn.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct poweroutlet {
        public struct strip {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “poweroutlet.strip.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "poweroutlet.strip.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “poweroutlet.strip.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "poweroutlet.strip.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “poweroutlet.strip.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "poweroutlet.strip.fill", configuration: configuration)
                }
                
                ///Creates the “poweroutlet.strip.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "poweroutlet.strip.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “poweroutlet.strip.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "poweroutlet.strip.fill")
                }
                
                ///Creates the “poweroutlet.strip.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "poweroutlet.strip.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct type {
            public struct a {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.a.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.a.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.a.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.a.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.a.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.a.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.a.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.a.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.a.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.a.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.a.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.a.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.a.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.a.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.a.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.a.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.a.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.a.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.a.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.a.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.a.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.a.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.a.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.a.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct b {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.b.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.b.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.b.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.b.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.b.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.b.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.b.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.b.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.b.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.b.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.b.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.b.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.b.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.b.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.b.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.b.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.b.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.b.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.b.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.b.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.b.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.b.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.b.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.b.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct c {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.c.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.c.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.c.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.c.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.c.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.c.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.c.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.c.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.c.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.c.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.c.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.c.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.c.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.c.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.c.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.c.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.c.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.c.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.c.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.c.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.c.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.c.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.c.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.c.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct d {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.d.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.d.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.d.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.d.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.d.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.d.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.d.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.d.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.d.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.d.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.d.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.d.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.d.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.d.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.d.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.d.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.d.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.d.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.d.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.d.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.d.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.d.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.d.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.d.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct e {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.e.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.e.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.e.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.e.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.e.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.e.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.e.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.e.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.e.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.e.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.e.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.e.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.e.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.e.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.e.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.e.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.e.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.e.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.e.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.e.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.e.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.e.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.e.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.e.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct f {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.f.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.f.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.f.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.f.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.f.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.f.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.f.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.f.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.f.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.f.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.f.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.f.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.f.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.f.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.f.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.f.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.f.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.f.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.f.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.f.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.f.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.f.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.f.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.f.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct g {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.g.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.g.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.g.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.g.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.g.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.g.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.g.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.g.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.g.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.g.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.g.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.g.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.g.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.g.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.g.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.g.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.g.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.g.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.g.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.g.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.g.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.g.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.g.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.g.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct h {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.h.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.h.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.h.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.h.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.h.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.h.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.h.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.h.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.h.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.h.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.h.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.h.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.h.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.h.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.h.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.h.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.h.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.h.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.h.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.h.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.h.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.h.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.h.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.h.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct i {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.i.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.i.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.i.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.i.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.i.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.i.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.i.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.i.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.i.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.i.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.i.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.i.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.i.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.i.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.i.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.i.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.i.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.i.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.i.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.i.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.i.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.i.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.i.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.i.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct j {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.j.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.j.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.j.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.j.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.j.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.j.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.j.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.j.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.j.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.j.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.j.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.j.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.j.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.j.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.j.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.j.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.j.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.j.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.j.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.j.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.j.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.j.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.j.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.j.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct k {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.k.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.k.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.k.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.k.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.k.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.k.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.k.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.k.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.k.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.k.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.k.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.k.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.k.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.k.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.k.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.k.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.k.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.k.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.k.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.k.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.k.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.k.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.k.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.k.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct l {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.l.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.l.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.l.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.l.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.l.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.l.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.l.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.l.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.l.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.l.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.l.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.l.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.l.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.l.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.l.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.l.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.l.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.l.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.l.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.l.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.l.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.l.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.l.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.l.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct m {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.m.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.m.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.m.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.m.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.m.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.m.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.m.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.m.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.m.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.m.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.m.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.m.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.m.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.m.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.m.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.m.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.m.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.m.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.m.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.m.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.m.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.m.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.m.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.m.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct n {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.n.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.n.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.n.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.n.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.n.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.n.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.n.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.n.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.n.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.n.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.n.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.n.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.n.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.n.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.n.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.n.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.n.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.n.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.n.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.n.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.n.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.n.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.n.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.n.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct o {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “poweroutlet.type.o.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.o.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “poweroutlet.type.o.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "poweroutlet.type.o.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “poweroutlet.type.o.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.o.fill", configuration: configuration)
                    }
                    
                    ///Creates the “poweroutlet.type.o.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "poweroutlet.type.o.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “poweroutlet.type.o.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.o.fill")
                    }
                    
                    ///Creates the “poweroutlet.type.o.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "poweroutlet.type.o.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                public struct square {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “poweroutlet.type.o.square.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.o.square.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “poweroutlet.type.o.square.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "poweroutlet.type.o.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “poweroutlet.type.o.square.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.o.square.fill", configuration: configuration)
                        }
                        
                        ///Creates the “poweroutlet.type.o.square.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "poweroutlet.type.o.square.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “poweroutlet.type.o.square.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.o.square.fill")
                        }
                        
                        ///Creates the “poweroutlet.type.o.square.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "poweroutlet.type.o.square.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct quotelevel {
        private init() {}
    }
    
    public struct refrigerator {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “refrigerator.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "refrigerator.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “refrigerator.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "refrigerator.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “refrigerator.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "refrigerator.fill", configuration: configuration)
            }
            
            ///Creates the “refrigerator.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "refrigerator.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “refrigerator.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "refrigerator.fill")
            }
            
            ///Creates the “refrigerator.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "refrigerator.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct road {
        public struct lanes {
            public struct curved {
                public struct left {
                    private init() {}
                }
                
                public struct right {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct roller {
        public struct shade {
            public struct closed {
                private init() {}
            }
            
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct roman {
        public struct shade {
            public struct closed {
                private init() {}
            }
            
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct sailboat {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sailboat.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sailboat.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sailboat.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sailboat.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sailboat.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sailboat.fill", configuration: configuration)
            }
            
            ///Creates the “sailboat.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sailboat.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sailboat.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sailboat.fill")
            }
            
            ///Creates the “sailboat.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sailboat.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct shared {
        public struct with {
            public struct you {
                public struct slash {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct shazam {
        public struct logo {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “shazam.logo.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shazam.logo.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “shazam.logo.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shazam.logo.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “shazam.logo.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shazam.logo.fill", configuration: configuration)
                }
                
                ///Creates the “shazam.logo.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shazam.logo.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “shazam.logo.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shazam.logo.fill")
                }
                
                ///Creates the “shazam.logo.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shazam.logo.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct shoeprints {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “shoeprints.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shoeprints.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “shoeprints.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shoeprints.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “shoeprints.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shoeprints.fill", configuration: configuration)
            }
            
            ///Creates the “shoeprints.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shoeprints.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “shoeprints.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shoeprints.fill")
            }
            
            ///Creates the “shoeprints.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shoeprints.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct shower {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “shower.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shower.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “shower.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "shower.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “shower.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shower.fill", configuration: configuration)
            }
            
            ///Creates the “shower.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "shower.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “shower.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shower.fill")
            }
            
            ///Creates the “shower.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "shower.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct handheld {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “shower.handheld.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shower.handheld.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “shower.handheld.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shower.handheld.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “shower.handheld.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shower.handheld.fill", configuration: configuration)
                }
                
                ///Creates the “shower.handheld.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shower.handheld.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “shower.handheld.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shower.handheld.fill")
                }
                
                ///Creates the “shower.handheld.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shower.handheld.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct sidejet {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “shower.sidejet.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shower.sidejet.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “shower.sidejet.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "shower.sidejet.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “shower.sidejet.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shower.sidejet.fill", configuration: configuration)
                }
                
                ///Creates the “shower.sidejet.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "shower.sidejet.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “shower.sidejet.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shower.sidejet.fill")
                }
                
                ///Creates the “shower.sidejet.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "shower.sidejet.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct sink {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sink.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sink.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sink.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sink.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sink.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sink.fill", configuration: configuration)
            }
            
            ///Creates the “sink.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sink.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sink.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sink.fill")
            }
            
            ///Creates the “sink.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sink.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct soccerball {
        public struct circle {
            public struct fill {
                public struct inverse {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “soccerball.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "soccerball.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “soccerball.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "soccerball.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “soccerball.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "soccerball.circle.fill", configuration: configuration)
                }
                
                ///Creates the “soccerball.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "soccerball.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “soccerball.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "soccerball.circle.fill")
                }
                
                ///Creates the “soccerball.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "soccerball.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct inverse {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct inverse {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct sofa {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sofa.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sofa.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sofa.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sofa.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sofa.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sofa.fill", configuration: configuration)
            }
            
            ///Creates the “sofa.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sofa.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sofa.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sofa.fill")
            }
            
            ///Creates the “sofa.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sofa.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct space {
        private init() {}
    }
    
    public struct spigot {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “spigot.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "spigot.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “spigot.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "spigot.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “spigot.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "spigot.fill", configuration: configuration)
            }
            
            ///Creates the “spigot.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "spigot.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “spigot.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "spigot.fill")
            }
            
            ///Creates the “spigot.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "spigot.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct sprinkler {
        public struct and {
            public struct droplets {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “sprinkler.and.droplets.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "sprinkler.and.droplets.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “sprinkler.and.droplets.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "sprinkler.and.droplets.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “sprinkler.and.droplets.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "sprinkler.and.droplets.fill", configuration: configuration)
                    }
                    
                    ///Creates the “sprinkler.and.droplets.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "sprinkler.and.droplets.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “sprinkler.and.droplets.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "sprinkler.and.droplets.fill")
                    }
                    
                    ///Creates the “sprinkler.and.droplets.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "sprinkler.and.droplets.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sprinkler.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sprinkler.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sprinkler.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sprinkler.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sprinkler.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sprinkler.fill", configuration: configuration)
            }
            
            ///Creates the “sprinkler.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sprinkler.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sprinkler.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sprinkler.fill")
            }
            
            ///Creates the “sprinkler.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sprinkler.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct stairs {
        private init() {}
    }
    
    public struct stove {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “stove.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "stove.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “stove.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "stove.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “stove.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "stove.fill", configuration: configuration)
            }
            
            ///Creates the “stove.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "stove.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “stove.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "stove.fill")
            }
            
            ///Creates the “stove.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "stove.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct swatchpalette {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “swatchpalette.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "swatchpalette.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “swatchpalette.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "swatchpalette.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “swatchpalette.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "swatchpalette.fill", configuration: configuration)
            }
            
            ///Creates the “swatchpalette.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "swatchpalette.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “swatchpalette.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "swatchpalette.fill")
            }
            
            ///Creates the “swatchpalette.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "swatchpalette.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct syringe {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “syringe.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "syringe.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “syringe.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "syringe.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “syringe.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "syringe.fill", configuration: configuration)
            }
            
            ///Creates the “syringe.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "syringe.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “syringe.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "syringe.fill")
            }
            
            ///Creates the “syringe.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "syringe.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct teddybear {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “teddybear.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "teddybear.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “teddybear.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "teddybear.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “teddybear.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "teddybear.fill", configuration: configuration)
            }
            
            ///Creates the “teddybear.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "teddybear.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “teddybear.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "teddybear.fill")
            }
            
            ///Creates the “teddybear.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "teddybear.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct tennis {
        public struct racket {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “tennis.racket.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "tennis.racket.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “tennis.racket.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "tennis.racket.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “tennis.racket.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "tennis.racket.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “tennis.racket.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "tennis.racket.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “tennis.racket.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "tennis.racket.circle.fill")
                    }
                    
                    ///Creates the “tennis.racket.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "tennis.racket.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct tennisball {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “tennisball.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "tennisball.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “tennisball.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "tennisball.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “tennisball.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "tennisball.circle.fill", configuration: configuration)
                }
                
                ///Creates the “tennisball.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "tennisball.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “tennisball.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "tennisball.circle.fill")
                }
                
                ///Creates the “tennisball.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "tennisball.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tennisball.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tennisball.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tennisball.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tennisball.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tennisball.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tennisball.fill", configuration: configuration)
            }
            
            ///Creates the “tennisball.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tennisball.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tennisball.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tennisball.fill")
            }
            
            ///Creates the “tennisball.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tennisball.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct tent {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “tent.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tent.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “tent.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "tent.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “tent.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tent.fill", configuration: configuration)
            }
            
            ///Creates the “tent.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "tent.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “tent.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tent.fill")
            }
            
            ///Creates the “tent.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "tent.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct theatermask {
        public struct and {
            public struct paintbrush {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “theatermask.and.paintbrush.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "theatermask.and.paintbrush.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “theatermask.and.paintbrush.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "theatermask.and.paintbrush.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “theatermask.and.paintbrush.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "theatermask.and.paintbrush.fill", configuration: configuration)
                    }
                    
                    ///Creates the “theatermask.and.paintbrush.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "theatermask.and.paintbrush.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “theatermask.and.paintbrush.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "theatermask.and.paintbrush.fill")
                    }
                    
                    ///Creates the “theatermask.and.paintbrush.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "theatermask.and.paintbrush.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct toilet {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “toilet.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "toilet.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “toilet.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "toilet.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “toilet.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "toilet.fill", configuration: configuration)
            }
            
            ///Creates the “toilet.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "toilet.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “toilet.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "toilet.fill")
            }
            
            ///Creates the “toilet.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "toilet.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct trophy {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “trophy.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "trophy.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “trophy.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "trophy.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “trophy.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "trophy.circle.fill", configuration: configuration)
                }
                
                ///Creates the “trophy.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "trophy.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “trophy.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "trophy.circle.fill")
                }
                
                ///Creates the “trophy.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "trophy.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “trophy.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "trophy.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “trophy.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "trophy.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “trophy.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "trophy.fill", configuration: configuration)
            }
            
            ///Creates the “trophy.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "trophy.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “trophy.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "trophy.fill")
            }
            
            ///Creates the “trophy.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "trophy.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct vial {
        public struct viewfinder {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct videoprojector {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “videoprojector.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "videoprojector.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “videoprojector.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "videoprojector.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “videoprojector.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "videoprojector.fill", configuration: configuration)
            }
            
            ///Creates the “videoprojector.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "videoprojector.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “videoprojector.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "videoprojector.fill")
            }
            
            ///Creates the “videoprojector.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "videoprojector.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct volleyball {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “volleyball.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "volleyball.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “volleyball.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "volleyball.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “volleyball.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "volleyball.circle.fill", configuration: configuration)
                }
                
                ///Creates the “volleyball.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "volleyball.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “volleyball.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "volleyball.circle.fill")
                }
                
                ///Creates the “volleyball.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "volleyball.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “volleyball.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "volleyball.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “volleyball.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "volleyball.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “volleyball.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "volleyball.fill", configuration: configuration)
            }
            
            ///Creates the “volleyball.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "volleyball.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “volleyball.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "volleyball.fill")
            }
            
            ///Creates the “volleyball.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "volleyball.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct washer {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “washer.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "washer.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “washer.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "washer.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “washer.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "washer.fill", configuration: configuration)
            }
            
            ///Creates the “washer.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "washer.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “washer.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "washer.fill")
            }
            
            ///Creates the “washer.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "washer.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct water {
        public struct waves {
            public struct and {
                public struct arrow {
                    public struct down {
                        public struct trianglebadge {
                            public struct exclamationmark {
                                private init() {}
                            }
                            
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    public struct up {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct slash {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct web {
        public struct camera {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “web.camera.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "web.camera.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “web.camera.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "web.camera.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “web.camera.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "web.camera.fill", configuration: configuration)
                }
                
                ///Creates the “web.camera.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "web.camera.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “web.camera.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "web.camera.fill")
                }
                
                ///Creates the “web.camera.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "web.camera.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct window {
        public struct awning {
            public struct closed {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct casement {
            public struct closed {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct ceiling {
            public struct closed {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct horizontal {
            public struct closed {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct shade {
            public struct closed {
                private init() {}
            }
            
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct vertical {
            public struct closed {
                private init() {}
            }
            
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct windshield {
        public struct front {
            public struct and {
                public struct fluid {
                    private init() {}
                }
                
                public struct wiper {
                    public struct and {
                        public struct drop {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct rear {
            public struct and {
                public struct fluid {
                    private init() {}
                }
                
                public struct wiper {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct wineglass {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “wineglass.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "wineglass.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “wineglass.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "wineglass.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “wineglass.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "wineglass.fill", configuration: configuration)
            }
            
            ///Creates the “wineglass.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "wineglass.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “wineglass.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "wineglass.fill")
            }
            
            ///Creates the “wineglass.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "wineglass.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct xbox {
        public struct logo {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.alarm {
    public struct waves {
        public struct left {
            public struct and {
                public struct right {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “alarm.waves.left.and.right.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "alarm.waves.left.and.right.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “alarm.waves.left.and.right.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "alarm.waves.left.and.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “alarm.waves.left.and.right.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "alarm.waves.left.and.right.fill", configuration: configuration)
                        }
                        
                        ///Creates the “alarm.waves.left.and.right.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "alarm.waves.left.and.right.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “alarm.waves.left.and.right.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "alarm.waves.left.and.right.fill")
                        }
                        
                        ///Creates the “alarm.waves.left.and.right.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "alarm.waves.left.and.right.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.allergens {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “allergens.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "allergens.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “allergens.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "allergens.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “allergens.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "allergens.fill", configuration: configuration)
        }
        
        ///Creates the “allergens.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "allergens.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “allergens.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "allergens.fill")
        }
        
        ///Creates the “allergens.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "allergens.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrow.down {
    public struct and {
        public struct line {
            public struct horizontal {
                public struct and {
                    public struct arrow {
                        public struct up {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct message {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrow.down.message.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.message.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrow.down.message.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrow.down.message.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrow.down.message.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.message.fill", configuration: configuration)
            }
            
            ///Creates the “arrow.down.message.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrow.down.message.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrow.down.message.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.message.fill")
            }
            
            ///Creates the “arrow.down.message.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrow.down.message.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrow.left.and {
    public struct line {
        public struct vertical {
            public struct and {
                public struct arrow {
                    public struct right {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrow.left.and.right {
    public struct text {
        public struct vertical {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrow.right {
    public struct and {
        public struct line {
            public struct vertical {
                public struct and {
                    public struct arrow {
                        public struct left {
                            private init() {}
                        }
                        
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrow.up.and {
    public struct line {
        public struct horizontal {
            public struct and {
                public struct arrow {
                    public struct down {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrow.up.and.down {
    public struct text {
        public struct horizontal {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrow.up.and.down.and {
    public struct sparkles {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrow.up.circle {
    public struct badge {
        public struct clock {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrowshape {
    public struct backward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowshape.backward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.backward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowshape.backward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.backward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowshape.backward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.backward.fill", configuration: configuration)
            }
            
            ///Creates the “arrowshape.backward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.backward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowshape.backward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.backward.fill")
            }
            
            ///Creates the “arrowshape.backward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.backward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct forward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowshape.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowshape.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowshape.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.forward.fill", configuration: configuration)
            }
            
            ///Creates the “arrowshape.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowshape.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.forward.fill")
            }
            
            ///Creates the “arrowshape.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct left {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowshape.left.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.left.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowshape.left.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowshape.left.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.left.fill", configuration: configuration)
            }
            
            ///Creates the “arrowshape.left.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.left.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowshape.left.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.left.fill")
            }
            
            ///Creates the “arrowshape.left.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.left.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct right {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “arrowshape.right.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.right.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “arrowshape.right.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "arrowshape.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “arrowshape.right.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.right.fill", configuration: configuration)
            }
            
            ///Creates the “arrowshape.right.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "arrowshape.right.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “arrowshape.right.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.right.fill")
            }
            
            ///Creates the “arrowshape.right.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "arrowshape.right.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.arrowshape.turn.up.backward {
    public struct badge {
        public struct clock {
            public struct fill {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “arrowshape.turn.up.backward.badge.clock.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.badge.clock.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “arrowshape.turn.up.backward.badge.clock.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.badge.clock.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “arrowshape.turn.up.backward.badge.clock.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.badge.clock.fill", configuration: configuration)
                }
                
                ///Creates the “arrowshape.turn.up.backward.badge.clock.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "arrowshape.turn.up.backward.badge.clock.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “arrowshape.turn.up.backward.badge.clock.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.badge.clock.fill")
                }
                
                ///Creates the “arrowshape.turn.up.backward.badge.clock.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "arrowshape.turn.up.backward.badge.clock.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct rtl {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.backward.end {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “backward.end.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "backward.end.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “backward.end.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "backward.end.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “backward.end.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "backward.end.circle.fill", configuration: configuration)
            }
            
            ///Creates the “backward.end.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "backward.end.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “backward.end.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "backward.end.circle.fill")
            }
            
            ///Creates the “backward.end.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "backward.end.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.bag.badge {
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.bag.fill.badge {
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.battery.x100 {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “battery.100.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "battery.100.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “battery.100.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "battery.100.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “battery.100.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "battery.100.circle.fill", configuration: configuration)
            }
            
            ///Creates the “battery.100.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "battery.100.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “battery.100.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "battery.100.circle.fill")
            }
            
            ///Creates the “battery.100.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "battery.100.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.bell.and {
    public struct waves {
        public struct left {
            public struct and {
                public struct right {
                    public struct fill {
                        private init() {}
                        #if os(macOS)
                        
                        ///Creates the “bell.and.waves.left.and.right.fill” system symbol image with the accessibility description you specify.
                        ///
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "bell.and.waves.left.and.right.fill", accessibilityDescription: accessibilityDescription)
                        }
                        
                        ///Creates the “bell.and.waves.left.and.right.fill” system symbol image with the variable value you specify.
                        ///
                        ///The value parameter is valid for symbols that support variable rendering.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                        @available(macOS 13.0, *)
                        @available(iOS, unavailable)
                        @available(tvOS, unavailable)
                        @available(watchOS, unavailable)
                        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                            SFSymbolReference.image(name: "bell.and.waves.left.and.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                        }
                        
                        #endif
                        
                        #if os(iOS) || os(tvOS) || os(watchOS)
                        
                        ///Creates the “bell.and.waves.left.and.right.fill” system symbol image object with the specified configuration.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(macOS, unavailable)
                        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "bell.and.waves.left.and.right.fill", configuration: configuration)
                        }
                        
                        ///Creates the “bell.and.waves.left.and.right.fill” system symbol image object with the configuration and variable value you specify.
                        ///
                        ///Use this method to retrieve system-defined symbol images.
                        ///
                        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                        ///- Parameter configuration: The image configuration the system applies to the image.
                        ///
                        ///- Returns: The object containing the image variant that matches the specified configuration data.
                        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        @available(macOS, unavailable)
                        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                            SFSymbolReference.image(name: "bell.and.waves.left.and.right.fill", variableValue: variableValue, configuration: configuration)
                        }
                        
                        #endif
                        
                        #if canImport(SwiftUI)
                        ///Creates the “bell.and.waves.left.and.right.fill” system symbol image.
                        ///
                        ///This initializer creates an image using a system-provided symbol.
                        public static func swiftUIImage() -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "bell.and.waves.left.and.right.fill")
                        }
                        
                        ///Creates the “bell.and.waves.left.and.right.fill” system symbol image with a variable value.
                        ///
                        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                        ///
                        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                            SFSymbolReference.swiftUIImage(name: "bell.and.waves.left.and.right.fill", variableValue: variableValue)
                        }
                        
                        #endif
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.bolt {
    public struct brakesignal {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.bolt.badge {
    public struct clock {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “bolt.badge.clock.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.badge.clock.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “bolt.badge.clock.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "bolt.badge.clock.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “bolt.badge.clock.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.badge.clock.fill", configuration: configuration)
            }
            
            ///Creates the “bolt.badge.clock.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "bolt.badge.clock.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “bolt.badge.clock.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.badge.clock.fill")
            }
            
            ///Creates the “bolt.badge.clock.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "bolt.badge.clock.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cart.badge {
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cart.fill.badge {
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.character {
    public struct duployan {
        private init() {}
    }
    
    public struct phonetic {
        private init() {}
    }
    
    public struct sutton {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.chart.line {
    public struct downtrend {
        public struct xyaxis {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “chart.line.downtrend.xyaxis.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "chart.line.downtrend.xyaxis.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “chart.line.downtrend.xyaxis.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "chart.line.downtrend.xyaxis.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “chart.line.downtrend.xyaxis.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "chart.line.downtrend.xyaxis.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “chart.line.downtrend.xyaxis.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "chart.line.downtrend.xyaxis.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “chart.line.downtrend.xyaxis.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "chart.line.downtrend.xyaxis.circle.fill")
                    }
                    
                    ///Creates the “chart.line.downtrend.xyaxis.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "chart.line.downtrend.xyaxis.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct flattrend {
        public struct xyaxis {
            public struct circle {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “chart.line.flattrend.xyaxis.circle.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "chart.line.flattrend.xyaxis.circle.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “chart.line.flattrend.xyaxis.circle.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "chart.line.flattrend.xyaxis.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “chart.line.flattrend.xyaxis.circle.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "chart.line.flattrend.xyaxis.circle.fill", configuration: configuration)
                    }
                    
                    ///Creates the “chart.line.flattrend.xyaxis.circle.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "chart.line.flattrend.xyaxis.circle.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “chart.line.flattrend.xyaxis.circle.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "chart.line.flattrend.xyaxis.circle.fill")
                    }
                    
                    ///Creates the “chart.line.flattrend.xyaxis.circle.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "chart.line.flattrend.xyaxis.circle.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.checklist {
    public struct checked {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct unchecked {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.checkmark {
    public struct message {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “checkmark.message.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.message.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “checkmark.message.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "checkmark.message.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “checkmark.message.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.message.fill", configuration: configuration)
            }
            
            ///Creates the “checkmark.message.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "checkmark.message.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “checkmark.message.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.message.fill")
            }
            
            ///Creates the “checkmark.message.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "checkmark.message.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.checkmark.circle {
    public struct badge {
        public struct questionmark {
            public struct ar {
                private init() {}
            }
            
            public struct fill {
                public struct ar {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “checkmark.circle.badge.questionmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "checkmark.circle.badge.questionmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “checkmark.circle.badge.questionmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "checkmark.circle.badge.questionmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “checkmark.circle.badge.questionmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "checkmark.circle.badge.questionmark.fill", configuration: configuration)
                }
                
                ///Creates the “checkmark.circle.badge.questionmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "checkmark.circle.badge.questionmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “checkmark.circle.badge.questionmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "checkmark.circle.badge.questionmark.fill")
                }
                
                ///Creates the “checkmark.circle.badge.questionmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "checkmark.circle.badge.questionmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct xmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “checkmark.circle.badge.xmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "checkmark.circle.badge.xmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “checkmark.circle.badge.xmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "checkmark.circle.badge.xmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “checkmark.circle.badge.xmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "checkmark.circle.badge.xmark.fill", configuration: configuration)
                }
                
                ///Creates the “checkmark.circle.badge.xmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "checkmark.circle.badge.xmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “checkmark.circle.badge.xmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "checkmark.circle.badge.xmark.fill")
                }
                
                ///Creates the “checkmark.circle.badge.xmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "checkmark.circle.badge.xmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.chevron.backward {
    public struct to {
        public struct line {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.chevron.forward {
    public struct to {
        public struct line {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.chevron.left {
    public struct to {
        public struct line {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.chevron.right {
    public struct to {
        public struct line {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.circle {
    public struct filled {
        public struct pattern {
            public struct diagonalline {
                public struct rectangle {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct rectangle {
        public struct dashed {
            private init() {}
        }
        
        public struct filled {
            public struct pattern {
                public struct diagonalline {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.circle.dashed {
    public struct rectangle {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.clock.badge {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “clock.badge.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "clock.badge.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “clock.badge.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "clock.badge.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “clock.badge.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "clock.badge.fill", configuration: configuration)
        }
        
        ///Creates the “clock.badge.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "clock.badge.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “clock.badge.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "clock.badge.fill")
        }
        
        ///Creates the “clock.badge.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "clock.badge.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        public struct fill {
            public struct ar {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “clock.badge.questionmark.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "clock.badge.questionmark.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “clock.badge.questionmark.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "clock.badge.questionmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “clock.badge.questionmark.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "clock.badge.questionmark.fill", configuration: configuration)
            }
            
            ///Creates the “clock.badge.questionmark.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "clock.badge.questionmark.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “clock.badge.questionmark.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "clock.badge.questionmark.fill")
            }
            
            ///Creates the “clock.badge.questionmark.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "clock.badge.questionmark.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct xmark {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “clock.badge.xmark.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "clock.badge.xmark.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “clock.badge.xmark.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "clock.badge.xmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “clock.badge.xmark.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "clock.badge.xmark.fill", configuration: configuration)
            }
            
            ///Creates the “clock.badge.xmark.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "clock.badge.xmark.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “clock.badge.xmark.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "clock.badge.xmark.fill")
            }
            
            ///Creates the “clock.badge.xmark.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "clock.badge.xmark.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.circle.fill")
            }
            
            ///Creates the “cloud.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.bolt {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.bolt.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.bolt.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.bolt.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.bolt.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.bolt.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.bolt.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.bolt.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.bolt.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.bolt.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.bolt.circle.fill")
            }
            
            ///Creates the “cloud.bolt.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.bolt.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.bolt.rain {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.bolt.rain.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.bolt.rain.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.bolt.rain.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.bolt.rain.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.bolt.rain.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.bolt.rain.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.bolt.rain.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.bolt.rain.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.bolt.rain.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.bolt.rain.circle.fill")
            }
            
            ///Creates the “cloud.bolt.rain.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.bolt.rain.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.drizzle {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.drizzle.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.drizzle.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.drizzle.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.drizzle.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.drizzle.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.drizzle.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.drizzle.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.drizzle.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.drizzle.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.drizzle.circle.fill")
            }
            
            ///Creates the “cloud.drizzle.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.drizzle.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.fog {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.fog.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.fog.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.fog.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.fog.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.fog.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.fog.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.fog.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.fog.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.fog.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.fog.circle.fill")
            }
            
            ///Creates the “cloud.fog.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.fog.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.hail {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.hail.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.hail.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.hail.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.hail.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.hail.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.hail.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.hail.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.hail.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.hail.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.hail.circle.fill")
            }
            
            ///Creates the “cloud.hail.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.hail.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.heavyrain {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.heavyrain.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.heavyrain.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.heavyrain.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.heavyrain.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.heavyrain.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.heavyrain.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.heavyrain.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.heavyrain.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.heavyrain.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.heavyrain.circle.fill")
            }
            
            ///Creates the “cloud.heavyrain.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.heavyrain.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.moon {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.moon.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.moon.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.moon.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.moon.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.moon.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.moon.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.moon.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.moon.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.moon.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.moon.circle.fill")
            }
            
            ///Creates the “cloud.moon.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.moon.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.moon.bolt {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.moon.bolt.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.moon.bolt.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.moon.bolt.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.moon.bolt.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.moon.bolt.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.moon.bolt.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.moon.bolt.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.moon.bolt.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.moon.bolt.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.moon.bolt.circle.fill")
            }
            
            ///Creates the “cloud.moon.bolt.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.moon.bolt.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.moon.rain {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.moon.rain.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.moon.rain.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.moon.rain.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.moon.rain.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.moon.rain.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.moon.rain.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.moon.rain.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.moon.rain.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.moon.rain.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.moon.rain.circle.fill")
            }
            
            ///Creates the “cloud.moon.rain.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.moon.rain.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.rain {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.rain.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.rain.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.rain.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.rain.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.rain.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.rain.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.rain.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.rain.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.rain.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.rain.circle.fill")
            }
            
            ///Creates the “cloud.rain.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.rain.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.sleet {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.sleet.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.sleet.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.sleet.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.sleet.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.sleet.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.sleet.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.sleet.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.sleet.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.sleet.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.sleet.circle.fill")
            }
            
            ///Creates the “cloud.sleet.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.sleet.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.snow {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.snow.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.snow.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.snow.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.snow.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.snow.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.snow.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.snow.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.snow.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.snow.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.snow.circle.fill")
            }
            
            ///Creates the “cloud.snow.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.snow.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.sun {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.sun.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.sun.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.sun.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.sun.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.sun.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.sun.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.sun.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.sun.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.sun.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.sun.circle.fill")
            }
            
            ///Creates the “cloud.sun.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.sun.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.sun.bolt {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.sun.bolt.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.sun.bolt.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.sun.bolt.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.sun.bolt.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.sun.bolt.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.sun.bolt.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.sun.bolt.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.sun.bolt.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.sun.bolt.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.sun.bolt.circle.fill")
            }
            
            ///Creates the “cloud.sun.bolt.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.sun.bolt.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cloud.sun.rain {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “cloud.sun.rain.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.sun.rain.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “cloud.sun.rain.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "cloud.sun.rain.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “cloud.sun.rain.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.sun.rain.circle.fill", configuration: configuration)
            }
            
            ///Creates the “cloud.sun.rain.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "cloud.sun.rain.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “cloud.sun.rain.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.sun.rain.circle.fill")
            }
            
            ///Creates the “cloud.sun.rain.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "cloud.sun.rain.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.creditcard {
    public struct viewfinder {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.cursorarrow.square {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “cursorarrow.square.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "cursorarrow.square.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “cursorarrow.square.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "cursorarrow.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “cursorarrow.square.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "cursorarrow.square.fill", configuration: configuration)
        }
        
        ///Creates the “cursorarrow.square.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "cursorarrow.square.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “cursorarrow.square.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "cursorarrow.square.fill")
        }
        
        ///Creates the “cursorarrow.square.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "cursorarrow.square.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.dial {
    public struct high {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dial.high.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.high.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dial.high.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.high.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dial.high.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.high.fill", configuration: configuration)
            }
            
            ///Creates the “dial.high.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.high.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dial.high.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.high.fill")
            }
            
            ///Creates the “dial.high.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.high.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct low {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dial.low.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.low.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dial.low.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.low.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dial.low.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.low.fill", configuration: configuration)
            }
            
            ///Creates the “dial.low.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.low.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dial.low.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.low.fill")
            }
            
            ///Creates the “dial.low.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.low.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct medium {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “dial.medium.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.medium.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “dial.medium.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "dial.medium.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “dial.medium.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.medium.fill", configuration: configuration)
            }
            
            ///Creates the “dial.medium.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "dial.medium.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “dial.medium.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.medium.fill")
            }
            
            ///Creates the “dial.medium.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "dial.medium.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.doc.badge {
    public struct arrow {
        public struct up {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “doc.badge.arrow.up.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "doc.badge.arrow.up.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “doc.badge.arrow.up.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "doc.badge.arrow.up.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “doc.badge.arrow.up.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "doc.badge.arrow.up.fill", configuration: configuration)
                }
                
                ///Creates the “doc.badge.arrow.up.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "doc.badge.arrow.up.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “doc.badge.arrow.up.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "doc.badge.arrow.up.fill")
                }
                
                ///Creates the “doc.badge.arrow.up.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "doc.badge.arrow.up.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.dollarsign {
    public struct arrow {
        public struct circlepath {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.drop {
    public struct degreesign {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “drop.degreesign.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "drop.degreesign.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “drop.degreesign.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "drop.degreesign.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “drop.degreesign.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "drop.degreesign.fill", configuration: configuration)
            }
            
            ///Creates the “drop.degreesign.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "drop.degreesign.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “drop.degreesign.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "drop.degreesign.fill")
            }
            
            ///Creates the “drop.degreesign.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "drop.degreesign.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct slash {
            public struct fill {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “drop.degreesign.slash.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "drop.degreesign.slash.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “drop.degreesign.slash.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "drop.degreesign.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “drop.degreesign.slash.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "drop.degreesign.slash.fill", configuration: configuration)
                }
                
                ///Creates the “drop.degreesign.slash.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "drop.degreesign.slash.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “drop.degreesign.slash.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "drop.degreesign.slash.fill")
                }
                
                ///Creates the “drop.degreesign.slash.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "drop.degreesign.slash.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct rtl {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct keypad {
        public struct rectangle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “drop.keypad.rectangle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "drop.keypad.rectangle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “drop.keypad.rectangle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "drop.keypad.rectangle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “drop.keypad.rectangle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "drop.keypad.rectangle.fill", configuration: configuration)
                }
                
                ///Creates the “drop.keypad.rectangle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "drop.keypad.rectangle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “drop.keypad.rectangle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "drop.keypad.rectangle.fill")
                }
                
                ///Creates the “drop.keypad.rectangle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "drop.keypad.rectangle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.ellipsis {
    public struct message {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “ellipsis.message.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ellipsis.message.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “ellipsis.message.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "ellipsis.message.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “ellipsis.message.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ellipsis.message.fill", configuration: configuration)
            }
            
            ///Creates the “ellipsis.message.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "ellipsis.message.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “ellipsis.message.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ellipsis.message.fill")
            }
            
            ///Creates the “ellipsis.message.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "ellipsis.message.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.envelope.open {
    public struct badge {
        public struct clock {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.exclamationmark {
    public struct brakesignal {
        private init() {}
    }
    
    public struct lock {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “exclamationmark.lock.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "exclamationmark.lock.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “exclamationmark.lock.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "exclamationmark.lock.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “exclamationmark.lock.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "exclamationmark.lock.fill", configuration: configuration)
            }
            
            ///Creates the “exclamationmark.lock.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "exclamationmark.lock.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “exclamationmark.lock.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "exclamationmark.lock.fill")
            }
            
            ///Creates the “exclamationmark.lock.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "exclamationmark.lock.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.externaldrive {
    public struct trianglebadge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.externaldrive.badge {
    public struct exclamationmark {
        private init() {}
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.externaldrive.fill {
    public struct trianglebadge {
        public struct exclamationmark {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.externaldrive.fill.badge {
    public struct exclamationmark {
        private init() {}
    }
    
    public struct questionmark {
        public struct ar {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.face.smiling {
    public struct inverse {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.fanblades {
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “fanblades.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fanblades.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “fanblades.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "fanblades.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “fanblades.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fanblades.slash.fill", configuration: configuration)
            }
            
            ///Creates the “fanblades.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "fanblades.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “fanblades.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fanblades.slash.fill")
            }
            
            ///Creates the “fanblades.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "fanblades.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.faxmachine {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “faxmachine.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "faxmachine.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “faxmachine.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "faxmachine.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “faxmachine.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "faxmachine.fill", configuration: configuration)
        }
        
        ///Creates the “faxmachine.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "faxmachine.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “faxmachine.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "faxmachine.fill")
        }
        
        ///Creates the “faxmachine.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "faxmachine.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.figure {
    public struct x2 {
        public struct and {
            public struct child {
                public struct holdinghands {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct arms {
            public struct open {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct american {
        public struct football {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct and {
        public struct child {
            public struct holdinghands {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct archery {
        private init() {}
    }
    
    public struct arms {
        public struct open {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct australian {
        public struct football {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct badminton {
        private init() {}
    }
    
    public struct barre {
        private init() {}
    }
    
    public struct baseball {
        private init() {}
    }
    
    public struct basketball {
        private init() {}
    }
    
    public struct bowling {
        private init() {}
    }
    
    public struct boxing {
        private init() {}
    }
    
    public struct climbing {
        private init() {}
    }
    
    public struct cooldown {
        private init() {}
    }
    
    public struct core {
        public struct training {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cricket {
        private init() {}
    }
    
    public struct cross {
        public struct training {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct curling {
        private init() {}
    }
    
    public struct dance {
        private init() {}
    }
    
    public struct disc {
        public struct sports {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dress {
        public struct line {
            public struct vertical {
                public struct figure {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct elliptical {
        private init() {}
    }
    
    public struct equestrian {
        public struct sports {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct fall {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “figure.fall.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "figure.fall.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “figure.fall.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "figure.fall.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “figure.fall.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "figure.fall.circle.fill", configuration: configuration)
                }
                
                ///Creates the “figure.fall.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "figure.fall.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “figure.fall.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "figure.fall.circle.fill")
                }
                
                ///Creates the “figure.fall.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "figure.fall.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct fencing {
        private init() {}
    }
    
    public struct fishing {
        private init() {}
    }
    
    public struct flexibility {
        private init() {}
    }
    
    public struct golf {
        private init() {}
    }
    
    public struct gymnastics {
        private init() {}
    }
    
    public struct hand {
        public struct cycling {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct handball {
        private init() {}
    }
    
    public struct highintensity {
        public struct intervaltraining {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct hiking {
        private init() {}
    }
    
    public struct hockey {
        private init() {}
    }
    
    public struct hunting {
        private init() {}
    }
    
    public struct indoor {
        public struct cycle {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct jumprope {
        private init() {}
    }
    
    public struct kickboxing {
        private init() {}
    }
    
    public struct lacrosse {
        private init() {}
    }
    
    public struct martial {
        public struct arts {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct mind {
        public struct and {
            public struct body {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct mixed {
        public struct cardio {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct open {
        public struct water {
            public struct swim {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct outdoor {
        public struct cycle {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct pickleball {
        private init() {}
    }
    
    public struct pilates {
        private init() {}
    }
    
    public struct play {
        private init() {}
    }
    
    public struct pool {
        public struct swim {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct racquetball {
        private init() {}
    }
    
    public struct rolling {
        private init() {}
    }
    
    public struct rower {
        private init() {}
    }
    
    public struct rugby {
        private init() {}
    }
    
    public struct run {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “figure.run.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "figure.run.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “figure.run.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "figure.run.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “figure.run.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "figure.run.circle.fill", configuration: configuration)
                }
                
                ///Creates the “figure.run.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "figure.run.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “figure.run.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "figure.run.circle.fill")
                }
                
                ///Creates the “figure.run.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "figure.run.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct sailing {
        private init() {}
    }
    
    public struct skating {
        private init() {}
    }
    
    public struct skiing {
        public struct crosscountry {
            private init() {}
        }
        
        public struct downhill {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct snowboarding {
        private init() {}
    }
    
    public struct soccer {
        private init() {}
    }
    
    public struct socialdance {
        private init() {}
    }
    
    public struct softball {
        private init() {}
    }
    
    public struct squash {
        private init() {}
    }
    
    public struct stair {
        public struct stepper {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct stairs {
        private init() {}
    }
    
    public struct step {
        public struct training {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct strengthtraining {
        public struct functional {
            private init() {}
        }
        
        public struct traditional {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct surfing {
        private init() {}
    }
    
    public struct table {
        public struct tennis {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct taichi {
        private init() {}
    }
    
    public struct tennis {
        private init() {}
    }
    
    public struct track {
        public struct and {
            public struct field {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct volleyball {
        private init() {}
    }
    
    public struct water {
        public struct fitness {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct waterpolo {
        private init() {}
    }
    
    public struct wrestling {
        private init() {}
    }
    
    public struct yoga {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.figure.roll {
    public struct runningpace {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.figure.walk {
    public struct arrival {
        private init() {}
    }
    
    public struct departure {
        private init() {}
    }
    
    public struct motion {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.film {
    public struct stack {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “film.stack.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "film.stack.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “film.stack.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "film.stack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “film.stack.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "film.stack.fill", configuration: configuration)
            }
            
            ///Creates the “film.stack.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "film.stack.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “film.stack.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "film.stack.fill")
            }
            
            ///Creates the “film.stack.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "film.stack.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.flag {
    public struct checkered {
        public struct x2 {
            public struct crossed {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.flag.x2.crossed {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “flag.2.crossed.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "flag.2.crossed.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “flag.2.crossed.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "flag.2.crossed.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “flag.2.crossed.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "flag.2.crossed.circle.fill", configuration: configuration)
            }
            
            ///Creates the “flag.2.crossed.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "flag.2.crossed.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “flag.2.crossed.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "flag.2.crossed.circle.fill")
            }
            
            ///Creates the “flag.2.crossed.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "flag.2.crossed.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.forward.end {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “forward.end.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "forward.end.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “forward.end.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "forward.end.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “forward.end.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "forward.end.circle.fill", configuration: configuration)
            }
            
            ///Creates the “forward.end.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "forward.end.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “forward.end.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "forward.end.circle.fill")
            }
            
            ///Creates the “forward.end.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "forward.end.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.gauge {
    public struct high {
        private init() {}
    }
    
    public struct low {
        private init() {}
    }
    
    public struct medium {
        public struct badge {
            public struct minus {
                private init() {}
            }
            
            public struct plus {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.gear.badge {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.gearshape {
    public struct arrow {
        public struct triangle {
            public struct x2 {
                public struct circlepath {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.globe {
    public struct central {
        public struct south {
            public struct asia {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “globe.central.south.asia.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "globe.central.south.asia.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “globe.central.south.asia.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "globe.central.south.asia.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “globe.central.south.asia.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "globe.central.south.asia.fill", configuration: configuration)
                    }
                    
                    ///Creates the “globe.central.south.asia.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "globe.central.south.asia.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “globe.central.south.asia.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "globe.central.south.asia.fill")
                    }
                    
                    ///Creates the “globe.central.south.asia.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "globe.central.south.asia.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct desk {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “globe.desk.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "globe.desk.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “globe.desk.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "globe.desk.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “globe.desk.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "globe.desk.fill", configuration: configuration)
            }
            
            ///Creates the “globe.desk.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "globe.desk.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “globe.desk.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "globe.desk.fill")
            }
            
            ///Creates the “globe.desk.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "globe.desk.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.hand {
    public struct app {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hand.app.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.app.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hand.app.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hand.app.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hand.app.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.app.fill", configuration: configuration)
            }
            
            ///Creates the “hand.app.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hand.app.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hand.app.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.app.fill")
            }
            
            ///Creates the “hand.app.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hand.app.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.hand.raised {
    public struct fingers {
        public struct spread {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “hand.raised.fingers.spread.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hand.raised.fingers.spread.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “hand.raised.fingers.spread.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "hand.raised.fingers.spread.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “hand.raised.fingers.spread.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hand.raised.fingers.spread.fill", configuration: configuration)
                }
                
                ///Creates the “hand.raised.fingers.spread.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "hand.raised.fingers.spread.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “hand.raised.fingers.spread.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hand.raised.fingers.spread.fill")
                }
                
                ///Creates the “hand.raised.fingers.spread.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "hand.raised.fingers.spread.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.hearingdevice {
    public struct and {
        public struct signal {
            public struct meter {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “hearingdevice.and.signal.meter.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "hearingdevice.and.signal.meter.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “hearingdevice.and.signal.meter.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "hearingdevice.and.signal.meter.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “hearingdevice.and.signal.meter.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "hearingdevice.and.signal.meter.fill", configuration: configuration)
                    }
                    
                    ///Creates the “hearingdevice.and.signal.meter.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "hearingdevice.and.signal.meter.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “hearingdevice.and.signal.meter.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "hearingdevice.and.signal.meter.fill")
                    }
                    
                    ///Creates the “hearingdevice.and.signal.meter.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "hearingdevice.and.signal.meter.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.hearingdevice.ear {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “hearingdevice.ear.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "hearingdevice.ear.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “hearingdevice.ear.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "hearingdevice.ear.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “hearingdevice.ear.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "hearingdevice.ear.fill", configuration: configuration)
        }
        
        ///Creates the “hearingdevice.ear.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "hearingdevice.ear.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “hearingdevice.ear.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "hearingdevice.ear.fill")
        }
        
        ///Creates the “hearingdevice.ear.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "hearingdevice.ear.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.hifispeaker.and.appletv {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.hifispeaker.and.appletv.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.homepod.and.appletv {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.homepod.and.appletv.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.homepodmini.and.appletv {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.homepodmini.and.appletv.fill {
    public struct rtl {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.hurricane {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “hurricane.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hurricane.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “hurricane.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "hurricane.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “hurricane.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hurricane.circle.fill", configuration: configuration)
            }
            
            ///Creates the “hurricane.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "hurricane.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “hurricane.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hurricane.circle.fill")
            }
            
            ///Creates the “hurricane.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "hurricane.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.info {
    public struct bubble {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “info.bubble.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "info.bubble.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “info.bubble.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "info.bubble.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “info.bubble.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "info.bubble.fill", configuration: configuration)
            }
            
            ///Creates the “info.bubble.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "info.bubble.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “info.bubble.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "info.bubble.fill")
            }
            
            ///Creates the “info.bubble.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "info.bubble.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “info.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "info.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “info.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "info.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “info.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "info.square.fill", configuration: configuration)
            }
            
            ///Creates the “info.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "info.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “info.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "info.square.fill")
            }
            
            ///Creates the “info.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "info.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.keyboard.badge {
    public struct eye {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “keyboard.badge.eye.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "keyboard.badge.eye.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “keyboard.badge.eye.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "keyboard.badge.eye.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “keyboard.badge.eye.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "keyboard.badge.eye.fill", configuration: configuration)
            }
            
            ///Creates the “keyboard.badge.eye.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "keyboard.badge.eye.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “keyboard.badge.eye.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "keyboard.badge.eye.fill")
            }
            
            ///Creates the “keyboard.badge.eye.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "keyboard.badge.eye.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.keyboard.badge.ellipsis {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “keyboard.badge.ellipsis.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.badge.ellipsis.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “keyboard.badge.ellipsis.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.badge.ellipsis.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “keyboard.badge.ellipsis.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.badge.ellipsis.fill", configuration: configuration)
        }
        
        ///Creates the “keyboard.badge.ellipsis.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.badge.ellipsis.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “keyboard.badge.ellipsis.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.badge.ellipsis.fill")
        }
        
        ///Creates the “keyboard.badge.ellipsis.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.badge.ellipsis.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.keyboard.chevron.compact.down {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “keyboard.chevron.compact.down.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.chevron.compact.down.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “keyboard.chevron.compact.down.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.chevron.compact.down.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “keyboard.chevron.compact.down.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.chevron.compact.down.fill", configuration: configuration)
        }
        
        ///Creates the “keyboard.chevron.compact.down.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.chevron.compact.down.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “keyboard.chevron.compact.down.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.chevron.compact.down.fill")
        }
        
        ///Creates the “keyboard.chevron.compact.down.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.chevron.compact.down.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.keyboard.chevron.compact.left {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “keyboard.chevron.compact.left.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.chevron.compact.left.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “keyboard.chevron.compact.left.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.chevron.compact.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “keyboard.chevron.compact.left.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.chevron.compact.left.fill", configuration: configuration)
        }
        
        ///Creates the “keyboard.chevron.compact.left.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.chevron.compact.left.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “keyboard.chevron.compact.left.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.chevron.compact.left.fill")
        }
        
        ///Creates the “keyboard.chevron.compact.left.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.chevron.compact.left.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.keyboard.onehanded.left {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “keyboard.onehanded.left.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.onehanded.left.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “keyboard.onehanded.left.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.onehanded.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “keyboard.onehanded.left.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.onehanded.left.fill", configuration: configuration)
        }
        
        ///Creates the “keyboard.onehanded.left.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.onehanded.left.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “keyboard.onehanded.left.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.onehanded.left.fill")
        }
        
        ///Creates the “keyboard.onehanded.left.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.onehanded.left.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.keyboard.onehanded.right {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “keyboard.onehanded.right.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.onehanded.right.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “keyboard.onehanded.right.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "keyboard.onehanded.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “keyboard.onehanded.right.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.onehanded.right.fill", configuration: configuration)
        }
        
        ///Creates the “keyboard.onehanded.right.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "keyboard.onehanded.right.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “keyboard.onehanded.right.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.onehanded.right.fill")
        }
        
        ///Creates the “keyboard.onehanded.right.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "keyboard.onehanded.right.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.laptopcomputer.and {
    public struct ipad {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.light {
    public struct beacon {
        public struct max {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “light.beacon.max.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.beacon.max.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “light.beacon.max.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.beacon.max.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “light.beacon.max.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.beacon.max.fill", configuration: configuration)
                }
                
                ///Creates the “light.beacon.max.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.beacon.max.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “light.beacon.max.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.beacon.max.fill")
                }
                
                ///Creates the “light.beacon.max.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.beacon.max.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct min {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “light.beacon.min.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.beacon.min.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “light.beacon.min.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.beacon.min.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “light.beacon.min.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.beacon.min.fill", configuration: configuration)
                }
                
                ///Creates the “light.beacon.min.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.beacon.min.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “light.beacon.min.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.beacon.min.fill")
                }
                
                ///Creates the “light.beacon.min.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.beacon.min.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct cylindrical {
        public struct ceiling {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “light.cylindrical.ceiling.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.cylindrical.ceiling.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “light.cylindrical.ceiling.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.cylindrical.ceiling.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “light.cylindrical.ceiling.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.cylindrical.ceiling.fill", configuration: configuration)
                }
                
                ///Creates the “light.cylindrical.ceiling.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.cylindrical.ceiling.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “light.cylindrical.ceiling.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.cylindrical.ceiling.fill")
                }
                
                ///Creates the “light.cylindrical.ceiling.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.cylindrical.ceiling.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct inverse {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct panel {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “light.panel.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "light.panel.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “light.panel.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "light.panel.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “light.panel.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "light.panel.fill", configuration: configuration)
            }
            
            ///Creates the “light.panel.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "light.panel.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “light.panel.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "light.panel.fill")
            }
            
            ///Creates the “light.panel.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "light.panel.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct recessed {
        public struct x3 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “light.recessed.3.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.recessed.3.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “light.recessed.3.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.recessed.3.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “light.recessed.3.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.recessed.3.fill", configuration: configuration)
                }
                
                ///Creates the “light.recessed.3.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.recessed.3.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “light.recessed.3.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.recessed.3.fill")
                }
                
                ///Creates the “light.recessed.3.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.recessed.3.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct inverse {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “light.recessed.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "light.recessed.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “light.recessed.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "light.recessed.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “light.recessed.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "light.recessed.fill", configuration: configuration)
            }
            
            ///Creates the “light.recessed.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "light.recessed.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “light.recessed.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "light.recessed.fill")
            }
            
            ///Creates the “light.recessed.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "light.recessed.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct inverse {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct ribbon {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “light.ribbon.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "light.ribbon.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “light.ribbon.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "light.ribbon.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “light.ribbon.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "light.ribbon.fill", configuration: configuration)
            }
            
            ///Creates the “light.ribbon.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "light.ribbon.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “light.ribbon.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "light.ribbon.fill")
            }
            
            ///Creates the “light.ribbon.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "light.ribbon.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct strip {
        public struct x2 {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “light.strip.2.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.strip.2.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “light.strip.2.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "light.strip.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “light.strip.2.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.strip.2.fill", configuration: configuration)
                }
                
                ///Creates the “light.strip.2.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "light.strip.2.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “light.strip.2.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.strip.2.fill")
                }
                
                ///Creates the “light.strip.2.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "light.strip.2.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.lightbulb {
    public struct x2 {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lightbulb.2.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lightbulb.2.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lightbulb.2.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lightbulb.2.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lightbulb.2.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lightbulb.2.fill", configuration: configuration)
            }
            
            ///Creates the “lightbulb.2.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lightbulb.2.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lightbulb.2.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lightbulb.2.fill")
            }
            
            ///Creates the “lightbulb.2.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lightbulb.2.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct led {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “lightbulb.led.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lightbulb.led.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “lightbulb.led.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "lightbulb.led.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “lightbulb.led.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lightbulb.led.fill", configuration: configuration)
            }
            
            ///Creates the “lightbulb.led.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "lightbulb.led.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “lightbulb.led.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lightbulb.led.fill")
            }
            
            ///Creates the “lightbulb.led.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "lightbulb.led.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct wide {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lightbulb.led.wide.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lightbulb.led.wide.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lightbulb.led.wide.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lightbulb.led.wide.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lightbulb.led.wide.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lightbulb.led.wide.fill", configuration: configuration)
                }
                
                ///Creates the “lightbulb.led.wide.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lightbulb.led.wide.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lightbulb.led.wide.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lightbulb.led.wide.fill")
                }
                
                ///Creates the “lightbulb.led.wide.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lightbulb.led.wide.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.list {
    public struct clipboard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “list.clipboard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "list.clipboard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “list.clipboard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "list.clipboard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “list.clipboard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "list.clipboard.fill", configuration: configuration)
            }
            
            ///Creates the “list.clipboard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "list.clipboard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “list.clipboard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "list.clipboard.fill")
            }
            
            ///Creates the “list.clipboard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "list.clipboard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.list.bullet {
    public struct clipboard {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “list.bullet.clipboard.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "list.bullet.clipboard.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “list.bullet.clipboard.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "list.bullet.clipboard.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “list.bullet.clipboard.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "list.bullet.clipboard.fill", configuration: configuration)
            }
            
            ///Creates the “list.bullet.clipboard.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "list.bullet.clipboard.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “list.bullet.clipboard.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "list.bullet.clipboard.fill")
            }
            
            ///Creates the “list.bullet.clipboard.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "list.bullet.clipboard.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.location.slash {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “location.slash.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "location.slash.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “location.slash.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "location.slash.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “location.slash.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "location.slash.circle.fill", configuration: configuration)
            }
            
            ///Creates the “location.slash.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "location.slash.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “location.slash.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "location.slash.circle.fill")
            }
            
            ///Creates the “location.slash.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "location.slash.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.lock {
    public struct trianglebadge {
        public struct exclamationmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lock.trianglebadge.exclamationmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lock.trianglebadge.exclamationmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lock.trianglebadge.exclamationmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lock.trianglebadge.exclamationmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lock.trianglebadge.exclamationmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lock.trianglebadge.exclamationmark.fill", configuration: configuration)
                }
                
                ///Creates the “lock.trianglebadge.exclamationmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lock.trianglebadge.exclamationmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lock.trianglebadge.exclamationmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lock.trianglebadge.exclamationmark.fill")
                }
                
                ///Creates the “lock.trianglebadge.exclamationmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lock.trianglebadge.exclamationmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.lock.open {
    public struct trianglebadge {
        public struct exclamationmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “lock.open.trianglebadge.exclamationmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lock.open.trianglebadge.exclamationmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “lock.open.trianglebadge.exclamationmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "lock.open.trianglebadge.exclamationmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “lock.open.trianglebadge.exclamationmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lock.open.trianglebadge.exclamationmark.fill", configuration: configuration)
                }
                
                ///Creates the “lock.open.trianglebadge.exclamationmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "lock.open.trianglebadge.exclamationmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “lock.open.trianglebadge.exclamationmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lock.open.trianglebadge.exclamationmark.fill")
                }
                
                ///Creates the “lock.open.trianglebadge.exclamationmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "lock.open.trianglebadge.exclamationmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.message {
    public struct badge {
        public struct circle {
            public struct fill {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “message.badge.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "message.badge.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “message.badge.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "message.badge.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “message.badge.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "message.badge.circle.fill", configuration: configuration)
                }
                
                ///Creates the “message.badge.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "message.badge.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “message.badge.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "message.badge.circle.fill")
                }
                
                ///Creates the “message.badge.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "message.badge.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct rtl {
                private init() {}
            }
            
            private init() {}
        }
        
        public struct fill {
            public struct rtl {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “message.badge.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "message.badge.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “message.badge.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "message.badge.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “message.badge.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "message.badge.fill", configuration: configuration)
            }
            
            ///Creates the “message.badge.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "message.badge.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “message.badge.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "message.badge.fill")
            }
            
            ///Creates the “message.badge.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "message.badge.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct filled {
            public struct fill {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “message.badge.filled.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "message.badge.filled.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “message.badge.filled.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "message.badge.filled.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “message.badge.filled.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "message.badge.filled.fill", configuration: configuration)
                }
                
                ///Creates the “message.badge.filled.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "message.badge.filled.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “message.badge.filled.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "message.badge.filled.fill")
                }
                
                ///Creates the “message.badge.filled.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "message.badge.filled.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.mic {
    public struct and {
        public struct signal {
            public struct meter {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “mic.and.signal.meter.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "mic.and.signal.meter.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “mic.and.signal.meter.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "mic.and.signal.meter.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “mic.and.signal.meter.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "mic.and.signal.meter.fill", configuration: configuration)
                    }
                    
                    ///Creates the “mic.and.signal.meter.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "mic.and.signal.meter.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “mic.and.signal.meter.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "mic.and.signal.meter.fill")
                    }
                    
                    ///Creates the “mic.and.signal.meter.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "mic.and.signal.meter.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.mic.badge {
    public struct xmark {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.mic.fill.badge {
    public struct xmark {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.moon {
    public struct haze {
        public struct circle {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “moon.haze.circle.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "moon.haze.circle.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “moon.haze.circle.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "moon.haze.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “moon.haze.circle.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "moon.haze.circle.fill", configuration: configuration)
                }
                
                ///Creates the “moon.haze.circle.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "moon.haze.circle.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “moon.haze.circle.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "moon.haze.circle.fill")
                }
                
                ///Creates the “moon.haze.circle.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "moon.haze.circle.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “moon.haze.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "moon.haze.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “moon.haze.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "moon.haze.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “moon.haze.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "moon.haze.fill", configuration: configuration)
            }
            
            ///Creates the “moon.haze.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "moon.haze.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “moon.haze.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "moon.haze.fill")
            }
            
            ///Creates the “moon.haze.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "moon.haze.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.moon.stars {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “moon.stars.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "moon.stars.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “moon.stars.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "moon.stars.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “moon.stars.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "moon.stars.circle.fill", configuration: configuration)
            }
            
            ///Creates the “moon.stars.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "moon.stars.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “moon.stars.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "moon.stars.circle.fill")
            }
            
            ///Creates the “moon.stars.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "moon.stars.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.nosign {
    public struct app {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “nosign.app.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "nosign.app.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “nosign.app.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "nosign.app.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “nosign.app.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "nosign.app.fill", configuration: configuration)
            }
            
            ///Creates the “nosign.app.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "nosign.app.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “nosign.app.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "nosign.app.fill")
            }
            
            ///Creates the “nosign.app.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "nosign.app.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.opticaldisc {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “opticaldisc.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "opticaldisc.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “opticaldisc.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "opticaldisc.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “opticaldisc.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "opticaldisc.fill", configuration: configuration)
        }
        
        ///Creates the “opticaldisc.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "opticaldisc.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “opticaldisc.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "opticaldisc.fill")
        }
        
        ///Creates the “opticaldisc.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "opticaldisc.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.parkingsign {
    public struct brakesignal {
        public struct slash {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.pencil {
    public struct line {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.pencil.and {
    public struct ruler {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “pencil.and.ruler.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pencil.and.ruler.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “pencil.and.ruler.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "pencil.and.ruler.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “pencil.and.ruler.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pencil.and.ruler.fill", configuration: configuration)
            }
            
            ///Creates the “pencil.and.ruler.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "pencil.and.ruler.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “pencil.and.ruler.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pencil.and.ruler.fill")
            }
            
            ///Creates the “pencil.and.ruler.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "pencil.and.ruler.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.person {
    public struct bust {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “person.bust.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.bust.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “person.bust.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.bust.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “person.bust.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.bust.fill", configuration: configuration)
            }
            
            ///Creates the “person.bust.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.bust.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “person.bust.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.bust.fill")
            }
            
            ///Creates the “person.bust.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.bust.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct line {
        public struct dotted {
            public struct person {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “person.line.dotted.person.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "person.line.dotted.person.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “person.line.dotted.person.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "person.line.dotted.person.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “person.line.dotted.person.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "person.line.dotted.person.fill", configuration: configuration)
                    }
                    
                    ///Creates the “person.line.dotted.person.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "person.line.dotted.person.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “person.line.dotted.person.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "person.line.dotted.person.fill")
                    }
                    
                    ///Creates the “person.line.dotted.person.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "person.line.dotted.person.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.person.x2 {
    public struct badge {
        public struct gearshape {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “person.2.badge.gearshape.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "person.2.badge.gearshape.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “person.2.badge.gearshape.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "person.2.badge.gearshape.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “person.2.badge.gearshape.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "person.2.badge.gearshape.fill", configuration: configuration)
                }
                
                ///Creates the “person.2.badge.gearshape.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "person.2.badge.gearshape.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “person.2.badge.gearshape.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "person.2.badge.gearshape.fill")
                }
                
                ///Creates the “person.2.badge.gearshape.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "person.2.badge.gearshape.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct gobackward {
        private init() {}
    }
    
    public struct slash {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “person.2.slash.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.2.slash.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “person.2.slash.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "person.2.slash.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “person.2.slash.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.2.slash.fill", configuration: configuration)
            }
            
            ///Creates the “person.2.slash.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "person.2.slash.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “person.2.slash.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.2.slash.fill")
            }
            
            ///Creates the “person.2.slash.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "person.2.slash.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.person.and {
    public struct background {
        public struct dotted {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.person.badge {
    public struct shield {
        public struct checkmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “person.badge.shield.checkmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "person.badge.shield.checkmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “person.badge.shield.checkmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "person.badge.shield.checkmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “person.badge.shield.checkmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "person.badge.shield.checkmark.fill", configuration: configuration)
                }
                
                ///Creates the “person.badge.shield.checkmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "person.badge.shield.checkmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “person.badge.shield.checkmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "person.badge.shield.checkmark.fill")
                }
                
                ///Creates the “person.badge.shield.checkmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "person.badge.shield.checkmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.person.crop.rectangle {
    public struct badge {
        public struct plus {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “person.crop.rectangle.badge.plus.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "person.crop.rectangle.badge.plus.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “person.crop.rectangle.badge.plus.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "person.crop.rectangle.badge.plus.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “person.crop.rectangle.badge.plus.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "person.crop.rectangle.badge.plus.fill", configuration: configuration)
                }
                
                ///Creates the “person.crop.rectangle.badge.plus.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "person.crop.rectangle.badge.plus.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “person.crop.rectangle.badge.plus.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "person.crop.rectangle.badge.plus.fill")
                }
                
                ///Creates the “person.crop.rectangle.badge.plus.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "person.crop.rectangle.badge.plus.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.phone.arrow.down.left {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “phone.arrow.down.left.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "phone.arrow.down.left.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “phone.arrow.down.left.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "phone.arrow.down.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “phone.arrow.down.left.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "phone.arrow.down.left.fill", configuration: configuration)
        }
        
        ///Creates the “phone.arrow.down.left.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "phone.arrow.down.left.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “phone.arrow.down.left.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "phone.arrow.down.left.fill")
        }
        
        ///Creates the “phone.arrow.down.left.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "phone.arrow.down.left.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.phone.arrow.right {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “phone.arrow.right.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "phone.arrow.right.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “phone.arrow.right.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "phone.arrow.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “phone.arrow.right.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "phone.arrow.right.fill", configuration: configuration)
        }
        
        ///Creates the “phone.arrow.right.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "phone.arrow.right.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “phone.arrow.right.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "phone.arrow.right.fill")
        }
        
        ///Creates the “phone.arrow.right.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "phone.arrow.right.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.phone.arrow.up.right {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “phone.arrow.up.right.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "phone.arrow.up.right.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “phone.arrow.up.right.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "phone.arrow.up.right.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “phone.arrow.up.right.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "phone.arrow.up.right.circle.fill", configuration: configuration)
            }
            
            ///Creates the “phone.arrow.up.right.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "phone.arrow.up.right.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “phone.arrow.up.right.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "phone.arrow.up.right.circle.fill")
            }
            
            ///Creates the “phone.arrow.up.right.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "phone.arrow.up.right.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “phone.arrow.up.right.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "phone.arrow.up.right.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “phone.arrow.up.right.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "phone.arrow.up.right.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “phone.arrow.up.right.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "phone.arrow.up.right.fill", configuration: configuration)
        }
        
        ///Creates the “phone.arrow.up.right.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "phone.arrow.up.right.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “phone.arrow.up.right.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "phone.arrow.up.right.fill")
        }
        
        ///Creates the “phone.arrow.up.right.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "phone.arrow.up.right.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.phone.badge {
    public struct checkmark {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.phone.connection {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “phone.connection.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "phone.connection.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “phone.connection.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "phone.connection.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “phone.connection.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "phone.connection.fill", configuration: configuration)
        }
        
        ///Creates the “phone.connection.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "phone.connection.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “phone.connection.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "phone.connection.fill")
        }
        
        ///Creates the “phone.connection.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "phone.connection.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.phone.down {
    public struct waves {
        public struct left {
            public struct and {
                public struct right {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.phone.fill.badge {
    public struct checkmark {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.photo {
    public struct stack {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “photo.stack.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "photo.stack.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “photo.stack.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "photo.stack.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “photo.stack.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "photo.stack.fill", configuration: configuration)
            }
            
            ///Creates the “photo.stack.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "photo.stack.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “photo.stack.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "photo.stack.fill")
            }
            
            ///Creates the “photo.stack.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "photo.stack.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.play {
    public struct desktopcomputer {
        private init() {}
    }
    
    public struct display {
        private init() {}
    }
    
    public struct laptopcomputer {
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.playpause {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “playpause.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "playpause.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “playpause.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "playpause.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “playpause.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "playpause.circle.fill", configuration: configuration)
            }
            
            ///Creates the “playpause.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "playpause.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “playpause.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "playpause.circle.fill")
            }
            
            ///Creates the “playpause.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "playpause.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.questionmark {
    public struct bubble {
        public struct ar {
            private init() {}
        }
        
        public struct fill {
            public struct ar {
                private init() {}
            }
            
            private init() {}
            #if os(macOS)
            
            ///Creates the “questionmark.bubble.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "questionmark.bubble.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “questionmark.bubble.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "questionmark.bubble.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “questionmark.bubble.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "questionmark.bubble.fill", configuration: configuration)
            }
            
            ///Creates the “questionmark.bubble.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "questionmark.bubble.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “questionmark.bubble.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "questionmark.bubble.fill")
            }
            
            ///Creates the “questionmark.bubble.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "questionmark.bubble.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.recordingtape {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “recordingtape.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "recordingtape.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “recordingtape.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "recordingtape.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “recordingtape.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "recordingtape.circle.fill", configuration: configuration)
            }
            
            ///Creates the “recordingtape.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "recordingtape.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “recordingtape.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "recordingtape.circle.fill")
            }
            
            ///Creates the “recordingtape.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "recordingtape.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.rectangle.portrait.and.arrow {
    public struct forward {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.portrait.and.arrow.forward.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.portrait.and.arrow.forward.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.portrait.and.arrow.forward.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.portrait.and.arrow.forward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.portrait.and.arrow.forward.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.portrait.and.arrow.forward.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.portrait.and.arrow.forward.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.portrait.and.arrow.forward.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.portrait.and.arrow.forward.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.portrait.and.arrow.forward.fill")
            }
            
            ///Creates the “rectangle.portrait.and.arrow.forward.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.portrait.and.arrow.forward.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.rectangle.portrait.on.rectangle.portrait {
    public struct angled {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “rectangle.portrait.on.rectangle.portrait.angled.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.portrait.on.rectangle.portrait.angled.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “rectangle.portrait.on.rectangle.portrait.angled.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "rectangle.portrait.on.rectangle.portrait.angled.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “rectangle.portrait.on.rectangle.portrait.angled.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.portrait.on.rectangle.portrait.angled.fill", configuration: configuration)
            }
            
            ///Creates the “rectangle.portrait.on.rectangle.portrait.angled.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "rectangle.portrait.on.rectangle.portrait.angled.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “rectangle.portrait.on.rectangle.portrait.angled.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.portrait.on.rectangle.portrait.angled.fill")
            }
            
            ///Creates the “rectangle.portrait.on.rectangle.portrait.angled.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "rectangle.portrait.on.rectangle.portrait.angled.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.sensor {
    public struct fill {
        private init() {}
        #if os(macOS)
        
        ///Creates the “sensor.fill” system symbol image with the accessibility description you specify.
        ///
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "sensor.fill", accessibilityDescription: accessibilityDescription)
        }
        
        ///Creates the “sensor.fill” system symbol image with the variable value you specify.
        ///
        ///The value parameter is valid for symbols that support variable rendering.
        ///
        ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
        ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
        @available(macOS 13.0, *)
        @available(iOS, unavailable)
        @available(tvOS, unavailable)
        @available(watchOS, unavailable)
        public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
            SFSymbolReference.image(name: "sensor.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
        }
        
        #endif
        
        #if os(iOS) || os(tvOS) || os(watchOS)
        
        ///Creates the “sensor.fill” system symbol image object with the specified configuration.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(macOS, unavailable)
        public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "sensor.fill", configuration: configuration)
        }
        
        ///Creates the “sensor.fill” system symbol image object with the configuration and variable value you specify.
        ///
        ///Use this method to retrieve system-defined symbol images.
        ///
        ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
        ///- Parameter configuration: The image configuration the system applies to the image.
        ///
        ///- Returns: The object containing the image variant that matches the specified configuration data.
        @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        @available(macOS, unavailable)
        public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
            SFSymbolReference.image(name: "sensor.fill", variableValue: variableValue, configuration: configuration)
        }
        
        #endif
        
        #if canImport(SwiftUI)
        ///Creates the “sensor.fill” system symbol image.
        ///
        ///This initializer creates an image using a system-provided symbol.
        public static func swiftUIImage() -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "sensor.fill")
        }
        
        ///Creates the “sensor.fill” system symbol image with a variable value.
        ///
        ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
        ///
        ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
        @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
        public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
            SFSymbolReference.swiftUIImage(name: "sensor.fill", variableValue: variableValue)
        }
        
        #endif
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.shippingbox {
    public struct and {
        public struct arrow {
            public struct backward {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “shippingbox.and.arrow.backward.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "shippingbox.and.arrow.backward.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “shippingbox.and.arrow.backward.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "shippingbox.and.arrow.backward.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “shippingbox.and.arrow.backward.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "shippingbox.and.arrow.backward.fill", configuration: configuration)
                    }
                    
                    ///Creates the “shippingbox.and.arrow.backward.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "shippingbox.and.arrow.backward.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “shippingbox.and.arrow.backward.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "shippingbox.and.arrow.backward.fill")
                    }
                    
                    ///Creates the “shippingbox.and.arrow.backward.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "shippingbox.and.arrow.backward.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.slider.horizontal.x2 {
    public struct gobackward {
        private init() {}
    }
    
    public struct square {
        public struct badge {
            public struct arrow {
                public struct down {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct on {
            public struct square {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.slider.horizontal.below.square {
    public struct and {
        public struct square {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.smoke {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “smoke.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "smoke.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “smoke.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "smoke.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “smoke.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "smoke.circle.fill", configuration: configuration)
            }
            
            ///Creates the “smoke.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "smoke.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “smoke.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "smoke.circle.fill")
            }
            
            ///Creates the “smoke.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "smoke.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.speaker {
    public struct minus {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “speaker.minus.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.minus.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “speaker.minus.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.minus.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “speaker.minus.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.minus.fill", configuration: configuration)
            }
            
            ///Creates the “speaker.minus.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.minus.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “speaker.minus.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.minus.fill")
            }
            
            ///Creates the “speaker.minus.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.minus.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct plus {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “speaker.plus.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.plus.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “speaker.plus.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.plus.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “speaker.plus.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.plus.fill", configuration: configuration)
            }
            
            ///Creates the “speaker.plus.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.plus.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “speaker.plus.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.plus.fill")
            }
            
            ///Creates the “speaker.plus.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.plus.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
    public struct square {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “speaker.square.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.square.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “speaker.square.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "speaker.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “speaker.square.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.square.fill", configuration: configuration)
            }
            
            ///Creates the “speaker.square.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "speaker.square.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “speaker.square.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.square.fill")
            }
            
            ///Creates the “speaker.square.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "speaker.square.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.speaker.wave.x2 {
    public struct bubble {
        public struct left {
            public struct fill {
                public struct rtl {
                    private init() {}
                }
                
                private init() {}
                #if os(macOS)
                
                ///Creates the “speaker.wave.2.bubble.left.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.bubble.left.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “speaker.wave.2.bubble.left.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "speaker.wave.2.bubble.left.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “speaker.wave.2.bubble.left.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.bubble.left.fill", configuration: configuration)
                }
                
                ///Creates the “speaker.wave.2.bubble.left.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "speaker.wave.2.bubble.left.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “speaker.wave.2.bubble.left.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.bubble.left.fill")
                }
                
                ///Creates the “speaker.wave.2.bubble.left.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "speaker.wave.2.bubble.left.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            public struct rtl {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.sportscourt {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sportscourt.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sportscourt.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sportscourt.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sportscourt.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sportscourt.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sportscourt.circle.fill", configuration: configuration)
            }
            
            ///Creates the “sportscourt.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sportscourt.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sportscourt.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sportscourt.circle.fill")
            }
            
            ///Creates the “sportscourt.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sportscourt.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.square {
    public struct bottomthird {
        public struct inset {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct dotted {
        private init() {}
    }
    
    public struct leadingthird {
        public struct inset {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct leftthird {
        public struct inset {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct rightthird {
        public struct inset {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct topthird {
        public struct inset {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct trailingthird {
        public struct inset {
            public struct filled {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.square.x2 {
    public struct layers {
        public struct x3d {
            public struct bottom {
                public struct filled {
                    private init() {}
                }
                
                private init() {}
            }
            
            public struct top {
                public struct filled {
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.square.x3.layers.x3d {
    public struct bottom {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct middle {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
    public struct slash {
        private init() {}
    }
    
    public struct top {
        public struct filled {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.square.x3.layers.x3d.down.backward {
    public struct slash {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.square.x3.layers.x3d.down.forward {
    public struct slash {
        public struct rtl {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.square.and.pencil {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “square.and.pencil.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.and.pencil.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “square.and.pencil.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "square.and.pencil.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “square.and.pencil.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.and.pencil.circle.fill", configuration: configuration)
            }
            
            ///Creates the “square.and.pencil.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "square.and.pencil.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “square.and.pencil.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.and.pencil.circle.fill")
            }
            
            ///Creates the “square.and.pencil.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "square.and.pencil.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.square.on.square {
    public struct badge {
        public struct person {
            public struct crop {
                public struct fill {
                    private init() {}
                    #if os(macOS)
                    
                    ///Creates the “square.on.square.badge.person.crop.fill” system symbol image with the accessibility description you specify.
                    ///
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "square.on.square.badge.person.crop.fill", accessibilityDescription: accessibilityDescription)
                    }
                    
                    ///Creates the “square.on.square.badge.person.crop.fill” system symbol image with the variable value you specify.
                    ///
                    ///The value parameter is valid for symbols that support variable rendering.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                    ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                    @available(macOS 13.0, *)
                    @available(iOS, unavailable)
                    @available(tvOS, unavailable)
                    @available(watchOS, unavailable)
                    public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                        SFSymbolReference.image(name: "square.on.square.badge.person.crop.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                    }
                    
                    #endif
                    
                    #if os(iOS) || os(tvOS) || os(watchOS)
                    
                    ///Creates the “square.on.square.badge.person.crop.fill” system symbol image object with the specified configuration.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(macOS, unavailable)
                    public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "square.on.square.badge.person.crop.fill", configuration: configuration)
                    }
                    
                    ///Creates the “square.on.square.badge.person.crop.fill” system symbol image object with the configuration and variable value you specify.
                    ///
                    ///Use this method to retrieve system-defined symbol images.
                    ///
                    ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                    ///- Parameter configuration: The image configuration the system applies to the image.
                    ///
                    ///- Returns: The object containing the image variant that matches the specified configuration data.
                    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    @available(macOS, unavailable)
                    public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                        SFSymbolReference.image(name: "square.on.square.badge.person.crop.fill", variableValue: variableValue, configuration: configuration)
                    }
                    
                    #endif
                    
                    #if canImport(SwiftUI)
                    ///Creates the “square.on.square.badge.person.crop.fill” system symbol image.
                    ///
                    ///This initializer creates an image using a system-provided symbol.
                    public static func swiftUIImage() -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "square.on.square.badge.person.crop.fill")
                    }
                    
                    ///Creates the “square.on.square.badge.person.crop.fill” system symbol image with a variable value.
                    ///
                    ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                    ///
                    ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                    @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                    public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                        SFSymbolReference.swiftUIImage(name: "square.on.square.badge.person.crop.fill", variableValue: variableValue)
                    }
                    
                    #endif
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct intersection {
        public struct dashed {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.squares {
    public struct leading {
        public struct rectangle {
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.squareshape {
    public struct dotted {
        public struct split {
            public struct x2x2 {
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.star.square {
    public struct on {
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “star.square.on.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "star.square.on.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “star.square.on.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "star.square.on.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “star.square.on.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "star.square.on.square.fill", configuration: configuration)
                }
                
                ///Creates the “star.square.on.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "star.square.on.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “star.square.on.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "star.square.on.square.fill")
                }
                
                ///Creates the “star.square.on.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "star.square.on.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.sun.and.horizon {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sun.and.horizon.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sun.and.horizon.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sun.and.horizon.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sun.and.horizon.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sun.and.horizon.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sun.and.horizon.circle.fill", configuration: configuration)
            }
            
            ///Creates the “sun.and.horizon.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sun.and.horizon.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sun.and.horizon.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sun.and.horizon.circle.fill")
            }
            
            ///Creates the “sun.and.horizon.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sun.and.horizon.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.sun.dust {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sun.dust.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sun.dust.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sun.dust.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sun.dust.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sun.dust.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sun.dust.circle.fill", configuration: configuration)
            }
            
            ///Creates the “sun.dust.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sun.dust.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sun.dust.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sun.dust.circle.fill")
            }
            
            ///Creates the “sun.dust.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sun.dust.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.sun.haze {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sun.haze.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sun.haze.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sun.haze.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sun.haze.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sun.haze.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sun.haze.circle.fill", configuration: configuration)
            }
            
            ///Creates the “sun.haze.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sun.haze.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sun.haze.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sun.haze.circle.fill")
            }
            
            ///Creates the “sun.haze.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sun.haze.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.sun.max {
    public struct trianglebadge {
        public struct exclamationmark {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “sun.max.trianglebadge.exclamationmark.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "sun.max.trianglebadge.exclamationmark.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “sun.max.trianglebadge.exclamationmark.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "sun.max.trianglebadge.exclamationmark.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “sun.max.trianglebadge.exclamationmark.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "sun.max.trianglebadge.exclamationmark.fill", configuration: configuration)
                }
                
                ///Creates the “sun.max.trianglebadge.exclamationmark.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "sun.max.trianglebadge.exclamationmark.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “sun.max.trianglebadge.exclamationmark.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "sun.max.trianglebadge.exclamationmark.fill")
                }
                
                ///Creates the “sun.max.trianglebadge.exclamationmark.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "sun.max.trianglebadge.exclamationmark.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.sunrise {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sunrise.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sunrise.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sunrise.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sunrise.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sunrise.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sunrise.circle.fill", configuration: configuration)
            }
            
            ///Creates the “sunrise.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sunrise.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sunrise.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sunrise.circle.fill")
            }
            
            ///Creates the “sunrise.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sunrise.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.sunset {
    public struct circle {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “sunset.circle.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sunset.circle.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “sunset.circle.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "sunset.circle.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “sunset.circle.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sunset.circle.fill", configuration: configuration)
            }
            
            ///Creates the “sunset.circle.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "sunset.circle.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “sunset.circle.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sunset.circle.fill")
            }
            
            ///Creates the “sunset.circle.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "sunset.circle.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.`switch` {
    public struct programmable {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “switch.programmable.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "switch.programmable.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “switch.programmable.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "switch.programmable.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “switch.programmable.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "switch.programmable.fill", configuration: configuration)
            }
            
            ///Creates the “switch.programmable.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "switch.programmable.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “switch.programmable.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "switch.programmable.fill")
            }
            
            ///Creates the “switch.programmable.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "switch.programmable.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        public struct square {
            public struct fill {
                private init() {}
                #if os(macOS)
                
                ///Creates the “switch.programmable.square.fill” system symbol image with the accessibility description you specify.
                ///
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "switch.programmable.square.fill", accessibilityDescription: accessibilityDescription)
                }
                
                ///Creates the “switch.programmable.square.fill” system symbol image with the variable value you specify.
                ///
                ///The value parameter is valid for symbols that support variable rendering.
                ///
                ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
                ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
                @available(macOS 13.0, *)
                @available(iOS, unavailable)
                @available(tvOS, unavailable)
                @available(watchOS, unavailable)
                public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                    SFSymbolReference.image(name: "switch.programmable.square.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
                }
                
                #endif
                
                #if os(iOS) || os(tvOS) || os(watchOS)
                
                ///Creates the “switch.programmable.square.fill” system symbol image object with the specified configuration.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(macOS, unavailable)
                public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "switch.programmable.square.fill", configuration: configuration)
                }
                
                ///Creates the “switch.programmable.square.fill” system symbol image object with the configuration and variable value you specify.
                ///
                ///Use this method to retrieve system-defined symbol images.
                ///
                ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
                ///- Parameter configuration: The image configuration the system applies to the image.
                ///
                ///- Returns: The object containing the image variant that matches the specified configuration data.
                @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                @available(macOS, unavailable)
                public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                    SFSymbolReference.image(name: "switch.programmable.square.fill", variableValue: variableValue, configuration: configuration)
                }
                
                #endif
                
                #if canImport(SwiftUI)
                ///Creates the “switch.programmable.square.fill” system symbol image.
                ///
                ///This initializer creates an image using a system-provided symbol.
                public static func swiftUIImage() -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "switch.programmable.square.fill")
                }
                
                ///Creates the “switch.programmable.square.fill” system symbol image with a variable value.
                ///
                ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
                ///
                ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
                @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
                public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                    SFSymbolReference.swiftUIImage(name: "switch.programmable.square.fill", variableValue: variableValue)
                }
                
                #endif
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.table {
    public struct furniture {
        public struct fill {
            private init() {}
            #if os(macOS)
            
            ///Creates the “table.furniture.fill” system symbol image with the accessibility description you specify.
            ///
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "table.furniture.fill", accessibilityDescription: accessibilityDescription)
            }
            
            ///Creates the “table.furniture.fill” system symbol image with the variable value you specify.
            ///
            ///The value parameter is valid for symbols that support variable rendering.
            ///
            ///- Parameter variableValue: The value the system uses to customize the symbol’s content, between `0` and `1`.
            ///- Parameter accessibilityDescription: The accessibility description for the symbol image, if any.
            @available(macOS 13.0, *)
            @available(iOS, unavailable)
            @available(tvOS, unavailable)
            @available(watchOS, unavailable)
            public static func image(variableValue: Double, accessibilityDescription: String? = nil) -> NSImage {
                SFSymbolReference.image(name: "table.furniture.fill", variableValue: variableValue, accessibilityDescription: accessibilityDescription)
            }
            
            #endif
            
            #if os(iOS) || os(tvOS) || os(watchOS)
            
            ///Creates the “table.furniture.fill” system symbol image object with the specified configuration.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(macOS, unavailable)
            public static func image(withConfiguration configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "table.furniture.fill", configuration: configuration)
            }
            
            ///Creates the “table.furniture.fill” system symbol image object with the configuration and variable value you specify.
            ///
            ///Use this method to retrieve system-defined symbol images.
            ///
            ///- Parameter variableValue: The value the system uses to customize the image content, between `0` and `1`.
            ///- Parameter configuration: The image configuration the system applies to the image.
            ///
            ///- Returns: The object containing the image variant that matches the specified configuration data.
            @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            @available(macOS, unavailable)
            public static func image(withVariableValue variableValue: Double, configuration: SFSymbolReference.Image.Configuration? = nil) -> UIImage {
                SFSymbolReference.image(name: "table.furniture.fill", variableValue: variableValue, configuration: configuration)
            }
            
            #endif
            
            #if canImport(SwiftUI)
            ///Creates the “table.furniture.fill” system symbol image.
            ///
            ///This initializer creates an image using a system-provided symbol.
            public static func swiftUIImage() -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "table.furniture.fill")
            }
            
            ///Creates the “table.furniture.fill” system symbol image with a variable value.
            ///
            ///This initializer creates an image using a system-provided symbol. The rendered symbol may alter its appearance to represent the value provided in `variableValue`.
            ///
            ///- Parameter variableValue: An optional value between `0.0` and `1.0` that the rendered image can use to customize its appearance, if specified. If the symbol doesn’t support variable values, this parameter has no effect. Use the SF Symbols app to look up which symbols support variable values.
            @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
            public static func swiftUIImage(variableValue: Double?) -> SwiftUI.Image {
                SFSymbolReference.swiftUIImage(name: "table.furniture.fill", variableValue: variableValue)
            }
            
            #endif
        }
        
        private init() {}
    }
    
}

@available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
extension SF.text {
    public struct line {
        public struct first {
            public struct and {
                public struct arrowtriangle {
                    public struct forward {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        public struct last {
            public struct and {
                public struct arrowtriangle {
                    public struct forward {
                        private init() {}
                    }
                    
                    private init() {}
                }
                
                private init() {}
            }
            
            private init() {}
        }
        
        private init() {}
    }
    
    public struct word {
        public struct spacing {
            private init() {}
        }
        
        private init() {}
    }
    
}

